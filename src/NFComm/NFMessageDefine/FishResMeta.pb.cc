// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FishResMeta.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FishResMeta.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* FishLevelDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishLevelDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FishLevelDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FishLevelDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* FishConfigDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishConfigDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FishConfigDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FishConfigDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* GunValueConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GunValueConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GunValueConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GunValueConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* FishAlgoDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishAlgoDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FishAlgoDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FishAlgoDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserDeskAlgoInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserDeskAlgoInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeskInfoDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeskInfoDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_DeskInfoDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_DeskInfoDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* FishInitPoolData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishInitPoolData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FishInitPool_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishInitPool_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeatDangRange_B_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeatDangRange_B_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeatAlgoSetup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeatAlgoSetup_reflection_ = NULL;
const ::google::protobuf::Descriptor* HuanDangRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HuanDangRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* DangChiRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DangChiRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* FishAlgorithmSetup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishAlgorithmSetup_reflection_ = NULL;
const ::google::protobuf::Descriptor* FishAlgorithmFileName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishAlgorithmFileName_reflection_ = NULL;
const ::google::protobuf::Descriptor* FishAlgorithmCsvItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishAlgorithmCsvItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* FishAlgorithmCsv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishAlgorithmCsv_reflection_ = NULL;
const ::google::protobuf::Descriptor* FishNormalSetup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishNormalSetup_reflection_ = NULL;
const ::google::protobuf::Descriptor* FishPoolSaveBaseMul_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishPoolSaveBaseMul_reflection_ = NULL;
const ::google::protobuf::Descriptor* FishPoolSaveRelaCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishPoolSaveRelaCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* FishPoolSaveHitCountCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishPoolSaveHitCountCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* FishPoolSaveConnonHitCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishPoolSaveConnonHitCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* FishPoolSave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishPoolSave_reflection_ = NULL;
const ::google::protobuf::Descriptor* FishKindFishPoolSave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishKindFishPoolSave_reflection_ = NULL;
const ::google::protobuf::Descriptor* FishKindFishPoolSaveArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FishKindFishPoolSaveArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMCtrlLevelDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMCtrlLevelDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GMCtrlLevelDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GMCtrlLevelDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* LineGameSystemControlInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LineGameSystemControlInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_LineGameSystemControlInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_LineGameSystemControlInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LineLevelDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LineLevelDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_LineLevelDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_LineLevelDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* LineDeskInfoDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LineDeskInfoDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_LineDeskInfoDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_LineDeskInfoDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* LineAlgoDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LineAlgoDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_LineAlgoDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_LineAlgoDesc_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FishResMeta_2eproto() {
  protobuf_AddDesc_FishResMeta_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FishResMeta.proto");
  GOOGLE_CHECK(file != NULL);
  FishLevelDesc_descriptor_ = file->message_type(0);
  static const int FishLevelDesc_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishLevelDesc, levelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishLevelDesc, levelname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishLevelDesc, cannonlevelval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishLevelDesc, veccannonlevelval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishLevelDesc, cannonshownum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishLevelDesc, veccannonshownum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishLevelDesc, minmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishLevelDesc, maxmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishLevelDesc, startgame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishLevelDesc, flag_),
  };
  FishLevelDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FishLevelDesc_descriptor_,
      FishLevelDesc::default_instance_,
      FishLevelDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishLevelDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishLevelDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FishLevelDesc));
  Sheet_FishLevelDesc_descriptor_ = file->message_type(1);
  static const int Sheet_FishLevelDesc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FishLevelDesc, fishleveldesc_list_),
  };
  Sheet_FishLevelDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FishLevelDesc_descriptor_,
      Sheet_FishLevelDesc::default_instance_,
      Sheet_FishLevelDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FishLevelDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FishLevelDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FishLevelDesc));
  FishConfigDesc_descriptor_ = file->message_type(2);
  static const int FishConfigDesc_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishConfigDesc, fish_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishConfigDesc, fish_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishConfigDesc, build_fish_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishConfigDesc, ratio_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishConfigDesc, ratio_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishConfigDesc, double_award_min_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishConfigDesc, child_fish_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishConfigDesc, child_fish_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishConfigDesc, damage_radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishConfigDesc, damage_fish_ids_),
  };
  FishConfigDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FishConfigDesc_descriptor_,
      FishConfigDesc::default_instance_,
      FishConfigDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishConfigDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishConfigDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FishConfigDesc));
  Sheet_FishConfigDesc_descriptor_ = file->message_type(3);
  static const int Sheet_FishConfigDesc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FishConfigDesc, fishconfigdesc_list_),
  };
  Sheet_FishConfigDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FishConfigDesc_descriptor_,
      Sheet_FishConfigDesc::default_instance_,
      Sheet_FishConfigDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FishConfigDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FishConfigDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FishConfigDesc));
  GunValueConfig_descriptor_ = file->message_type(4);
  static const int GunValueConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GunValueConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GunValueConfig, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GunValueConfig, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GunValueConfig, gun_id_),
  };
  GunValueConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GunValueConfig_descriptor_,
      GunValueConfig::default_instance_,
      GunValueConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GunValueConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GunValueConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GunValueConfig));
  Sheet_GunValueConfig_descriptor_ = file->message_type(5);
  static const int Sheet_GunValueConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GunValueConfig, gunvalueconfig_list_),
  };
  Sheet_GunValueConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GunValueConfig_descriptor_,
      Sheet_GunValueConfig::default_instance_,
      Sheet_GunValueConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GunValueConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GunValueConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GunValueConfig));
  FishAlgoDesc_descriptor_ = file->message_type(6);
  static const int FishAlgoDesc_offsets_[60] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, algoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, gameplatform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, algoname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, algodesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, changetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, changeliushui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang1_rangelow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang1_rangehigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang1_chi1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang1_chi2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang1_chi3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang1_fang1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang1_fang2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang1_fang3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang1_ratechi1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang1_ratechi2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang1_ratechi3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang1_rateping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang1_ratefang1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang1_ratefang2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang1_ratefang3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang2_rangelow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang2_rangehigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang2_chi1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang2_chi2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang2_chi3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang2_fang1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang2_fang2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang2_fang3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang2_ratechi1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang2_ratechi2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang2_ratechi3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang2_rateping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang2_ratefang1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang2_ratefang2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang2_ratefang3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang3_rangelow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang3_rangehigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang3_chi1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang3_chi2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang3_chi3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang3_fang1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang3_fang2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang3_fang3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang3_ratechi1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang3_ratechi2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang3_ratechi3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang3_rateping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang3_ratefang1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang3_ratefang2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, chang3_ratefang3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, clear_maxval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, clear_fang3mul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, clear_chi3mul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, clear_initshoot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, clear_initcapture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, clear_initdrawrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, clear_initpoolrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, is_delete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, fishalgotype_),
  };
  FishAlgoDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FishAlgoDesc_descriptor_,
      FishAlgoDesc::default_instance_,
      FishAlgoDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgoDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FishAlgoDesc));
  Sheet_FishAlgoDesc_descriptor_ = file->message_type(7);
  static const int Sheet_FishAlgoDesc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FishAlgoDesc, fishalgodesc_list_),
  };
  Sheet_FishAlgoDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FishAlgoDesc_descriptor_,
      Sheet_FishAlgoDesc::default_instance_,
      Sheet_FishAlgoDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FishAlgoDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FishAlgoDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FishAlgoDesc));
  UserDeskAlgoInfo_descriptor_ = file->message_type(8);
  static const int UserDeskAlgoInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDeskAlgoInfo, algoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDeskAlgoInfo, drawrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDeskAlgoInfo, curtotalshoot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDeskAlgoInfo, curtotalcapture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDeskAlgoInfo, curalgochang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDeskAlgoInfo, curalgostatus_),
  };
  UserDeskAlgoInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserDeskAlgoInfo_descriptor_,
      UserDeskAlgoInfo::default_instance_,
      UserDeskAlgoInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDeskAlgoInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDeskAlgoInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserDeskAlgoInfo));
  DeskInfoDesc_descriptor_ = file->message_type(9);
  static const int DeskInfoDesc_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskInfoDesc, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskInfoDesc, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskInfoDesc, deskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskInfoDesc, algotype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskInfoDesc, algodata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskInfoDesc, gamelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskInfoDesc, yvaluea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskInfoDesc, yvalueb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskInfoDesc, freepool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskInfoDesc, yvalue_),
  };
  DeskInfoDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeskInfoDesc_descriptor_,
      DeskInfoDesc::default_instance_,
      DeskInfoDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskInfoDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeskInfoDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeskInfoDesc));
  Sheet_DeskInfoDesc_descriptor_ = file->message_type(10);
  static const int Sheet_DeskInfoDesc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DeskInfoDesc, deskinfodesc_list_),
  };
  Sheet_DeskInfoDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_DeskInfoDesc_descriptor_,
      Sheet_DeskInfoDesc::default_instance_,
      Sheet_DeskInfoDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DeskInfoDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DeskInfoDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_DeskInfoDesc));
  FishInitPoolData_descriptor_ = file->message_type(11);
  static const int FishInitPoolData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishInitPoolData, fish_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishInitPoolData, num_),
  };
  FishInitPoolData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FishInitPoolData_descriptor_,
      FishInitPoolData::default_instance_,
      FishInitPoolData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishInitPoolData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishInitPoolData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FishInitPoolData));
  FishInitPool_descriptor_ = file->message_type(12);
  static const int FishInitPool_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishInitPool, initpoolcount_),
  };
  FishInitPool_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FishInitPool_descriptor_,
      FishInitPool::default_instance_,
      FishInitPool_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishInitPool, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishInitPool, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FishInitPool));
  SeatDangRange_B_descriptor_ = file->message_type(13);
  static const int SeatDangRange_B_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatDangRange_B, value_),
  };
  SeatDangRange_B_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeatDangRange_B_descriptor_,
      SeatDangRange_B::default_instance_,
      SeatDangRange_B_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatDangRange_B, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatDangRange_B, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeatDangRange_B));
  SeatAlgoSetup_descriptor_ = file->message_type(14);
  static const int SeatAlgoSetup_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatAlgoSetup, seatctrlisopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatAlgoSetup, seatdangrange_def_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatAlgoSetup, seatdangrange_def_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatAlgoSetup, seatdangrange_def_robot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatAlgoSetup, seatdangrange_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatAlgoSetup, cleardatamaxval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatAlgoSetup, cleardatafangcondation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatAlgoSetup, cleardatachicondation_),
  };
  SeatAlgoSetup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeatAlgoSetup_descriptor_,
      SeatAlgoSetup::default_instance_,
      SeatAlgoSetup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatAlgoSetup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatAlgoSetup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeatAlgoSetup));
  HuanDangRange_descriptor_ = file->message_type(15);
  static const int HuanDangRange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuanDangRange, value_),
  };
  HuanDangRange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HuanDangRange_descriptor_,
      HuanDangRange::default_instance_,
      HuanDangRange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuanDangRange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuanDangRange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HuanDangRange));
  DangChiRange_descriptor_ = file->message_type(16);
  static const int DangChiRange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DangChiRange, value_),
  };
  DangChiRange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DangChiRange_descriptor_,
      DangChiRange::default_instance_,
      DangChiRange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DangChiRange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DangChiRange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DangChiRange));
  FishAlgorithmSetup_descriptor_ = file->message_type(17);
  static const int FishAlgorithmSetup_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmSetup, huanchangtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmSetup, huandangrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmSetup, dangchirange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmSetup, huanbiaoliushuival_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmSetup, poolinitbfb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmSetup, cleardatamaxval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmSetup, cleardatafangcondation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmSetup, cleardatachicondation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmSetup, cleardatainitshoot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmSetup, cleardatainitcapture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmSetup, cleardatainitdrawrate_),
  };
  FishAlgorithmSetup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FishAlgorithmSetup_descriptor_,
      FishAlgorithmSetup::default_instance_,
      FishAlgorithmSetup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmSetup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmSetup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FishAlgorithmSetup));
  FishAlgorithmFileName_descriptor_ = file->message_type(18);
  static const int FishAlgorithmFileName_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmFileName, filenamechi1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmFileName, filenamechi2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmFileName, filenamechi5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmFileName, filenamechi10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmFileName, filenamechi20_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmFileName, filenamechi50_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmFileName, filenamechi100_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmFileName, filenamechi200_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmFileName, filenamefang1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmFileName, filenamefang2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmFileName, filenamefang5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmFileName, filenamefang10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmFileName, filenamefang20_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmFileName, filenamefang50_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmFileName, filenamefang100_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmFileName, filenamefang200_),
  };
  FishAlgorithmFileName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FishAlgorithmFileName_descriptor_,
      FishAlgorithmFileName::default_instance_,
      FishAlgorithmFileName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmFileName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmFileName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FishAlgorithmFileName));
  FishAlgorithmCsvItem_descriptor_ = file->message_type(19);
  static const int FishAlgorithmCsvItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmCsvItem, value_),
  };
  FishAlgorithmCsvItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FishAlgorithmCsvItem_descriptor_,
      FishAlgorithmCsvItem::default_instance_,
      FishAlgorithmCsvItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmCsvItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmCsvItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FishAlgorithmCsvItem));
  FishAlgorithmCsv_descriptor_ = file->message_type(20);
  static const int FishAlgorithmCsv_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmCsv, item_),
  };
  FishAlgorithmCsv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FishAlgorithmCsv_descriptor_,
      FishAlgorithmCsv::default_instance_,
      FishAlgorithmCsv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmCsv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishAlgorithmCsv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FishAlgorithmCsv));
  FishNormalSetup_descriptor_ = file->message_type(21);
  static const int FishNormalSetup_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishNormalSetup, switchbosstime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishNormalSetup, switchscenetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishNormalSetup, initsceneindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishNormalSetup, awardpoolsavetodbtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishNormalSetup, cleartracetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishNormalSetup, cannonlevelval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishNormalSetup, cannonshownum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishNormalSetup, bulletharmaddbfb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishNormalSetup, bulletcountinscreen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishNormalSetup, totalscenecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishNormalSetup, screenfishmaxcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishNormalSetup, clientnotoperatetiptimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishNormalSetup, clientexittimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishNormalSetup, testfishmustkilled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishNormalSetup, clientlessmoneytip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishNormalSetup, turntablecalcminbyoneju_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishNormalSetup, usersettlementtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishNormalSetup, tipbaojimoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishNormalSetup, batchsendfishesinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishNormalSetup, batchsendfishescount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishNormalSetup, switchscenepreparetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishNormalSetup, switchscenefishgoawaytime_),
  };
  FishNormalSetup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FishNormalSetup_descriptor_,
      FishNormalSetup::default_instance_,
      FishNormalSetup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishNormalSetup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishNormalSetup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FishNormalSetup));
  FishPoolSaveBaseMul_descriptor_ = file->message_type(22);
  static const int FishPoolSaveBaseMul_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishPoolSaveBaseMul, value_),
  };
  FishPoolSaveBaseMul_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FishPoolSaveBaseMul_descriptor_,
      FishPoolSaveBaseMul::default_instance_,
      FishPoolSaveBaseMul_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishPoolSaveBaseMul, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishPoolSaveBaseMul, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FishPoolSaveBaseMul));
  FishPoolSaveRelaCount_descriptor_ = file->message_type(23);
  static const int FishPoolSaveRelaCount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishPoolSaveRelaCount, value_),
  };
  FishPoolSaveRelaCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FishPoolSaveRelaCount_descriptor_,
      FishPoolSaveRelaCount::default_instance_,
      FishPoolSaveRelaCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishPoolSaveRelaCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishPoolSaveRelaCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FishPoolSaveRelaCount));
  FishPoolSaveHitCountCfg_descriptor_ = file->message_type(24);
  static const int FishPoolSaveHitCountCfg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishPoolSaveHitCountCfg, value_),
  };
  FishPoolSaveHitCountCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FishPoolSaveHitCountCfg_descriptor_,
      FishPoolSaveHitCountCfg::default_instance_,
      FishPoolSaveHitCountCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishPoolSaveHitCountCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishPoolSaveHitCountCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FishPoolSaveHitCountCfg));
  FishPoolSaveConnonHitCount_descriptor_ = file->message_type(25);
  static const int FishPoolSaveConnonHitCount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishPoolSaveConnonHitCount, value_),
  };
  FishPoolSaveConnonHitCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FishPoolSaveConnonHitCount_descriptor_,
      FishPoolSaveConnonHitCount::default_instance_,
      FishPoolSaveConnonHitCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishPoolSaveConnonHitCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishPoolSaveConnonHitCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FishPoolSaveConnonHitCount));
  FishPoolSave_descriptor_ = file->message_type(26);
  static const int FishPoolSave_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishPoolSave, dwfishid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishPoolSave, btfishkind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishPoolSave, btfishkindgroup1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishPoolSave, btfishkindgroup2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishPoolSave, btfishkindgroup3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishPoolSave, btfishkindgroup4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishPoolSave, bkilled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishPoolSave, brobotkilled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishPoolSave, bkilledbyotherrela_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishPoolSave, bkilledbyalgoa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishPoolSave, btkilledcannonindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishPoolSave, bfloatmul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishPoolSave, arbasemul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishPoolSave, arrelacount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishPoolSave, arhitcountcfg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishPoolSave, arconnonhitcount_),
  };
  FishPoolSave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FishPoolSave_descriptor_,
      FishPoolSave::default_instance_,
      FishPoolSave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishPoolSave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishPoolSave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FishPoolSave));
  FishKindFishPoolSave_descriptor_ = file->message_type(27);
  static const int FishKindFishPoolSave_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishKindFishPoolSave, fish_pool_),
  };
  FishKindFishPoolSave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FishKindFishPoolSave_descriptor_,
      FishKindFishPoolSave::default_instance_,
      FishKindFishPoolSave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishKindFishPoolSave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishKindFishPoolSave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FishKindFishPoolSave));
  FishKindFishPoolSaveArray_descriptor_ = file->message_type(28);
  static const int FishKindFishPoolSaveArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishKindFishPoolSaveArray, fish_kind_),
  };
  FishKindFishPoolSaveArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FishKindFishPoolSaveArray_descriptor_,
      FishKindFishPoolSaveArray::default_instance_,
      FishKindFishPoolSaveArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishKindFishPoolSaveArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishKindFishPoolSaveArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FishKindFishPoolSaveArray));
  GMCtrlLevelDesc_descriptor_ = file->message_type(29);
  static const int GMCtrlLevelDesc_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCtrlLevelDesc, controllevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCtrlLevelDesc, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCtrlLevelDesc, controlrate_),
  };
  GMCtrlLevelDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMCtrlLevelDesc_descriptor_,
      GMCtrlLevelDesc::default_instance_,
      GMCtrlLevelDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCtrlLevelDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCtrlLevelDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMCtrlLevelDesc));
  Sheet_GMCtrlLevelDesc_descriptor_ = file->message_type(30);
  static const int Sheet_GMCtrlLevelDesc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GMCtrlLevelDesc, gmctrlleveldesc_list_),
  };
  Sheet_GMCtrlLevelDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GMCtrlLevelDesc_descriptor_,
      Sheet_GMCtrlLevelDesc::default_instance_,
      Sheet_GMCtrlLevelDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GMCtrlLevelDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GMCtrlLevelDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GMCtrlLevelDesc));
  LineGameSystemControlInfo_descriptor_ = file->message_type(31);
  static const int LineGameSystemControlInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineGameSystemControlInfo, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineGameSystemControlInfo, areaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineGameSystemControlInfo, totalprofit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineGameSystemControlInfo, currentsystemcontrol_),
  };
  LineGameSystemControlInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LineGameSystemControlInfo_descriptor_,
      LineGameSystemControlInfo::default_instance_,
      LineGameSystemControlInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineGameSystemControlInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineGameSystemControlInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LineGameSystemControlInfo));
  Sheet_LineGameSystemControlInfo_descriptor_ = file->message_type(32);
  static const int Sheet_LineGameSystemControlInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_LineGameSystemControlInfo, linegamesystemcontrolinfo_list_),
  };
  Sheet_LineGameSystemControlInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_LineGameSystemControlInfo_descriptor_,
      Sheet_LineGameSystemControlInfo::default_instance_,
      Sheet_LineGameSystemControlInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_LineGameSystemControlInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_LineGameSystemControlInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_LineGameSystemControlInfo));
  LineLevelDesc_descriptor_ = file->message_type(33);
  static const int LineLevelDesc_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineLevelDesc, levelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineLevelDesc, levelname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineLevelDesc, cannonlevelval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineLevelDesc, veccannonlevelval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineLevelDesc, cannonshownum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineLevelDesc, veccannonshownum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineLevelDesc, minmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineLevelDesc, maxmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineLevelDesc, startgame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineLevelDesc, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineLevelDesc, maxwintimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineLevelDesc, chip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineLevelDesc, vecchips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineLevelDesc, gmlevelrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineLevelDesc, vecgmlevelrate_),
  };
  LineLevelDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LineLevelDesc_descriptor_,
      LineLevelDesc::default_instance_,
      LineLevelDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineLevelDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineLevelDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LineLevelDesc));
  Sheet_LineLevelDesc_descriptor_ = file->message_type(34);
  static const int Sheet_LineLevelDesc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_LineLevelDesc, lineleveldesc_list_),
  };
  Sheet_LineLevelDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_LineLevelDesc_descriptor_,
      Sheet_LineLevelDesc::default_instance_,
      Sheet_LineLevelDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_LineLevelDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_LineLevelDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_LineLevelDesc));
  LineDeskInfoDesc_descriptor_ = file->message_type(35);
  static const int LineDeskInfoDesc_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineDeskInfoDesc, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineDeskInfoDesc, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineDeskInfoDesc, deskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineDeskInfoDesc, algoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineDeskInfoDesc, drawrate_),
  };
  LineDeskInfoDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LineDeskInfoDesc_descriptor_,
      LineDeskInfoDesc::default_instance_,
      LineDeskInfoDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineDeskInfoDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineDeskInfoDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LineDeskInfoDesc));
  Sheet_LineDeskInfoDesc_descriptor_ = file->message_type(36);
  static const int Sheet_LineDeskInfoDesc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_LineDeskInfoDesc, linedeskinfodesc_list_),
  };
  Sheet_LineDeskInfoDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_LineDeskInfoDesc_descriptor_,
      Sheet_LineDeskInfoDesc::default_instance_,
      Sheet_LineDeskInfoDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_LineDeskInfoDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_LineDeskInfoDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_LineDeskInfoDesc));
  LineAlgoDesc_descriptor_ = file->message_type(37);
  static const int LineAlgoDesc_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineAlgoDesc, algoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineAlgoDesc, algoname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineAlgoDesc, algodesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineAlgoDesc, level_chi5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineAlgoDesc, level_chi4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineAlgoDesc, level_chi3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineAlgoDesc, level_chi2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineAlgoDesc, level_chi1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineAlgoDesc, level_fang1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineAlgoDesc, level_fang2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineAlgoDesc, level_fang3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineAlgoDesc, level_fang4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineAlgoDesc, level_fang5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineAlgoDesc, userlucksection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineAlgoDesc, vecuserlucksection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineAlgoDesc, usernewsection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineAlgoDesc, vecusernewsection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineAlgoDesc, usernewluckval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineAlgoDesc, vecusernewluckval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineAlgoDesc, userrechargesection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineAlgoDesc, vecuserrechargesection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineAlgoDesc, userrechargeluckyval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineAlgoDesc, vecuserrechargeluckyval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineAlgoDesc, userluceflag_),
  };
  LineAlgoDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LineAlgoDesc_descriptor_,
      LineAlgoDesc::default_instance_,
      LineAlgoDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineAlgoDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineAlgoDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LineAlgoDesc));
  Sheet_LineAlgoDesc_descriptor_ = file->message_type(38);
  static const int Sheet_LineAlgoDesc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_LineAlgoDesc, linealgodesc_list_),
  };
  Sheet_LineAlgoDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_LineAlgoDesc_descriptor_,
      Sheet_LineAlgoDesc::default_instance_,
      Sheet_LineAlgoDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_LineAlgoDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_LineAlgoDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_LineAlgoDesc));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FishResMeta_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FishLevelDesc_descriptor_, &FishLevelDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FishLevelDesc_descriptor_, &Sheet_FishLevelDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FishConfigDesc_descriptor_, &FishConfigDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FishConfigDesc_descriptor_, &Sheet_FishConfigDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GunValueConfig_descriptor_, &GunValueConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GunValueConfig_descriptor_, &Sheet_GunValueConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FishAlgoDesc_descriptor_, &FishAlgoDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FishAlgoDesc_descriptor_, &Sheet_FishAlgoDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserDeskAlgoInfo_descriptor_, &UserDeskAlgoInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeskInfoDesc_descriptor_, &DeskInfoDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_DeskInfoDesc_descriptor_, &Sheet_DeskInfoDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FishInitPoolData_descriptor_, &FishInitPoolData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FishInitPool_descriptor_, &FishInitPool::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeatDangRange_B_descriptor_, &SeatDangRange_B::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeatAlgoSetup_descriptor_, &SeatAlgoSetup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HuanDangRange_descriptor_, &HuanDangRange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DangChiRange_descriptor_, &DangChiRange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FishAlgorithmSetup_descriptor_, &FishAlgorithmSetup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FishAlgorithmFileName_descriptor_, &FishAlgorithmFileName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FishAlgorithmCsvItem_descriptor_, &FishAlgorithmCsvItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FishAlgorithmCsv_descriptor_, &FishAlgorithmCsv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FishNormalSetup_descriptor_, &FishNormalSetup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FishPoolSaveBaseMul_descriptor_, &FishPoolSaveBaseMul::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FishPoolSaveRelaCount_descriptor_, &FishPoolSaveRelaCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FishPoolSaveHitCountCfg_descriptor_, &FishPoolSaveHitCountCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FishPoolSaveConnonHitCount_descriptor_, &FishPoolSaveConnonHitCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FishPoolSave_descriptor_, &FishPoolSave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FishKindFishPoolSave_descriptor_, &FishKindFishPoolSave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FishKindFishPoolSaveArray_descriptor_, &FishKindFishPoolSaveArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMCtrlLevelDesc_descriptor_, &GMCtrlLevelDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GMCtrlLevelDesc_descriptor_, &Sheet_GMCtrlLevelDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LineGameSystemControlInfo_descriptor_, &LineGameSystemControlInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_LineGameSystemControlInfo_descriptor_, &Sheet_LineGameSystemControlInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LineLevelDesc_descriptor_, &LineLevelDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_LineLevelDesc_descriptor_, &Sheet_LineLevelDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LineDeskInfoDesc_descriptor_, &LineDeskInfoDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_LineDeskInfoDesc_descriptor_, &Sheet_LineDeskInfoDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LineAlgoDesc_descriptor_, &LineAlgoDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_LineAlgoDesc_descriptor_, &Sheet_LineAlgoDesc::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FishResMeta_2eproto() {
  delete FishLevelDesc::default_instance_;
  delete FishLevelDesc_reflection_;
  delete Sheet_FishLevelDesc::default_instance_;
  delete Sheet_FishLevelDesc_reflection_;
  delete FishConfigDesc::default_instance_;
  delete FishConfigDesc_reflection_;
  delete Sheet_FishConfigDesc::default_instance_;
  delete Sheet_FishConfigDesc_reflection_;
  delete GunValueConfig::default_instance_;
  delete GunValueConfig_reflection_;
  delete Sheet_GunValueConfig::default_instance_;
  delete Sheet_GunValueConfig_reflection_;
  delete FishAlgoDesc::default_instance_;
  delete FishAlgoDesc_reflection_;
  delete Sheet_FishAlgoDesc::default_instance_;
  delete Sheet_FishAlgoDesc_reflection_;
  delete UserDeskAlgoInfo::default_instance_;
  delete UserDeskAlgoInfo_reflection_;
  delete DeskInfoDesc::default_instance_;
  delete DeskInfoDesc_reflection_;
  delete Sheet_DeskInfoDesc::default_instance_;
  delete Sheet_DeskInfoDesc_reflection_;
  delete FishInitPoolData::default_instance_;
  delete FishInitPoolData_reflection_;
  delete FishInitPool::default_instance_;
  delete FishInitPool_reflection_;
  delete SeatDangRange_B::default_instance_;
  delete SeatDangRange_B_reflection_;
  delete SeatAlgoSetup::default_instance_;
  delete SeatAlgoSetup_reflection_;
  delete HuanDangRange::default_instance_;
  delete HuanDangRange_reflection_;
  delete DangChiRange::default_instance_;
  delete DangChiRange_reflection_;
  delete FishAlgorithmSetup::default_instance_;
  delete FishAlgorithmSetup_reflection_;
  delete FishAlgorithmFileName::default_instance_;
  delete FishAlgorithmFileName_reflection_;
  delete FishAlgorithmCsvItem::default_instance_;
  delete FishAlgorithmCsvItem_reflection_;
  delete FishAlgorithmCsv::default_instance_;
  delete FishAlgorithmCsv_reflection_;
  delete FishNormalSetup::default_instance_;
  delete FishNormalSetup_reflection_;
  delete FishPoolSaveBaseMul::default_instance_;
  delete FishPoolSaveBaseMul_reflection_;
  delete FishPoolSaveRelaCount::default_instance_;
  delete FishPoolSaveRelaCount_reflection_;
  delete FishPoolSaveHitCountCfg::default_instance_;
  delete FishPoolSaveHitCountCfg_reflection_;
  delete FishPoolSaveConnonHitCount::default_instance_;
  delete FishPoolSaveConnonHitCount_reflection_;
  delete FishPoolSave::default_instance_;
  delete FishPoolSave_reflection_;
  delete FishKindFishPoolSave::default_instance_;
  delete FishKindFishPoolSave_reflection_;
  delete FishKindFishPoolSaveArray::default_instance_;
  delete FishKindFishPoolSaveArray_reflection_;
  delete GMCtrlLevelDesc::default_instance_;
  delete GMCtrlLevelDesc_reflection_;
  delete Sheet_GMCtrlLevelDesc::default_instance_;
  delete Sheet_GMCtrlLevelDesc_reflection_;
  delete LineGameSystemControlInfo::default_instance_;
  delete LineGameSystemControlInfo_reflection_;
  delete Sheet_LineGameSystemControlInfo::default_instance_;
  delete Sheet_LineGameSystemControlInfo_reflection_;
  delete LineLevelDesc::default_instance_;
  delete LineLevelDesc_reflection_;
  delete Sheet_LineLevelDesc::default_instance_;
  delete Sheet_LineLevelDesc_reflection_;
  delete LineDeskInfoDesc::default_instance_;
  delete LineDeskInfoDesc_reflection_;
  delete Sheet_LineDeskInfoDesc::default_instance_;
  delete Sheet_LineDeskInfoDesc_reflection_;
  delete LineAlgoDesc::default_instance_;
  delete LineAlgoDesc_reflection_;
  delete Sheet_LineAlgoDesc::default_instance_;
  delete Sheet_LineAlgoDesc_reflection_;
}

void protobuf_AddDesc_FishResMeta_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_proto_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021FishResMeta.proto\022\010proto_ff\032\025yd_fieldo"
    "ptions.proto\032\022proto_common.proto\"\202\003\n\rFis"
    "hLevelDesc\022 \n\007LevelID\030\001 \001(\005B\017\272\304\023\007LevelID"
    "\300\202\024\002\022*\n\tLevelName\030\002 \001(\tB\027\272\304\023\tLevelName\220\301"
    "\024\200\001\310\202\024\200\001\0224\n\016CannonLevelVal\030\003 \001(\tB\034\272\304\023\016Ca"
    "nnonLevelVal\220\301\024\200\001\310\202\024\200\001\022\037\n\021VecCannonLevel"
    "Val\030\004 \003(\005B\004\210\301\024\n\0222\n\rCannonShowNum\030\005 \001(\tB\033"
    "\272\304\023\rCannonShowNum\220\301\024\200\001\310\202\024\200\001\022\036\n\020VecCannon"
    "ShowNum\030\006 \003(\005B\004\210\301\024\n\022\036\n\010MinMoney\030\007 \001(\005B\014\272"
    "\304\023\010MinMoney\022\036\n\010MaxMoney\030\010 \001(\005B\014\272\304\023\010MaxMo"
    "ney\022 \n\tStartGame\030\t \001(\005B\r\272\304\023\tStartGame\022\026\n"
    "\004Flag\030\n \001(\005B\010\272\304\023\004Flag\"P\n\023Sheet_FishLevel"
    "Desc\0229\n\022FishLevelDesc_List\030\001 \003(\0132\027.proto"
    "_ff.FishLevelDescB\004\210\301\024d\"\273\004\n\016FishConfigDe"
    "sc\022\036\n\007fish_id\030\001 \001(\005B\r\302\377\024\005\351\261\274id\300\202\024\002\022)\n\tfi"
    "sh_type\030\002 \001(\005B\026\302\377\024\022\351\261\274\347\232\204\347\216\251\346\263\225\347\261\273\345\236\213\0225\n"
    "\017build_fish_type\030\003 \001(\005B\034\302\377\024\030\345\256\242\346\210\267\347\253\257\345\210\233"
    "\345\273\272\351\261\274\347\261\273\345\236\213\022&\n\tratio_min\030\004 \001(\005B\023\302\377\024\017\345\200\215"
    "\347\216\207\346\234\200\345\260\217\345\200\274\022&\n\tratio_max\030\005 \001(\005B\023\302\377\024\017\345\200\215"
    "\347\216\207\346\234\200\345\244\247\345\200\274\022N\n\026double_award_min_ratio\030\006"
    " \001(\005B.\302\377\024*\345\217\257\350\203\275\350\247\246\345\217\221\345\217\214\345\200\215\345\245\226\345\212\261\346\211\200\351\234\200"
    "\346\234\200\344\275\216\345\200\215\347\216\207\0229\n\020child_fish_count\030\007 \001(\005B\037"
    "\302\377\024\033\347\273\204\345\220\210\351\261\274\346\220\272\345\270\246\345\255\220\351\261\274\344\270\252\346\225\260\022Q\n\016child"
    "_fish_ids\030\010 \003(\tB9\302\377\024#\347\273\204\345\220\210\351\261\274\344\275\215\347\275\256\345\217\257\351"
    "\200\211\345\255\220\351\261\274id\345\210\227\350\241\250\220\301\024\200\001\310\202\024\200\001\210\301\024\006\340\202\024\006\0220\n\rda"
    "mage_radius\030\t \001(\005B\031\302\377\024\025\351\261\274\346\255\273\344\272\241\344\274\244\345\256\263\345\215"
    "\212\345\276\204\022G\n\017damage_fish_ids\030\n \001(\tB.\302\377\024 \351\261\274\346\255"
    "\273\344\272\241\345\217\257\344\274\244\345\256\263\347\232\204\351\261\274id\345\210\227\350\241\250\220\301\024\200\001\310\202\024\200\001\"T\n"
    "\024Sheet_FishConfigDesc\022<\n\023FishConfigDesc_"
    "List\030\001 \003(\0132\030.proto_ff.FishConfigDescB\005\210\301"
    "\024\364\003\"\212\001\n\016GunValueConfig\022\034\n\002id\030\001 \001(\005B\020\302\377\024\010"
    "\347\202\256\345\200\274ID\300\202\024\002\022\031\n\005value\030\002 \001(\005B\n\302\377\024\006\347\202\256\345\200\274\022"
    "!\n\007room_id\030\003 \001(\005B\020\302\377\024\014\346\210\277\351\227\264\345\220\215\345\255\227\022\034\n\006gu"
    "n_id\030\004 \001(\005B\014\302\377\024\010\347\202\256\347\256\241ID\"T\n\024Sheet_GunVal"
    "ueConfig\022<\n\023GunValueConfig_List\030\001 \003(\0132\030."
    "proto_ff.GunValueConfigB\005\210\301\024\364\003\"\266\024\n\014FishA"
    "lgoDesc\022\036\n\006AlgoID\030\001 \001(\005B\016\302\377\024\006AlgoID\300\202\024\002\022"
    "&\n\014GamePlatform\030\002 \001(\005B\020\302\377\024\014GamePlatform\022"
    "&\n\010AlgoName\030\003 \001(\tB\024\302\377\024\010AlgoName\220\301\024@\310\202\024@\022"
    "&\n\010AlgoDesc\030\004 \001(\tB\024\302\377\024\010AlgoDesc\220\301\024@\310\202\024@\022"
    "$\n\013ChangeTimes\030\005 \001(\003B\017\302\377\024\013ChangeTimes\022(\n"
    "\rChangeLiuShui\030\006 \001(\003B\021\302\377\024\rChangeLiuShui\022"
    ",\n\017Chang1_RangeLow\030\007 \001(\003B\023\302\377\024\017Chang1_Ran"
    "geLow\022.\n\020Chang1_RangeHigh\030\010 \001(\003B\024\302\377\024\020Cha"
    "ng1_RangeHigh\022$\n\013Chang1_Chi1\030\t \001(\003B\017\302\377\024\013"
    "Chang1_Chi1\022$\n\013Chang1_Chi2\030\n \001(\003B\017\302\377\024\013Ch"
    "ang1_Chi2\022$\n\013Chang1_Chi3\030\013 \001(\003B\017\302\377\024\013Chan"
    "g1_Chi3\022&\n\014Chang1_Fang1\030\014 \001(\003B\020\302\377\024\014Chang"
    "1_Fang1\022&\n\014Chang1_Fang2\030\r \001(\003B\020\302\377\024\014Chang"
    "1_Fang2\022&\n\014Chang1_Fang3\030\016 \001(\003B\020\302\377\024\014Chang"
    "1_Fang3\022,\n\017Chang1_RateChi1\030\017 \001(\003B\023\302\377\024\017Ch"
    "ang1_RateChi1\022,\n\017Chang1_RateChi2\030\020 \001(\003B\023"
    "\302\377\024\017Chang1_RateChi2\022,\n\017Chang1_RateChi3\030\021"
    " \001(\003B\023\302\377\024\017Chang1_RateChi3\022,\n\017Chang1_Rate"
    "Ping\030\022 \001(\003B\023\302\377\024\017Chang1_RatePing\022.\n\020Chang"
    "1_RateFang1\030\023 \001(\003B\024\302\377\024\020Chang1_RateFang1\022"
    ".\n\020Chang1_RateFang2\030\024 \001(\003B\024\302\377\024\020Chang1_Ra"
    "teFang2\022.\n\020Chang1_RateFang3\030\025 \001(\003B\024\302\377\024\020C"
    "hang1_RateFang3\022,\n\017Chang2_RangeLow\030\026 \001(\003"
    "B\023\302\377\024\017Chang2_RangeLow\022.\n\020Chang2_RangeHig"
    "h\030\027 \001(\003B\024\302\377\024\020Chang2_RangeHigh\022$\n\013Chang2_"
    "Chi1\030\030 \001(\003B\017\302\377\024\013Chang2_Chi1\022$\n\013Chang2_Ch"
    "i2\030\031 \001(\003B\017\302\377\024\013Chang2_Chi2\022$\n\013Chang2_Chi3"
    "\030\032 \001(\003B\017\302\377\024\013Chang2_Chi3\022&\n\014Chang2_Fang1\030"
    "\033 \001(\003B\020\302\377\024\014Chang2_Fang1\022&\n\014Chang2_Fang2\030"
    "\034 \001(\003B\020\302\377\024\014Chang2_Fang2\022&\n\014Chang2_Fang3\030"
    "\035 \001(\003B\020\302\377\024\014Chang2_Fang3\022,\n\017Chang2_RateCh"
    "i1\030\036 \001(\003B\023\302\377\024\017Chang2_RateChi1\022,\n\017Chang2_"
    "RateChi2\030\037 \001(\003B\023\302\377\024\017Chang2_RateChi2\022,\n\017C"
    "hang2_RateChi3\030  \001(\003B\023\302\377\024\017Chang2_RateChi"
    "3\022,\n\017Chang2_RatePing\030! \001(\003B\023\302\377\024\017Chang2_R"
    "atePing\022.\n\020Chang2_RateFang1\030\" \001(\003B\024\302\377\024\020C"
    "hang2_RateFang1\022.\n\020Chang2_RateFang2\030# \001("
    "\003B\024\302\377\024\020Chang2_RateFang2\022.\n\020Chang2_RateFa"
    "ng3\030$ \001(\003B\024\302\377\024\020Chang2_RateFang3\022,\n\017Chang"
    "3_RangeLow\030% \001(\003B\023\302\377\024\017Chang3_RangeLow\022.\n"
    "\020Chang3_RangeHigh\030& \001(\003B\024\302\377\024\020Chang3_Rang"
    "eHigh\022$\n\013Chang3_Chi1\030\' \001(\003B\017\302\377\024\013Chang3_C"
    "hi1\022$\n\013Chang3_Chi2\030( \001(\003B\017\302\377\024\013Chang3_Chi"
    "2\022$\n\013Chang3_Chi3\030) \001(\003B\017\302\377\024\013Chang3_Chi3\022"
    "&\n\014Chang3_Fang1\030* \001(\003B\020\302\377\024\014Chang3_Fang1\022"
    "&\n\014Chang3_Fang2\030+ \001(\003B\020\302\377\024\014Chang3_Fang2\022"
    "&\n\014Chang3_Fang3\030, \001(\003B\020\302\377\024\014Chang3_Fang3\022"
    ",\n\017Chang3_RateChi1\030- \001(\003B\023\302\377\024\017Chang3_Rat"
    "eChi1\022,\n\017Chang3_RateChi2\030. \001(\003B\023\302\377\024\017Chan"
    "g3_RateChi2\022,\n\017Chang3_RateChi3\030/ \001(\003B\023\302\377"
    "\024\017Chang3_RateChi3\022,\n\017Chang3_RatePing\0300 \001"
    "(\003B\023\302\377\024\017Chang3_RatePing\022.\n\020Chang3_RateFa"
    "ng1\0301 \001(\003B\024\302\377\024\020Chang3_RateFang1\022.\n\020Chang"
    "3_RateFang2\0302 \001(\003B\024\302\377\024\020Chang3_RateFang2\022"
    ".\n\020Chang3_RateFang3\0303 \001(\003B\024\302\377\024\020Chang3_Ra"
    "teFang3\022&\n\014Clear_MaxVal\0304 \001(\003B\020\302\377\024\014Clear"
    "_MaxVal\022*\n\016Clear_Fang3Mul\0305 \001(\003B\022\302\377\024\016Cle"
    "ar_Fang3Mul\022(\n\rClear_Chi3Mul\0306 \001(\005B\021\302\377\024\r"
    "Clear_Chi3Mul\022,\n\017Clear_InitShoot\0307 \001(\005B\023"
    "\302\377\024\017Clear_InitShoot\0220\n\021Clear_InitCapture"
    "\0308 \001(\005B\025\302\377\024\021Clear_InitCapture\0222\n\022Clear_I"
    "nitDrawRate\0309 \001(\005B\026\302\377\024\022Clear_InitDrawRat"
    "e\0222\n\022Clear_InitPoolRate\030: \001(\005B\026\302\377\024\022Clear"
    "_InitPoolRate\022 \n\tIs_delete\030; \001(\005B\r\302\377\024\tIs"
    "_delete\022&\n\014FishAlgoType\030< \001(\005B\020\302\377\024\014FishA"
    "lgoType\"N\n\022Sheet_FishAlgoDesc\0228\n\021FishAlg"
    "oDesc_List\030\001 \003(\0132\026.proto_ff.FishAlgoDesc"
    "B\005\210\301\024\310\001\"\221\001\n\020UserDeskAlgoInfo\022\016\n\006AlgoID\030\001"
    " \001(\005\022\020\n\010DrawRate\030\002 \001(\002\022\025\n\rCurTotalShoot\030"
    "\003 \001(\001\022\027\n\017CurTotalCapture\030\004 \001(\001\022\024\n\014CurAlg"
    "oChang\030\005 \001(\003\022\025\n\rCurAlgoStatus\030\006 \001(\003\"\231\003\n\014"
    "DeskInfoDesc\022\032\n\002id\030\001 \001(\005B\016\300\202\024\002\230\304\023\001\272\304\023\002ID"
    "\022 \n\006RoomID\030\002 \001(\005B\020\300\202\024\003\272\304\023\010\346\210\277\351\227\264ID\022 \n\006De"
    "skID\030\003 \001(\005B\020\300\202\024\003\272\304\023\010\346\241\214\345\255\220ID\022\"\n\010AlgoType"
    "\030\004 \001(\005B\020\272\304\023\014\347\256\227\346\263\225\347\261\273\345\236\213\0226\n\010AlgoData\030\005 \003"
    "(\0132\032.proto_ff.UserDeskAlgoInfoB\010\210\301\024\003\340\202\024\003"
    "\022#\n\tGameLevel\030\006 \001(\005B\020\272\304\023\014\347\256\227\346\263\225\347\255\211\347\272\247\022\'\n"
    "\007YValueA\030\007 \001(\003B\026\272\304\023\022\347\216\251\345\256\266\347\264\257\347\247\257\345\245\226\346\261\240\022-"
    "\n\007YValueB\030\010 \001(\003B\034\272\304\023\030\351\273\221\347\231\275\345\220\215\345\215\225\347\264\257\347\247\257\345"
    "\245\226\346\261\240\022(\n\010FreePool\030\t \001(\003B\026\272\304\023\022\345\205\215\350\264\271\350\265\240\351\200"
    "\201\345\245\226\346\261\240\022&\n\006YValue\030\n \001(\003B\026\272\304\023\022\347\264\257\347\247\257\345\245\226\346\261"
    "\240\346\200\273\345\222\214\"N\n\022Sheet_DeskInfoDesc\0228\n\021DeskInf"
    "oDesc_List\030\001 \003(\0132\026.proto_ff.DeskInfoDesc"
    "B\005\210\301\024\310\001\"0\n\020FishInitPoolData\022\017\n\007fish_id\030\001"
    " \001(\005\022\013\n\003num\030\002 \001(\005\"G\n\014FishInitPool\0227\n\rIni"
    "tPoolCount\030\001 \003(\0132\032.proto_ff.FishInitPool"
    "DataB\004\210\301\024d\"&\n\017SeatDangRange_B\022\023\n\005value\030\001"
    " \003(\003B\004\210\301\024\010\"\246\002\n\rSeatAlgoSetup\022\026\n\016SeatCtrl"
    "IsOpen\030\001 \001(\005\022!\n\023SeatDangRange_Def_A\030\002 \003("
    "\003B\004\210\301\024\007\022!\n\023SeatDangRange_Def_B\030\003 \003(\003B\004\210\301"
    "\024\007\022%\n\027SeatDangRange_Def_Robot\030\004 \003(\003B\004\210\301\024"
    "\007\0228\n\017SeatDangRange_B\030\005 \003(\0132\031.proto_ff.Se"
    "atDangRange_BB\004\210\301\024\n\022\027\n\017ClearDataMaxVal\030\006"
    " \001(\003\022\036\n\026ClearDataFangCondation\030\007 \001(\001\022\035\n\025"
    "ClearDataChiCondation\030\010 \001(\001\"$\n\rHuanDangR"
    "ange\022\023\n\005value\030\001 \003(\003B\004\210\301\024\010\"#\n\014DangChiRang"
    "e\022\023\n\005value\030\001 \003(\003B\004\210\301\024\007\"\370\002\n\022FishAlgorithm"
    "Setup\022\026\n\016HuanChangTimes\030\001 \001(\003\0224\n\rHuanDan"
    "gRange\030\002 \003(\0132\027.proto_ff.HuanDangRangeB\004\210"
    "\301\024\003\0222\n\014DangChiRange\030\003 \003(\0132\026.proto_ff.Dan"
    "gChiRangeB\004\210\301\024\003\022\032\n\022HuanBiaoLiuShuiVal\030\004 "
    "\001(\003\022\023\n\013PoolInitBFB\030\005 \001(\003\022\027\n\017ClearDataMax"
    "Val\030\006 \001(\003\022\036\n\026ClearDataFangCondation\030\007 \001("
    "\001\022\035\n\025ClearDataChiCondation\030\010 \001(\001\022\032\n\022Clea"
    "rDataInitShoot\030\t \001(\003\022\034\n\024ClearDataInitCap"
    "ture\030\n \001(\003\022\035\n\025ClearDataInitDrawRate\030\013 \001("
    "\001\"\355\003\n\025FishAlgorithmFileName\022\032\n\014FileNameC"
    "hi1\030\001 \001(\tB\004\220\301\024 \022\032\n\014FileNameChi2\030\002 \001(\tB\004\220"
    "\301\024 \022\032\n\014FileNameChi5\030\003 \001(\tB\004\220\301\024 \022\033\n\rFileN"
    "ameChi10\030\004 \001(\tB\004\220\301\024 \022\033\n\rFileNameChi20\030\005 "
    "\001(\tB\004\220\301\024 \022\033\n\rFileNameChi50\030\006 \001(\tB\004\220\301\024 \022\034"
    "\n\016FileNameChi100\030\007 \001(\tB\004\220\301\024 \022\034\n\016FileName"
    "Chi200\030\010 \001(\tB\004\220\301\024 \022\033\n\rFileNameFang1\030\013 \001("
    "\tB\004\220\301\024 \022\033\n\rFileNameFang2\030\014 \001(\tB\004\220\301\024 \022\033\n\r"
    "FileNameFang5\030\r \001(\tB\004\220\301\024 \022\034\n\016FileNameFan"
    "g10\030\016 \001(\tB\004\220\301\024 \022\034\n\016FileNameFang20\030\017 \001(\tB"
    "\004\220\301\024 \022\034\n\016FileNameFang50\030\020 \001(\tB\004\220\301\024 \022\035\n\017F"
    "ileNameFang100\030\021 \001(\tB\004\220\301\024 \022\035\n\017FileNameFa"
    "ng200\030\022 \001(\tB\004\220\301\024 \",\n\024FishAlgorithmCsvIte"
    "m\022\024\n\005value\030\001 \003(\005B\005\210\301\024\364\003\"F\n\020FishAlgorithm"
    "Csv\0222\n\004item\030\001 \003(\0132\036.proto_ff.FishAlgorit"
    "hmCsvItemB\004\210\301\024\n\"\210\005\n\017FishNormalSetup\022\026\n\016S"
    "witchBossTime\030\001 \001(\005\022\027\n\017SwitchSceneTime\030\002"
    " \001(\005\022\026\n\016InitSceneIndex\030\003 \001(\005\022\035\n\025AwardPoo"
    "lSaveToDBTime\030\004 \001(\005\022\026\n\016ClearTraceTime\030\005 "
    "\001(\005\022\034\n\016CannonLevelVal\030\006 \003(\005B\004\210\301\024\n\022\033\n\rCan"
    "nonShowNum\030\007 \003(\005B\004\210\301\024\n\022\036\n\020BulletHarmAddB"
    "FB\030\010 \003(\001B\004\210\301\024\002\022\033\n\023BulletCountInScreen\030\t "
    "\001(\005\022\027\n\017TotalSceneCount\030\n \001(\005\022\032\n\022ScreenFi"
    "shMaxCount\030\013 \001(\005\022 \n\030ClientNotOperateTipT"
    "imes\030\014 \001(\005\022\027\n\017ClientExitTimes\030\r \001(\005\022\032\n\022T"
    "estFishMustKilled\030\016 \001(\005\022\032\n\022ClientLessMon"
    "eyTip\030\017 \001(\005\022\037\n\027TurnTableCalcMinByOneJu\030\020"
    " \001(\005\022\033\n\023UserSettlementTimes\030\021 \001(\005\022\025\n\rTip"
    "BaoJiMoney\030\022 \001(\005\022\037\n\027BatchSendFishesInter"
    "val\030\023 \001(\005\022\034\n\024BatchSendFishesCount\030\024 \001(\005\022"
    "\036\n\026SwitchScenePrepareTime\030\025 \001(\005\022!\n\031Switc"
    "hSceneFishGoAwayTime\030\026 \001(\005\"*\n\023FishPoolSa"
    "veBaseMul\022\023\n\005value\030\001 \003(\005B\004\210\301\024\n\",\n\025FishPo"
    "olSaveRelaCount\022\023\n\005value\030\001 \003(\005B\004\210\301\024\n\".\n\027"
    "FishPoolSaveHitCountCfg\022\023\n\005value\030\001 \003(\005B\004"
    "\210\301\024\n\"1\n\032FishPoolSaveConnonHitCount\022\023\n\005va"
    "lue\030\001 \003(\001B\004\210\301\024\n\"\241\004\n\014FishPoolSave\022\020\n\010dwFi"
    "shID\030\001 \001(\005\022\022\n\nbtFishKind\030\002 \001(\005\022\030\n\020btFish"
    "KindGroup1\030\003 \001(\005\022\030\n\020btFishKindGroup2\030\004 \001"
    "(\005\022\030\n\020btFishKindGroup3\030\005 \001(\005\022\030\n\020btFishKi"
    "ndGroup4\030\006 \001(\005\022\017\n\007bKilled\030\007 \001(\010\022\024\n\014bRobo"
    "tKilled\030\010 \001(\010\022\032\n\022bKilledByOtherRela\030\t \001("
    "\010\022\026\n\016bKilledByAlgoA\030\n \001(\010\022\033\n\023btKilledCan"
    "nonIndex\030\013 \001(\005\022\021\n\tbFloatMul\030\014 \001(\010\0226\n\tarB"
    "aseMul\030\r \003(\0132\035.proto_ff.FishPoolSaveBase"
    "MulB\004\210\301\024\003\022:\n\013arRelaCount\030\016 \003(\0132\037.proto_f"
    "f.FishPoolSaveRelaCountB\004\210\301\024\003\022>\n\rarHitCo"
    "untCfg\030\017 \003(\0132!.proto_ff.FishPoolSaveHitC"
    "ountCfgB\004\210\301\024\003\022D\n\020arConnonHitCount\030\020 \003(\0132"
    "$.proto_ff.FishPoolSaveConnonHitCountB\004\210"
    "\301\024\003\"H\n\024FishKindFishPoolSave\0220\n\tfish_pool"
    "\030\001 \003(\0132\026.proto_ff.FishPoolSaveB\005\210\301\024\364\003\"U\n"
    "\031FishKindFishPoolSaveArray\0228\n\tfish_kind\030"
    "\001 \003(\0132\036.proto_ff.FishKindFishPoolSaveB\005\210"
    "\301\024\226\001\"\203\001\n\017GMCtrlLevelDesc\022*\n\014ControlLevel"
    "\030\001 \001(\005B\024\302\377\024\014ControlLevel\300\202\024\002\022\036\n\004Name\030\002 \001"
    "(\tB\020\302\377\024\004Name\220\301\024@\310\202\024@\022$\n\013ControlRate\030\003 \001("
    "\005B\017\302\377\024\013ControlRate\"V\n\025Sheet_GMCtrlLevelD"
    "esc\022=\n\024GMCtrlLevelDesc_List\030\001 \003(\0132\031.prot"
    "o_ff.GMCtrlLevelDescB\004\210\301\024\024\"\247\001\n\031LineGameS"
    "ystemControlInfo\022 \n\006RoomID\030\001 \001(\005B\020\300\202\024\002\272\304"
    "\023\010\346\210\277\351\227\264ID\022\016\n\006AreaID\030\002 \001(\005\022(\n\013TotalProfi"
    "t\030\003 \001(\003B\023\272\304\023\017\347\263\273\347\273\237\346\200\273\345\210\251\346\266\246\022.\n\024CurrentS"
    "ystemControl\030\004 \001(\005B\020\272\304\023\014\346\216\247\345\210\266\351\232\276\345\272\246\"t\n\037"
    "Sheet_LineGameSystemControlInfo\022Q\n\036LineG"
    "ameSystemControlInfo_List\030\001 \003(\0132#.proto_"
    "ff.LineGameSystemControlInfoB\004\210\301\024\024\"\230\003\n\rL"
    "ineLevelDesc\022\025\n\007LevelID\030\001 \001(\005B\004\300\202\024\002\022\035\n\tL"
    "evelName\030\002 \001(\tB\n\220\301\024\200\001\310\202\024\200\001\022\"\n\016CannonLeve"
    "lVal\030\003 \001(\tB\n\220\301\024\200\001\310\202\024\200\001\022\037\n\021VecCannonLevel"
    "Val\030\004 \003(\005B\004\210\301\024\n\022!\n\rCannonShowNum\030\005 \001(\tB\n"
    "\220\301\024\200\001\310\202\024\200\001\022\036\n\020VecCannonShowNum\030\006 \003(\005B\004\210\301"
    "\024\n\022\020\n\010MinMoney\030\007 \001(\005\022\020\n\010MaxMoney\030\010 \001(\005\022\021"
    "\n\tStartGame\030\t \001(\005\022\014\n\004Flag\030\n \001(\005\022\023\n\013MaxWi"
    "nTimes\030\013 \001(\005\022\030\n\004Chip\030\014 \001(\tB\n\220\301\024\200\001\310\202\024\200\001\022\026"
    "\n\010VecChips\030\r \003(\003B\004\210\301\024\n\022\037\n\013GMLevelRate\030\016 "
    "\001(\tB\n\220\301\024\200\001\310\202\024\200\001\022\034\n\016VecGMLevelRate\030\017 \003(\005B"
    "\004\210\301\024\n\"P\n\023Sheet_LineLevelDesc\0229\n\022LineLeve"
    "lDesc_List\030\001 \003(\0132\027.proto_ff.LineLevelDes"
    "cB\004\210\301\024d\"v\n\020LineDeskInfoDesc\022\024\n\002id\030\001 \001(\005B"
    "\010\300\202\024\002\230\304\023\001\022\024\n\006RoomID\030\002 \001(\005B\004\300\202\024\003\022\024\n\006DeskI"
    "D\030\003 \001(\005B\004\300\202\024\003\022\016\n\006AlgoID\030\004 \001(\005\022\020\n\010DrawRat"
    "e\030\005 \001(\005\"Z\n\026Sheet_LineDeskInfoDesc\022@\n\025Lin"
    "eDeskInfoDesc_List\030\001 \003(\0132\032.proto_ff.Line"
    "DeskInfoDescB\005\210\301\024\310\001\"\252\005\n\014LineAlgoDesc\022\030\n\006"
    "AlgoID\030\001 \001(\005B\010\300\202\024\002\230\304\023\001\022\032\n\010AlgoName\030\002 \001(\t"
    "B\010\220\301\024 \310\202\024 \022\032\n\010AlgoDesc\030\003 \001(\tB\010\220\301\024 \310\202\024 \022\022"
    "\n\nLevel_Chi5\030\004 \001(\003\022\022\n\nLevel_Chi4\030\005 \001(\003\022\022"
    "\n\nLevel_Chi3\030\006 \001(\003\022\022\n\nLevel_Chi2\030\007 \001(\003\022\022"
    "\n\nLevel_Chi1\030\010 \001(\003\022\023\n\013Level_Fang1\030\t \001(\003\022"
    "\023\n\013Level_Fang2\030\n \001(\003\022\023\n\013Level_Fang3\030\013 \001("
    "\003\022\023\n\013Level_Fang4\030\014 \001(\003\022\023\n\013Level_Fang5\030\r "
    "\001(\003\022!\n\017UserLuckSection\030\016 \001(\tB\010\220\301\024@\310\202\024@\022 "
    "\n\022VecUserLuckSection\030\017 \003(\005B\004\210\301\024\005\022 \n\016User"
    "NewSection\030\020 \001(\tB\010\220\301\024@\310\202\024@\022\037\n\021VecUserNew"
    "Section\030\021 \003(\005B\004\210\301\024\005\022 \n\016UserNewLuckVal\030\022 "
    "\001(\tB\010\220\301\024@\310\202\024@\022\037\n\021VecUserNewLuckVal\030\023 \003(\005"
    "B\004\210\301\024\005\022%\n\023UserRechargeSection\030\024 \001(\tB\010\220\301\024"
    "@\310\202\024@\022$\n\026VecUserRechargeSection\030\025 \003(\005B\004\210"
    "\301\024\005\022&\n\024UserRechargeLuckyVal\030\026 \001(\tB\010\220\301\024@\310"
    "\202\024@\022%\n\027VecUserRechargeLuckyVal\030\027 \003(\005B\004\210\301"
    "\024\005\022\024\n\014UserLuceFlag\030\030 \001(\005\"M\n\022Sheet_LineAl"
    "goDesc\0227\n\021LineAlgoDesc_List\030\001 \003(\0132\026.prot"
    "o_ff.LineAlgoDescB\004\210\301\024\n", 9823);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FishResMeta.proto", &protobuf_RegisterTypes);
  FishLevelDesc::default_instance_ = new FishLevelDesc();
  Sheet_FishLevelDesc::default_instance_ = new Sheet_FishLevelDesc();
  FishConfigDesc::default_instance_ = new FishConfigDesc();
  Sheet_FishConfigDesc::default_instance_ = new Sheet_FishConfigDesc();
  GunValueConfig::default_instance_ = new GunValueConfig();
  Sheet_GunValueConfig::default_instance_ = new Sheet_GunValueConfig();
  FishAlgoDesc::default_instance_ = new FishAlgoDesc();
  Sheet_FishAlgoDesc::default_instance_ = new Sheet_FishAlgoDesc();
  UserDeskAlgoInfo::default_instance_ = new UserDeskAlgoInfo();
  DeskInfoDesc::default_instance_ = new DeskInfoDesc();
  Sheet_DeskInfoDesc::default_instance_ = new Sheet_DeskInfoDesc();
  FishInitPoolData::default_instance_ = new FishInitPoolData();
  FishInitPool::default_instance_ = new FishInitPool();
  SeatDangRange_B::default_instance_ = new SeatDangRange_B();
  SeatAlgoSetup::default_instance_ = new SeatAlgoSetup();
  HuanDangRange::default_instance_ = new HuanDangRange();
  DangChiRange::default_instance_ = new DangChiRange();
  FishAlgorithmSetup::default_instance_ = new FishAlgorithmSetup();
  FishAlgorithmFileName::default_instance_ = new FishAlgorithmFileName();
  FishAlgorithmCsvItem::default_instance_ = new FishAlgorithmCsvItem();
  FishAlgorithmCsv::default_instance_ = new FishAlgorithmCsv();
  FishNormalSetup::default_instance_ = new FishNormalSetup();
  FishPoolSaveBaseMul::default_instance_ = new FishPoolSaveBaseMul();
  FishPoolSaveRelaCount::default_instance_ = new FishPoolSaveRelaCount();
  FishPoolSaveHitCountCfg::default_instance_ = new FishPoolSaveHitCountCfg();
  FishPoolSaveConnonHitCount::default_instance_ = new FishPoolSaveConnonHitCount();
  FishPoolSave::default_instance_ = new FishPoolSave();
  FishKindFishPoolSave::default_instance_ = new FishKindFishPoolSave();
  FishKindFishPoolSaveArray::default_instance_ = new FishKindFishPoolSaveArray();
  GMCtrlLevelDesc::default_instance_ = new GMCtrlLevelDesc();
  Sheet_GMCtrlLevelDesc::default_instance_ = new Sheet_GMCtrlLevelDesc();
  LineGameSystemControlInfo::default_instance_ = new LineGameSystemControlInfo();
  Sheet_LineGameSystemControlInfo::default_instance_ = new Sheet_LineGameSystemControlInfo();
  LineLevelDesc::default_instance_ = new LineLevelDesc();
  Sheet_LineLevelDesc::default_instance_ = new Sheet_LineLevelDesc();
  LineDeskInfoDesc::default_instance_ = new LineDeskInfoDesc();
  Sheet_LineDeskInfoDesc::default_instance_ = new Sheet_LineDeskInfoDesc();
  LineAlgoDesc::default_instance_ = new LineAlgoDesc();
  Sheet_LineAlgoDesc::default_instance_ = new Sheet_LineAlgoDesc();
  FishLevelDesc::default_instance_->InitAsDefaultInstance();
  Sheet_FishLevelDesc::default_instance_->InitAsDefaultInstance();
  FishConfigDesc::default_instance_->InitAsDefaultInstance();
  Sheet_FishConfigDesc::default_instance_->InitAsDefaultInstance();
  GunValueConfig::default_instance_->InitAsDefaultInstance();
  Sheet_GunValueConfig::default_instance_->InitAsDefaultInstance();
  FishAlgoDesc::default_instance_->InitAsDefaultInstance();
  Sheet_FishAlgoDesc::default_instance_->InitAsDefaultInstance();
  UserDeskAlgoInfo::default_instance_->InitAsDefaultInstance();
  DeskInfoDesc::default_instance_->InitAsDefaultInstance();
  Sheet_DeskInfoDesc::default_instance_->InitAsDefaultInstance();
  FishInitPoolData::default_instance_->InitAsDefaultInstance();
  FishInitPool::default_instance_->InitAsDefaultInstance();
  SeatDangRange_B::default_instance_->InitAsDefaultInstance();
  SeatAlgoSetup::default_instance_->InitAsDefaultInstance();
  HuanDangRange::default_instance_->InitAsDefaultInstance();
  DangChiRange::default_instance_->InitAsDefaultInstance();
  FishAlgorithmSetup::default_instance_->InitAsDefaultInstance();
  FishAlgorithmFileName::default_instance_->InitAsDefaultInstance();
  FishAlgorithmCsvItem::default_instance_->InitAsDefaultInstance();
  FishAlgorithmCsv::default_instance_->InitAsDefaultInstance();
  FishNormalSetup::default_instance_->InitAsDefaultInstance();
  FishPoolSaveBaseMul::default_instance_->InitAsDefaultInstance();
  FishPoolSaveRelaCount::default_instance_->InitAsDefaultInstance();
  FishPoolSaveHitCountCfg::default_instance_->InitAsDefaultInstance();
  FishPoolSaveConnonHitCount::default_instance_->InitAsDefaultInstance();
  FishPoolSave::default_instance_->InitAsDefaultInstance();
  FishKindFishPoolSave::default_instance_->InitAsDefaultInstance();
  FishKindFishPoolSaveArray::default_instance_->InitAsDefaultInstance();
  GMCtrlLevelDesc::default_instance_->InitAsDefaultInstance();
  Sheet_GMCtrlLevelDesc::default_instance_->InitAsDefaultInstance();
  LineGameSystemControlInfo::default_instance_->InitAsDefaultInstance();
  Sheet_LineGameSystemControlInfo::default_instance_->InitAsDefaultInstance();
  LineLevelDesc::default_instance_->InitAsDefaultInstance();
  Sheet_LineLevelDesc::default_instance_->InitAsDefaultInstance();
  LineDeskInfoDesc::default_instance_->InitAsDefaultInstance();
  Sheet_LineDeskInfoDesc::default_instance_->InitAsDefaultInstance();
  LineAlgoDesc::default_instance_->InitAsDefaultInstance();
  Sheet_LineAlgoDesc::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FishResMeta_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FishResMeta_2eproto {
  StaticDescriptorInitializer_FishResMeta_2eproto() {
    protobuf_AddDesc_FishResMeta_2eproto();
  }
} static_descriptor_initializer_FishResMeta_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FishLevelDesc::kLevelIDFieldNumber;
const int FishLevelDesc::kLevelNameFieldNumber;
const int FishLevelDesc::kCannonLevelValFieldNumber;
const int FishLevelDesc::kVecCannonLevelValFieldNumber;
const int FishLevelDesc::kCannonShowNumFieldNumber;
const int FishLevelDesc::kVecCannonShowNumFieldNumber;
const int FishLevelDesc::kMinMoneyFieldNumber;
const int FishLevelDesc::kMaxMoneyFieldNumber;
const int FishLevelDesc::kStartGameFieldNumber;
const int FishLevelDesc::kFlagFieldNumber;
#endif  // !_MSC_VER

FishLevelDesc::FishLevelDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FishLevelDesc::InitAsDefaultInstance() {
}

FishLevelDesc::FishLevelDesc(const FishLevelDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FishLevelDesc::SharedCtor() {
  _cached_size_ = 0;
  levelid_ = 0;
  levelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cannonlevelval_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cannonshownum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  minmoney_ = 0;
  maxmoney_ = 0;
  startgame_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FishLevelDesc::~FishLevelDesc() {
  SharedDtor();
}

void FishLevelDesc::SharedDtor() {
  if (levelname_ != &::google::protobuf::internal::kEmptyString) {
    delete levelname_;
  }
  if (cannonlevelval_ != &::google::protobuf::internal::kEmptyString) {
    delete cannonlevelval_;
  }
  if (cannonshownum_ != &::google::protobuf::internal::kEmptyString) {
    delete cannonshownum_;
  }
  if (this != default_instance_) {
  }
}

void FishLevelDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishLevelDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishLevelDesc_descriptor_;
}

const FishLevelDesc& FishLevelDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

FishLevelDesc* FishLevelDesc::default_instance_ = NULL;

FishLevelDesc* FishLevelDesc::New() const {
  return new FishLevelDesc;
}

void FishLevelDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    levelid_ = 0;
    if (has_levelname()) {
      if (levelname_ != &::google::protobuf::internal::kEmptyString) {
        levelname_->clear();
      }
    }
    if (has_cannonlevelval()) {
      if (cannonlevelval_ != &::google::protobuf::internal::kEmptyString) {
        cannonlevelval_->clear();
      }
    }
    if (has_cannonshownum()) {
      if (cannonshownum_ != &::google::protobuf::internal::kEmptyString) {
        cannonshownum_->clear();
      }
    }
    minmoney_ = 0;
    maxmoney_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    startgame_ = 0;
    flag_ = 0;
  }
  veccannonlevelval_.Clear();
  veccannonshownum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FishLevelDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 LevelID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levelid_)));
          set_has_levelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LevelName;
        break;
      }

      // optional string LevelName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LevelName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_levelname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->levelname().data(), this->levelname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_CannonLevelVal;
        break;
      }

      // optional string CannonLevelVal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CannonLevelVal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cannonlevelval()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cannonlevelval().data(), this->cannonlevelval().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_VecCannonLevelVal;
        break;
      }

      // repeated int32 VecCannonLevelVal = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VecCannonLevelVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_veccannonlevelval())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_veccannonlevelval())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_VecCannonLevelVal;
        if (input->ExpectTag(42)) goto parse_CannonShowNum;
        break;
      }

      // optional string CannonShowNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CannonShowNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cannonshownum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cannonshownum().data(), this->cannonshownum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_VecCannonShowNum;
        break;
      }

      // repeated int32 VecCannonShowNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VecCannonShowNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_veccannonshownum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_veccannonshownum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_VecCannonShowNum;
        if (input->ExpectTag(56)) goto parse_MinMoney;
        break;
      }

      // optional int32 MinMoney = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MinMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minmoney_)));
          set_has_minmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_MaxMoney;
        break;
      }

      // optional int32 MaxMoney = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxmoney_)));
          set_has_maxmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_StartGame;
        break;
      }

      // optional int32 StartGame = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StartGame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startgame_)));
          set_has_startgame();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_Flag;
        break;
      }

      // optional int32 Flag = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FishLevelDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 LevelID = 1;
  if (has_levelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->levelid(), output);
  }

  // optional string LevelName = 2;
  if (has_levelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->levelname().data(), this->levelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->levelname(), output);
  }

  // optional string CannonLevelVal = 3;
  if (has_cannonlevelval()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cannonlevelval().data(), this->cannonlevelval().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cannonlevelval(), output);
  }

  // repeated int32 VecCannonLevelVal = 4;
  for (int i = 0; i < this->veccannonlevelval_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->veccannonlevelval(i), output);
  }

  // optional string CannonShowNum = 5;
  if (has_cannonshownum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cannonshownum().data(), this->cannonshownum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->cannonshownum(), output);
  }

  // repeated int32 VecCannonShowNum = 6;
  for (int i = 0; i < this->veccannonshownum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->veccannonshownum(i), output);
  }

  // optional int32 MinMoney = 7;
  if (has_minmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->minmoney(), output);
  }

  // optional int32 MaxMoney = 8;
  if (has_maxmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->maxmoney(), output);
  }

  // optional int32 StartGame = 9;
  if (has_startgame()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->startgame(), output);
  }

  // optional int32 Flag = 10;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FishLevelDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 LevelID = 1;
  if (has_levelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->levelid(), target);
  }

  // optional string LevelName = 2;
  if (has_levelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->levelname().data(), this->levelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->levelname(), target);
  }

  // optional string CannonLevelVal = 3;
  if (has_cannonlevelval()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cannonlevelval().data(), this->cannonlevelval().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cannonlevelval(), target);
  }

  // repeated int32 VecCannonLevelVal = 4;
  for (int i = 0; i < this->veccannonlevelval_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->veccannonlevelval(i), target);
  }

  // optional string CannonShowNum = 5;
  if (has_cannonshownum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cannonshownum().data(), this->cannonshownum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cannonshownum(), target);
  }

  // repeated int32 VecCannonShowNum = 6;
  for (int i = 0; i < this->veccannonshownum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->veccannonshownum(i), target);
  }

  // optional int32 MinMoney = 7;
  if (has_minmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->minmoney(), target);
  }

  // optional int32 MaxMoney = 8;
  if (has_maxmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->maxmoney(), target);
  }

  // optional int32 StartGame = 9;
  if (has_startgame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->startgame(), target);
  }

  // optional int32 Flag = 10;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FishLevelDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 LevelID = 1;
    if (has_levelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levelid());
    }

    // optional string LevelName = 2;
    if (has_levelname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->levelname());
    }

    // optional string CannonLevelVal = 3;
    if (has_cannonlevelval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cannonlevelval());
    }

    // optional string CannonShowNum = 5;
    if (has_cannonshownum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cannonshownum());
    }

    // optional int32 MinMoney = 7;
    if (has_minmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minmoney());
    }

    // optional int32 MaxMoney = 8;
    if (has_maxmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxmoney());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 StartGame = 9;
    if (has_startgame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startgame());
    }

    // optional int32 Flag = 10;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  // repeated int32 VecCannonLevelVal = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->veccannonlevelval_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->veccannonlevelval(i));
    }
    total_size += 1 * this->veccannonlevelval_size() + data_size;
  }

  // repeated int32 VecCannonShowNum = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->veccannonshownum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->veccannonshownum(i));
    }
    total_size += 1 * this->veccannonshownum_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishLevelDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FishLevelDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FishLevelDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FishLevelDesc::MergeFrom(const FishLevelDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  veccannonlevelval_.MergeFrom(from.veccannonlevelval_);
  veccannonshownum_.MergeFrom(from.veccannonshownum_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_levelid()) {
      set_levelid(from.levelid());
    }
    if (from.has_levelname()) {
      set_levelname(from.levelname());
    }
    if (from.has_cannonlevelval()) {
      set_cannonlevelval(from.cannonlevelval());
    }
    if (from.has_cannonshownum()) {
      set_cannonshownum(from.cannonshownum());
    }
    if (from.has_minmoney()) {
      set_minmoney(from.minmoney());
    }
    if (from.has_maxmoney()) {
      set_maxmoney(from.maxmoney());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_startgame()) {
      set_startgame(from.startgame());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FishLevelDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishLevelDesc::CopyFrom(const FishLevelDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishLevelDesc::IsInitialized() const {

  return true;
}

void FishLevelDesc::Swap(FishLevelDesc* other) {
  if (other != this) {
    std::swap(levelid_, other->levelid_);
    std::swap(levelname_, other->levelname_);
    std::swap(cannonlevelval_, other->cannonlevelval_);
    veccannonlevelval_.Swap(&other->veccannonlevelval_);
    std::swap(cannonshownum_, other->cannonshownum_);
    veccannonshownum_.Swap(&other->veccannonshownum_);
    std::swap(minmoney_, other->minmoney_);
    std::swap(maxmoney_, other->maxmoney_);
    std::swap(startgame_, other->startgame_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FishLevelDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishLevelDesc_descriptor_;
  metadata.reflection = FishLevelDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FishLevelDesc::kFishLevelDescListFieldNumber;
#endif  // !_MSC_VER

Sheet_FishLevelDesc::Sheet_FishLevelDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FishLevelDesc::InitAsDefaultInstance() {
}

Sheet_FishLevelDesc::Sheet_FishLevelDesc(const Sheet_FishLevelDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FishLevelDesc::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FishLevelDesc::~Sheet_FishLevelDesc() {
  SharedDtor();
}

void Sheet_FishLevelDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FishLevelDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FishLevelDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FishLevelDesc_descriptor_;
}

const Sheet_FishLevelDesc& Sheet_FishLevelDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

Sheet_FishLevelDesc* Sheet_FishLevelDesc::default_instance_ = NULL;

Sheet_FishLevelDesc* Sheet_FishLevelDesc::New() const {
  return new Sheet_FishLevelDesc;
}

void Sheet_FishLevelDesc::Clear() {
  fishleveldesc_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FishLevelDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FishLevelDesc FishLevelDesc_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FishLevelDesc_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fishleveldesc_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_FishLevelDesc_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FishLevelDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FishLevelDesc FishLevelDesc_List = 1;
  for (int i = 0; i < this->fishleveldesc_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fishleveldesc_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FishLevelDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FishLevelDesc FishLevelDesc_List = 1;
  for (int i = 0; i < this->fishleveldesc_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fishleveldesc_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FishLevelDesc::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FishLevelDesc FishLevelDesc_List = 1;
  total_size += 1 * this->fishleveldesc_list_size();
  for (int i = 0; i < this->fishleveldesc_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fishleveldesc_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FishLevelDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FishLevelDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FishLevelDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FishLevelDesc::MergeFrom(const Sheet_FishLevelDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  fishleveldesc_list_.MergeFrom(from.fishleveldesc_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FishLevelDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FishLevelDesc::CopyFrom(const Sheet_FishLevelDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FishLevelDesc::IsInitialized() const {

  return true;
}

void Sheet_FishLevelDesc::Swap(Sheet_FishLevelDesc* other) {
  if (other != this) {
    fishleveldesc_list_.Swap(&other->fishleveldesc_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FishLevelDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FishLevelDesc_descriptor_;
  metadata.reflection = Sheet_FishLevelDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FishConfigDesc::kFishIdFieldNumber;
const int FishConfigDesc::kFishTypeFieldNumber;
const int FishConfigDesc::kBuildFishTypeFieldNumber;
const int FishConfigDesc::kRatioMinFieldNumber;
const int FishConfigDesc::kRatioMaxFieldNumber;
const int FishConfigDesc::kDoubleAwardMinRatioFieldNumber;
const int FishConfigDesc::kChildFishCountFieldNumber;
const int FishConfigDesc::kChildFishIdsFieldNumber;
const int FishConfigDesc::kDamageRadiusFieldNumber;
const int FishConfigDesc::kDamageFishIdsFieldNumber;
#endif  // !_MSC_VER

FishConfigDesc::FishConfigDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FishConfigDesc::InitAsDefaultInstance() {
}

FishConfigDesc::FishConfigDesc(const FishConfigDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FishConfigDesc::SharedCtor() {
  _cached_size_ = 0;
  fish_id_ = 0;
  fish_type_ = 0;
  build_fish_type_ = 0;
  ratio_min_ = 0;
  ratio_max_ = 0;
  double_award_min_ratio_ = 0;
  child_fish_count_ = 0;
  damage_radius_ = 0;
  damage_fish_ids_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FishConfigDesc::~FishConfigDesc() {
  SharedDtor();
}

void FishConfigDesc::SharedDtor() {
  if (damage_fish_ids_ != &::google::protobuf::internal::kEmptyString) {
    delete damage_fish_ids_;
  }
  if (this != default_instance_) {
  }
}

void FishConfigDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishConfigDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishConfigDesc_descriptor_;
}

const FishConfigDesc& FishConfigDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

FishConfigDesc* FishConfigDesc::default_instance_ = NULL;

FishConfigDesc* FishConfigDesc::New() const {
  return new FishConfigDesc;
}

void FishConfigDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fish_id_ = 0;
    fish_type_ = 0;
    build_fish_type_ = 0;
    ratio_min_ = 0;
    ratio_max_ = 0;
    double_award_min_ratio_ = 0;
    child_fish_count_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    damage_radius_ = 0;
    if (has_damage_fish_ids()) {
      if (damage_fish_ids_ != &::google::protobuf::internal::kEmptyString) {
        damage_fish_ids_->clear();
      }
    }
  }
  child_fish_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FishConfigDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fish_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fish_id_)));
          set_has_fish_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fish_type;
        break;
      }

      // optional int32 fish_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fish_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fish_type_)));
          set_has_fish_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_build_fish_type;
        break;
      }

      // optional int32 build_fish_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_build_fish_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &build_fish_type_)));
          set_has_build_fish_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ratio_min;
        break;
      }

      // optional int32 ratio_min = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ratio_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ratio_min_)));
          set_has_ratio_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ratio_max;
        break;
      }

      // optional int32 ratio_max = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ratio_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ratio_max_)));
          set_has_ratio_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_double_award_min_ratio;
        break;
      }

      // optional int32 double_award_min_ratio = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_double_award_min_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &double_award_min_ratio_)));
          set_has_double_award_min_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_child_fish_count;
        break;
      }

      // optional int32 child_fish_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_child_fish_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &child_fish_count_)));
          set_has_child_fish_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_child_fish_ids;
        break;
      }

      // repeated string child_fish_ids = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_child_fish_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_child_fish_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->child_fish_ids(this->child_fish_ids_size() - 1).data(),
            this->child_fish_ids(this->child_fish_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_child_fish_ids;
        if (input->ExpectTag(72)) goto parse_damage_radius;
        break;
      }

      // optional int32 damage_radius = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_radius_)));
          set_has_damage_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_damage_fish_ids;
        break;
      }

      // optional string damage_fish_ids = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_damage_fish_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_damage_fish_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->damage_fish_ids().data(), this->damage_fish_ids().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FishConfigDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 fish_id = 1;
  if (has_fish_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fish_id(), output);
  }

  // optional int32 fish_type = 2;
  if (has_fish_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fish_type(), output);
  }

  // optional int32 build_fish_type = 3;
  if (has_build_fish_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->build_fish_type(), output);
  }

  // optional int32 ratio_min = 4;
  if (has_ratio_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ratio_min(), output);
  }

  // optional int32 ratio_max = 5;
  if (has_ratio_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ratio_max(), output);
  }

  // optional int32 double_award_min_ratio = 6;
  if (has_double_award_min_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->double_award_min_ratio(), output);
  }

  // optional int32 child_fish_count = 7;
  if (has_child_fish_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->child_fish_count(), output);
  }

  // repeated string child_fish_ids = 8;
  for (int i = 0; i < this->child_fish_ids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->child_fish_ids(i).data(), this->child_fish_ids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->child_fish_ids(i), output);
  }

  // optional int32 damage_radius = 9;
  if (has_damage_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->damage_radius(), output);
  }

  // optional string damage_fish_ids = 10;
  if (has_damage_fish_ids()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->damage_fish_ids().data(), this->damage_fish_ids().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->damage_fish_ids(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FishConfigDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 fish_id = 1;
  if (has_fish_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fish_id(), target);
  }

  // optional int32 fish_type = 2;
  if (has_fish_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fish_type(), target);
  }

  // optional int32 build_fish_type = 3;
  if (has_build_fish_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->build_fish_type(), target);
  }

  // optional int32 ratio_min = 4;
  if (has_ratio_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ratio_min(), target);
  }

  // optional int32 ratio_max = 5;
  if (has_ratio_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ratio_max(), target);
  }

  // optional int32 double_award_min_ratio = 6;
  if (has_double_award_min_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->double_award_min_ratio(), target);
  }

  // optional int32 child_fish_count = 7;
  if (has_child_fish_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->child_fish_count(), target);
  }

  // repeated string child_fish_ids = 8;
  for (int i = 0; i < this->child_fish_ids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->child_fish_ids(i).data(), this->child_fish_ids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->child_fish_ids(i), target);
  }

  // optional int32 damage_radius = 9;
  if (has_damage_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->damage_radius(), target);
  }

  // optional string damage_fish_ids = 10;
  if (has_damage_fish_ids()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->damage_fish_ids().data(), this->damage_fish_ids().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->damage_fish_ids(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FishConfigDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 fish_id = 1;
    if (has_fish_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fish_id());
    }

    // optional int32 fish_type = 2;
    if (has_fish_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fish_type());
    }

    // optional int32 build_fish_type = 3;
    if (has_build_fish_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->build_fish_type());
    }

    // optional int32 ratio_min = 4;
    if (has_ratio_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ratio_min());
    }

    // optional int32 ratio_max = 5;
    if (has_ratio_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ratio_max());
    }

    // optional int32 double_award_min_ratio = 6;
    if (has_double_award_min_ratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->double_award_min_ratio());
    }

    // optional int32 child_fish_count = 7;
    if (has_child_fish_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->child_fish_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 damage_radius = 9;
    if (has_damage_radius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage_radius());
    }

    // optional string damage_fish_ids = 10;
    if (has_damage_fish_ids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->damage_fish_ids());
    }

  }
  // repeated string child_fish_ids = 8;
  total_size += 1 * this->child_fish_ids_size();
  for (int i = 0; i < this->child_fish_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->child_fish_ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishConfigDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FishConfigDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FishConfigDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FishConfigDesc::MergeFrom(const FishConfigDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  child_fish_ids_.MergeFrom(from.child_fish_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fish_id()) {
      set_fish_id(from.fish_id());
    }
    if (from.has_fish_type()) {
      set_fish_type(from.fish_type());
    }
    if (from.has_build_fish_type()) {
      set_build_fish_type(from.build_fish_type());
    }
    if (from.has_ratio_min()) {
      set_ratio_min(from.ratio_min());
    }
    if (from.has_ratio_max()) {
      set_ratio_max(from.ratio_max());
    }
    if (from.has_double_award_min_ratio()) {
      set_double_award_min_ratio(from.double_award_min_ratio());
    }
    if (from.has_child_fish_count()) {
      set_child_fish_count(from.child_fish_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_damage_radius()) {
      set_damage_radius(from.damage_radius());
    }
    if (from.has_damage_fish_ids()) {
      set_damage_fish_ids(from.damage_fish_ids());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FishConfigDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishConfigDesc::CopyFrom(const FishConfigDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishConfigDesc::IsInitialized() const {

  return true;
}

void FishConfigDesc::Swap(FishConfigDesc* other) {
  if (other != this) {
    std::swap(fish_id_, other->fish_id_);
    std::swap(fish_type_, other->fish_type_);
    std::swap(build_fish_type_, other->build_fish_type_);
    std::swap(ratio_min_, other->ratio_min_);
    std::swap(ratio_max_, other->ratio_max_);
    std::swap(double_award_min_ratio_, other->double_award_min_ratio_);
    std::swap(child_fish_count_, other->child_fish_count_);
    child_fish_ids_.Swap(&other->child_fish_ids_);
    std::swap(damage_radius_, other->damage_radius_);
    std::swap(damage_fish_ids_, other->damage_fish_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FishConfigDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishConfigDesc_descriptor_;
  metadata.reflection = FishConfigDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FishConfigDesc::kFishConfigDescListFieldNumber;
#endif  // !_MSC_VER

Sheet_FishConfigDesc::Sheet_FishConfigDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FishConfigDesc::InitAsDefaultInstance() {
}

Sheet_FishConfigDesc::Sheet_FishConfigDesc(const Sheet_FishConfigDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FishConfigDesc::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FishConfigDesc::~Sheet_FishConfigDesc() {
  SharedDtor();
}

void Sheet_FishConfigDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FishConfigDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FishConfigDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FishConfigDesc_descriptor_;
}

const Sheet_FishConfigDesc& Sheet_FishConfigDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

Sheet_FishConfigDesc* Sheet_FishConfigDesc::default_instance_ = NULL;

Sheet_FishConfigDesc* Sheet_FishConfigDesc::New() const {
  return new Sheet_FishConfigDesc;
}

void Sheet_FishConfigDesc::Clear() {
  fishconfigdesc_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FishConfigDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FishConfigDesc FishConfigDesc_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FishConfigDesc_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fishconfigdesc_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_FishConfigDesc_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FishConfigDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FishConfigDesc FishConfigDesc_List = 1;
  for (int i = 0; i < this->fishconfigdesc_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fishconfigdesc_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FishConfigDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FishConfigDesc FishConfigDesc_List = 1;
  for (int i = 0; i < this->fishconfigdesc_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fishconfigdesc_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FishConfigDesc::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FishConfigDesc FishConfigDesc_List = 1;
  total_size += 1 * this->fishconfigdesc_list_size();
  for (int i = 0; i < this->fishconfigdesc_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fishconfigdesc_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FishConfigDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FishConfigDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FishConfigDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FishConfigDesc::MergeFrom(const Sheet_FishConfigDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  fishconfigdesc_list_.MergeFrom(from.fishconfigdesc_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FishConfigDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FishConfigDesc::CopyFrom(const Sheet_FishConfigDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FishConfigDesc::IsInitialized() const {

  return true;
}

void Sheet_FishConfigDesc::Swap(Sheet_FishConfigDesc* other) {
  if (other != this) {
    fishconfigdesc_list_.Swap(&other->fishconfigdesc_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FishConfigDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FishConfigDesc_descriptor_;
  metadata.reflection = Sheet_FishConfigDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GunValueConfig::kIdFieldNumber;
const int GunValueConfig::kValueFieldNumber;
const int GunValueConfig::kRoomIdFieldNumber;
const int GunValueConfig::kGunIdFieldNumber;
#endif  // !_MSC_VER

GunValueConfig::GunValueConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GunValueConfig::InitAsDefaultInstance() {
}

GunValueConfig::GunValueConfig(const GunValueConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GunValueConfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  value_ = 0;
  room_id_ = 0;
  gun_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GunValueConfig::~GunValueConfig() {
  SharedDtor();
}

void GunValueConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GunValueConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GunValueConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GunValueConfig_descriptor_;
}

const GunValueConfig& GunValueConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

GunValueConfig* GunValueConfig::default_instance_ = NULL;

GunValueConfig* GunValueConfig::New() const {
  return new GunValueConfig;
}

void GunValueConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    value_ = 0;
    room_id_ = 0;
    gun_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GunValueConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gun_id;
        break;
      }

      // optional int32 gun_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gun_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gun_id_)));
          set_has_gun_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GunValueConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }

  // optional int32 gun_id = 4;
  if (has_gun_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gun_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GunValueConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }

  // optional int32 gun_id = 4;
  if (has_gun_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gun_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GunValueConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

    // optional int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional int32 gun_id = 4;
    if (has_gun_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gun_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GunValueConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GunValueConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GunValueConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GunValueConfig::MergeFrom(const GunValueConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_gun_id()) {
      set_gun_id(from.gun_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GunValueConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GunValueConfig::CopyFrom(const GunValueConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GunValueConfig::IsInitialized() const {

  return true;
}

void GunValueConfig::Swap(GunValueConfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(room_id_, other->room_id_);
    std::swap(gun_id_, other->gun_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GunValueConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GunValueConfig_descriptor_;
  metadata.reflection = GunValueConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GunValueConfig::kGunValueConfigListFieldNumber;
#endif  // !_MSC_VER

Sheet_GunValueConfig::Sheet_GunValueConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GunValueConfig::InitAsDefaultInstance() {
}

Sheet_GunValueConfig::Sheet_GunValueConfig(const Sheet_GunValueConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GunValueConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GunValueConfig::~Sheet_GunValueConfig() {
  SharedDtor();
}

void Sheet_GunValueConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GunValueConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GunValueConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GunValueConfig_descriptor_;
}

const Sheet_GunValueConfig& Sheet_GunValueConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

Sheet_GunValueConfig* Sheet_GunValueConfig::default_instance_ = NULL;

Sheet_GunValueConfig* Sheet_GunValueConfig::New() const {
  return new Sheet_GunValueConfig;
}

void Sheet_GunValueConfig::Clear() {
  gunvalueconfig_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GunValueConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.GunValueConfig GunValueConfig_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GunValueConfig_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gunvalueconfig_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_GunValueConfig_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GunValueConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.GunValueConfig GunValueConfig_List = 1;
  for (int i = 0; i < this->gunvalueconfig_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gunvalueconfig_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GunValueConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.GunValueConfig GunValueConfig_List = 1;
  for (int i = 0; i < this->gunvalueconfig_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gunvalueconfig_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GunValueConfig::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.GunValueConfig GunValueConfig_List = 1;
  total_size += 1 * this->gunvalueconfig_list_size();
  for (int i = 0; i < this->gunvalueconfig_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gunvalueconfig_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GunValueConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GunValueConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GunValueConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GunValueConfig::MergeFrom(const Sheet_GunValueConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  gunvalueconfig_list_.MergeFrom(from.gunvalueconfig_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GunValueConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GunValueConfig::CopyFrom(const Sheet_GunValueConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GunValueConfig::IsInitialized() const {

  return true;
}

void Sheet_GunValueConfig::Swap(Sheet_GunValueConfig* other) {
  if (other != this) {
    gunvalueconfig_list_.Swap(&other->gunvalueconfig_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GunValueConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GunValueConfig_descriptor_;
  metadata.reflection = Sheet_GunValueConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FishAlgoDesc::kAlgoIDFieldNumber;
const int FishAlgoDesc::kGamePlatformFieldNumber;
const int FishAlgoDesc::kAlgoNameFieldNumber;
const int FishAlgoDesc::kAlgoDescFieldNumber;
const int FishAlgoDesc::kChangeTimesFieldNumber;
const int FishAlgoDesc::kChangeLiuShuiFieldNumber;
const int FishAlgoDesc::kChang1RangeLowFieldNumber;
const int FishAlgoDesc::kChang1RangeHighFieldNumber;
const int FishAlgoDesc::kChang1Chi1FieldNumber;
const int FishAlgoDesc::kChang1Chi2FieldNumber;
const int FishAlgoDesc::kChang1Chi3FieldNumber;
const int FishAlgoDesc::kChang1Fang1FieldNumber;
const int FishAlgoDesc::kChang1Fang2FieldNumber;
const int FishAlgoDesc::kChang1Fang3FieldNumber;
const int FishAlgoDesc::kChang1RateChi1FieldNumber;
const int FishAlgoDesc::kChang1RateChi2FieldNumber;
const int FishAlgoDesc::kChang1RateChi3FieldNumber;
const int FishAlgoDesc::kChang1RatePingFieldNumber;
const int FishAlgoDesc::kChang1RateFang1FieldNumber;
const int FishAlgoDesc::kChang1RateFang2FieldNumber;
const int FishAlgoDesc::kChang1RateFang3FieldNumber;
const int FishAlgoDesc::kChang2RangeLowFieldNumber;
const int FishAlgoDesc::kChang2RangeHighFieldNumber;
const int FishAlgoDesc::kChang2Chi1FieldNumber;
const int FishAlgoDesc::kChang2Chi2FieldNumber;
const int FishAlgoDesc::kChang2Chi3FieldNumber;
const int FishAlgoDesc::kChang2Fang1FieldNumber;
const int FishAlgoDesc::kChang2Fang2FieldNumber;
const int FishAlgoDesc::kChang2Fang3FieldNumber;
const int FishAlgoDesc::kChang2RateChi1FieldNumber;
const int FishAlgoDesc::kChang2RateChi2FieldNumber;
const int FishAlgoDesc::kChang2RateChi3FieldNumber;
const int FishAlgoDesc::kChang2RatePingFieldNumber;
const int FishAlgoDesc::kChang2RateFang1FieldNumber;
const int FishAlgoDesc::kChang2RateFang2FieldNumber;
const int FishAlgoDesc::kChang2RateFang3FieldNumber;
const int FishAlgoDesc::kChang3RangeLowFieldNumber;
const int FishAlgoDesc::kChang3RangeHighFieldNumber;
const int FishAlgoDesc::kChang3Chi1FieldNumber;
const int FishAlgoDesc::kChang3Chi2FieldNumber;
const int FishAlgoDesc::kChang3Chi3FieldNumber;
const int FishAlgoDesc::kChang3Fang1FieldNumber;
const int FishAlgoDesc::kChang3Fang2FieldNumber;
const int FishAlgoDesc::kChang3Fang3FieldNumber;
const int FishAlgoDesc::kChang3RateChi1FieldNumber;
const int FishAlgoDesc::kChang3RateChi2FieldNumber;
const int FishAlgoDesc::kChang3RateChi3FieldNumber;
const int FishAlgoDesc::kChang3RatePingFieldNumber;
const int FishAlgoDesc::kChang3RateFang1FieldNumber;
const int FishAlgoDesc::kChang3RateFang2FieldNumber;
const int FishAlgoDesc::kChang3RateFang3FieldNumber;
const int FishAlgoDesc::kClearMaxValFieldNumber;
const int FishAlgoDesc::kClearFang3MulFieldNumber;
const int FishAlgoDesc::kClearChi3MulFieldNumber;
const int FishAlgoDesc::kClearInitShootFieldNumber;
const int FishAlgoDesc::kClearInitCaptureFieldNumber;
const int FishAlgoDesc::kClearInitDrawRateFieldNumber;
const int FishAlgoDesc::kClearInitPoolRateFieldNumber;
const int FishAlgoDesc::kIsDeleteFieldNumber;
const int FishAlgoDesc::kFishAlgoTypeFieldNumber;
#endif  // !_MSC_VER

FishAlgoDesc::FishAlgoDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FishAlgoDesc::InitAsDefaultInstance() {
}

FishAlgoDesc::FishAlgoDesc(const FishAlgoDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FishAlgoDesc::SharedCtor() {
  _cached_size_ = 0;
  algoid_ = 0;
  gameplatform_ = 0;
  algoname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  algodesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  changetimes_ = GOOGLE_LONGLONG(0);
  changeliushui_ = GOOGLE_LONGLONG(0);
  chang1_rangelow_ = GOOGLE_LONGLONG(0);
  chang1_rangehigh_ = GOOGLE_LONGLONG(0);
  chang1_chi1_ = GOOGLE_LONGLONG(0);
  chang1_chi2_ = GOOGLE_LONGLONG(0);
  chang1_chi3_ = GOOGLE_LONGLONG(0);
  chang1_fang1_ = GOOGLE_LONGLONG(0);
  chang1_fang2_ = GOOGLE_LONGLONG(0);
  chang1_fang3_ = GOOGLE_LONGLONG(0);
  chang1_ratechi1_ = GOOGLE_LONGLONG(0);
  chang1_ratechi2_ = GOOGLE_LONGLONG(0);
  chang1_ratechi3_ = GOOGLE_LONGLONG(0);
  chang1_rateping_ = GOOGLE_LONGLONG(0);
  chang1_ratefang1_ = GOOGLE_LONGLONG(0);
  chang1_ratefang2_ = GOOGLE_LONGLONG(0);
  chang1_ratefang3_ = GOOGLE_LONGLONG(0);
  chang2_rangelow_ = GOOGLE_LONGLONG(0);
  chang2_rangehigh_ = GOOGLE_LONGLONG(0);
  chang2_chi1_ = GOOGLE_LONGLONG(0);
  chang2_chi2_ = GOOGLE_LONGLONG(0);
  chang2_chi3_ = GOOGLE_LONGLONG(0);
  chang2_fang1_ = GOOGLE_LONGLONG(0);
  chang2_fang2_ = GOOGLE_LONGLONG(0);
  chang2_fang3_ = GOOGLE_LONGLONG(0);
  chang2_ratechi1_ = GOOGLE_LONGLONG(0);
  chang2_ratechi2_ = GOOGLE_LONGLONG(0);
  chang2_ratechi3_ = GOOGLE_LONGLONG(0);
  chang2_rateping_ = GOOGLE_LONGLONG(0);
  chang2_ratefang1_ = GOOGLE_LONGLONG(0);
  chang2_ratefang2_ = GOOGLE_LONGLONG(0);
  chang2_ratefang3_ = GOOGLE_LONGLONG(0);
  chang3_rangelow_ = GOOGLE_LONGLONG(0);
  chang3_rangehigh_ = GOOGLE_LONGLONG(0);
  chang3_chi1_ = GOOGLE_LONGLONG(0);
  chang3_chi2_ = GOOGLE_LONGLONG(0);
  chang3_chi3_ = GOOGLE_LONGLONG(0);
  chang3_fang1_ = GOOGLE_LONGLONG(0);
  chang3_fang2_ = GOOGLE_LONGLONG(0);
  chang3_fang3_ = GOOGLE_LONGLONG(0);
  chang3_ratechi1_ = GOOGLE_LONGLONG(0);
  chang3_ratechi2_ = GOOGLE_LONGLONG(0);
  chang3_ratechi3_ = GOOGLE_LONGLONG(0);
  chang3_rateping_ = GOOGLE_LONGLONG(0);
  chang3_ratefang1_ = GOOGLE_LONGLONG(0);
  chang3_ratefang2_ = GOOGLE_LONGLONG(0);
  chang3_ratefang3_ = GOOGLE_LONGLONG(0);
  clear_maxval_ = GOOGLE_LONGLONG(0);
  clear_fang3mul_ = GOOGLE_LONGLONG(0);
  clear_chi3mul_ = 0;
  clear_initshoot_ = 0;
  clear_initcapture_ = 0;
  clear_initdrawrate_ = 0;
  clear_initpoolrate_ = 0;
  is_delete_ = 0;
  fishalgotype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FishAlgoDesc::~FishAlgoDesc() {
  SharedDtor();
}

void FishAlgoDesc::SharedDtor() {
  if (algoname_ != &::google::protobuf::internal::kEmptyString) {
    delete algoname_;
  }
  if (algodesc_ != &::google::protobuf::internal::kEmptyString) {
    delete algodesc_;
  }
  if (this != default_instance_) {
  }
}

void FishAlgoDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishAlgoDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishAlgoDesc_descriptor_;
}

const FishAlgoDesc& FishAlgoDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

FishAlgoDesc* FishAlgoDesc::default_instance_ = NULL;

FishAlgoDesc* FishAlgoDesc::New() const {
  return new FishAlgoDesc;
}

void FishAlgoDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    algoid_ = 0;
    gameplatform_ = 0;
    if (has_algoname()) {
      if (algoname_ != &::google::protobuf::internal::kEmptyString) {
        algoname_->clear();
      }
    }
    if (has_algodesc()) {
      if (algodesc_ != &::google::protobuf::internal::kEmptyString) {
        algodesc_->clear();
      }
    }
    changetimes_ = GOOGLE_LONGLONG(0);
    changeliushui_ = GOOGLE_LONGLONG(0);
    chang1_rangelow_ = GOOGLE_LONGLONG(0);
    chang1_rangehigh_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    chang1_chi1_ = GOOGLE_LONGLONG(0);
    chang1_chi2_ = GOOGLE_LONGLONG(0);
    chang1_chi3_ = GOOGLE_LONGLONG(0);
    chang1_fang1_ = GOOGLE_LONGLONG(0);
    chang1_fang2_ = GOOGLE_LONGLONG(0);
    chang1_fang3_ = GOOGLE_LONGLONG(0);
    chang1_ratechi1_ = GOOGLE_LONGLONG(0);
    chang1_ratechi2_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    chang1_ratechi3_ = GOOGLE_LONGLONG(0);
    chang1_rateping_ = GOOGLE_LONGLONG(0);
    chang1_ratefang1_ = GOOGLE_LONGLONG(0);
    chang1_ratefang2_ = GOOGLE_LONGLONG(0);
    chang1_ratefang3_ = GOOGLE_LONGLONG(0);
    chang2_rangelow_ = GOOGLE_LONGLONG(0);
    chang2_rangehigh_ = GOOGLE_LONGLONG(0);
    chang2_chi1_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    chang2_chi2_ = GOOGLE_LONGLONG(0);
    chang2_chi3_ = GOOGLE_LONGLONG(0);
    chang2_fang1_ = GOOGLE_LONGLONG(0);
    chang2_fang2_ = GOOGLE_LONGLONG(0);
    chang2_fang3_ = GOOGLE_LONGLONG(0);
    chang2_ratechi1_ = GOOGLE_LONGLONG(0);
    chang2_ratechi2_ = GOOGLE_LONGLONG(0);
    chang2_ratechi3_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    chang2_rateping_ = GOOGLE_LONGLONG(0);
    chang2_ratefang1_ = GOOGLE_LONGLONG(0);
    chang2_ratefang2_ = GOOGLE_LONGLONG(0);
    chang2_ratefang3_ = GOOGLE_LONGLONG(0);
    chang3_rangelow_ = GOOGLE_LONGLONG(0);
    chang3_rangehigh_ = GOOGLE_LONGLONG(0);
    chang3_chi1_ = GOOGLE_LONGLONG(0);
    chang3_chi2_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    chang3_chi3_ = GOOGLE_LONGLONG(0);
    chang3_fang1_ = GOOGLE_LONGLONG(0);
    chang3_fang2_ = GOOGLE_LONGLONG(0);
    chang3_fang3_ = GOOGLE_LONGLONG(0);
    chang3_ratechi1_ = GOOGLE_LONGLONG(0);
    chang3_ratechi2_ = GOOGLE_LONGLONG(0);
    chang3_ratechi3_ = GOOGLE_LONGLONG(0);
    chang3_rateping_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    chang3_ratefang1_ = GOOGLE_LONGLONG(0);
    chang3_ratefang2_ = GOOGLE_LONGLONG(0);
    chang3_ratefang3_ = GOOGLE_LONGLONG(0);
    clear_maxval_ = GOOGLE_LONGLONG(0);
    clear_fang3mul_ = GOOGLE_LONGLONG(0);
    clear_chi3mul_ = 0;
    clear_initshoot_ = 0;
    clear_initcapture_ = 0;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    clear_initdrawrate_ = 0;
    clear_initpoolrate_ = 0;
    is_delete_ = 0;
    fishalgotype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FishAlgoDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 AlgoID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &algoid_)));
          set_has_algoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GamePlatform;
        break;
      }

      // optional int32 GamePlatform = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GamePlatform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameplatform_)));
          set_has_gameplatform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_AlgoName;
        break;
      }

      // optional string AlgoName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AlgoName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_algoname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->algoname().data(), this->algoname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_AlgoDesc;
        break;
      }

      // optional string AlgoDesc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AlgoDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_algodesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->algodesc().data(), this->algodesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ChangeTimes;
        break;
      }

      // optional int64 ChangeTimes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ChangeTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &changetimes_)));
          set_has_changetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ChangeLiuShui;
        break;
      }

      // optional int64 ChangeLiuShui = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ChangeLiuShui:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &changeliushui_)));
          set_has_changeliushui();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Chang1_RangeLow;
        break;
      }

      // optional int64 Chang1_RangeLow = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang1_RangeLow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang1_rangelow_)));
          set_has_chang1_rangelow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_Chang1_RangeHigh;
        break;
      }

      // optional int64 Chang1_RangeHigh = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang1_RangeHigh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang1_rangehigh_)));
          set_has_chang1_rangehigh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_Chang1_Chi1;
        break;
      }

      // optional int64 Chang1_Chi1 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang1_Chi1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang1_chi1_)));
          set_has_chang1_chi1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_Chang1_Chi2;
        break;
      }

      // optional int64 Chang1_Chi2 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang1_Chi2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang1_chi2_)));
          set_has_chang1_chi2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_Chang1_Chi3;
        break;
      }

      // optional int64 Chang1_Chi3 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang1_Chi3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang1_chi3_)));
          set_has_chang1_chi3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_Chang1_Fang1;
        break;
      }

      // optional int64 Chang1_Fang1 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang1_Fang1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang1_fang1_)));
          set_has_chang1_fang1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_Chang1_Fang2;
        break;
      }

      // optional int64 Chang1_Fang2 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang1_Fang2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang1_fang2_)));
          set_has_chang1_fang2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_Chang1_Fang3;
        break;
      }

      // optional int64 Chang1_Fang3 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang1_Fang3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang1_fang3_)));
          set_has_chang1_fang3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_Chang1_RateChi1;
        break;
      }

      // optional int64 Chang1_RateChi1 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang1_RateChi1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang1_ratechi1_)));
          set_has_chang1_ratechi1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_Chang1_RateChi2;
        break;
      }

      // optional int64 Chang1_RateChi2 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang1_RateChi2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang1_ratechi2_)));
          set_has_chang1_ratechi2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_Chang1_RateChi3;
        break;
      }

      // optional int64 Chang1_RateChi3 = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang1_RateChi3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang1_ratechi3_)));
          set_has_chang1_ratechi3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_Chang1_RatePing;
        break;
      }

      // optional int64 Chang1_RatePing = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang1_RatePing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang1_rateping_)));
          set_has_chang1_rateping();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_Chang1_RateFang1;
        break;
      }

      // optional int64 Chang1_RateFang1 = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang1_RateFang1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang1_ratefang1_)));
          set_has_chang1_ratefang1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_Chang1_RateFang2;
        break;
      }

      // optional int64 Chang1_RateFang2 = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang1_RateFang2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang1_ratefang2_)));
          set_has_chang1_ratefang2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_Chang1_RateFang3;
        break;
      }

      // optional int64 Chang1_RateFang3 = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang1_RateFang3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang1_ratefang3_)));
          set_has_chang1_ratefang3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_Chang2_RangeLow;
        break;
      }

      // optional int64 Chang2_RangeLow = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang2_RangeLow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang2_rangelow_)));
          set_has_chang2_rangelow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_Chang2_RangeHigh;
        break;
      }

      // optional int64 Chang2_RangeHigh = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang2_RangeHigh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang2_rangehigh_)));
          set_has_chang2_rangehigh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_Chang2_Chi1;
        break;
      }

      // optional int64 Chang2_Chi1 = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang2_Chi1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang2_chi1_)));
          set_has_chang2_chi1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_Chang2_Chi2;
        break;
      }

      // optional int64 Chang2_Chi2 = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang2_Chi2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang2_chi2_)));
          set_has_chang2_chi2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_Chang2_Chi3;
        break;
      }

      // optional int64 Chang2_Chi3 = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang2_Chi3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang2_chi3_)));
          set_has_chang2_chi3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_Chang2_Fang1;
        break;
      }

      // optional int64 Chang2_Fang1 = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang2_Fang1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang2_fang1_)));
          set_has_chang2_fang1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_Chang2_Fang2;
        break;
      }

      // optional int64 Chang2_Fang2 = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang2_Fang2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang2_fang2_)));
          set_has_chang2_fang2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_Chang2_Fang3;
        break;
      }

      // optional int64 Chang2_Fang3 = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang2_Fang3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang2_fang3_)));
          set_has_chang2_fang3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_Chang2_RateChi1;
        break;
      }

      // optional int64 Chang2_RateChi1 = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang2_RateChi1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang2_ratechi1_)));
          set_has_chang2_ratechi1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_Chang2_RateChi2;
        break;
      }

      // optional int64 Chang2_RateChi2 = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang2_RateChi2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang2_ratechi2_)));
          set_has_chang2_ratechi2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_Chang2_RateChi3;
        break;
      }

      // optional int64 Chang2_RateChi3 = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang2_RateChi3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang2_ratechi3_)));
          set_has_chang2_ratechi3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_Chang2_RatePing;
        break;
      }

      // optional int64 Chang2_RatePing = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang2_RatePing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang2_rateping_)));
          set_has_chang2_rateping();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_Chang2_RateFang1;
        break;
      }

      // optional int64 Chang2_RateFang1 = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang2_RateFang1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang2_ratefang1_)));
          set_has_chang2_ratefang1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_Chang2_RateFang2;
        break;
      }

      // optional int64 Chang2_RateFang2 = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang2_RateFang2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang2_ratefang2_)));
          set_has_chang2_ratefang2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_Chang2_RateFang3;
        break;
      }

      // optional int64 Chang2_RateFang3 = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang2_RateFang3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang2_ratefang3_)));
          set_has_chang2_ratefang3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_Chang3_RangeLow;
        break;
      }

      // optional int64 Chang3_RangeLow = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang3_RangeLow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang3_rangelow_)));
          set_has_chang3_rangelow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_Chang3_RangeHigh;
        break;
      }

      // optional int64 Chang3_RangeHigh = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang3_RangeHigh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang3_rangehigh_)));
          set_has_chang3_rangehigh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_Chang3_Chi1;
        break;
      }

      // optional int64 Chang3_Chi1 = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang3_Chi1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang3_chi1_)));
          set_has_chang3_chi1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_Chang3_Chi2;
        break;
      }

      // optional int64 Chang3_Chi2 = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang3_Chi2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang3_chi2_)));
          set_has_chang3_chi2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_Chang3_Chi3;
        break;
      }

      // optional int64 Chang3_Chi3 = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang3_Chi3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang3_chi3_)));
          set_has_chang3_chi3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_Chang3_Fang1;
        break;
      }

      // optional int64 Chang3_Fang1 = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang3_Fang1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang3_fang1_)));
          set_has_chang3_fang1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_Chang3_Fang2;
        break;
      }

      // optional int64 Chang3_Fang2 = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang3_Fang2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang3_fang2_)));
          set_has_chang3_fang2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_Chang3_Fang3;
        break;
      }

      // optional int64 Chang3_Fang3 = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang3_Fang3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang3_fang3_)));
          set_has_chang3_fang3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_Chang3_RateChi1;
        break;
      }

      // optional int64 Chang3_RateChi1 = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang3_RateChi1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang3_ratechi1_)));
          set_has_chang3_ratechi1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_Chang3_RateChi2;
        break;
      }

      // optional int64 Chang3_RateChi2 = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang3_RateChi2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang3_ratechi2_)));
          set_has_chang3_ratechi2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_Chang3_RateChi3;
        break;
      }

      // optional int64 Chang3_RateChi3 = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang3_RateChi3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang3_ratechi3_)));
          set_has_chang3_ratechi3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_Chang3_RatePing;
        break;
      }

      // optional int64 Chang3_RatePing = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang3_RatePing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang3_rateping_)));
          set_has_chang3_rateping();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_Chang3_RateFang1;
        break;
      }

      // optional int64 Chang3_RateFang1 = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang3_RateFang1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang3_ratefang1_)));
          set_has_chang3_ratefang1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_Chang3_RateFang2;
        break;
      }

      // optional int64 Chang3_RateFang2 = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang3_RateFang2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang3_ratefang2_)));
          set_has_chang3_ratefang2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_Chang3_RateFang3;
        break;
      }

      // optional int64 Chang3_RateFang3 = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Chang3_RateFang3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chang3_ratefang3_)));
          set_has_chang3_ratefang3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_Clear_MaxVal;
        break;
      }

      // optional int64 Clear_MaxVal = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Clear_MaxVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &clear_maxval_)));
          set_has_clear_maxval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_Clear_Fang3Mul;
        break;
      }

      // optional int64 Clear_Fang3Mul = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Clear_Fang3Mul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &clear_fang3mul_)));
          set_has_clear_fang3mul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_Clear_Chi3Mul;
        break;
      }

      // optional int32 Clear_Chi3Mul = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Clear_Chi3Mul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clear_chi3mul_)));
          set_has_clear_chi3mul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_Clear_InitShoot;
        break;
      }

      // optional int32 Clear_InitShoot = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Clear_InitShoot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clear_initshoot_)));
          set_has_clear_initshoot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_Clear_InitCapture;
        break;
      }

      // optional int32 Clear_InitCapture = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Clear_InitCapture:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clear_initcapture_)));
          set_has_clear_initcapture();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(456)) goto parse_Clear_InitDrawRate;
        break;
      }

      // optional int32 Clear_InitDrawRate = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Clear_InitDrawRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clear_initdrawrate_)));
          set_has_clear_initdrawrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(464)) goto parse_Clear_InitPoolRate;
        break;
      }

      // optional int32 Clear_InitPoolRate = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Clear_InitPoolRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clear_initpoolrate_)));
          set_has_clear_initpoolrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_Is_delete;
        break;
      }

      // optional int32 Is_delete = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Is_delete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_delete_)));
          set_has_is_delete();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_FishAlgoType;
        break;
      }

      // optional int32 FishAlgoType = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FishAlgoType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fishalgotype_)));
          set_has_fishalgotype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FishAlgoDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 AlgoID = 1;
  if (has_algoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->algoid(), output);
  }

  // optional int32 GamePlatform = 2;
  if (has_gameplatform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gameplatform(), output);
  }

  // optional string AlgoName = 3;
  if (has_algoname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->algoname().data(), this->algoname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->algoname(), output);
  }

  // optional string AlgoDesc = 4;
  if (has_algodesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->algodesc().data(), this->algodesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->algodesc(), output);
  }

  // optional int64 ChangeTimes = 5;
  if (has_changetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->changetimes(), output);
  }

  // optional int64 ChangeLiuShui = 6;
  if (has_changeliushui()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->changeliushui(), output);
  }

  // optional int64 Chang1_RangeLow = 7;
  if (has_chang1_rangelow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->chang1_rangelow(), output);
  }

  // optional int64 Chang1_RangeHigh = 8;
  if (has_chang1_rangehigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->chang1_rangehigh(), output);
  }

  // optional int64 Chang1_Chi1 = 9;
  if (has_chang1_chi1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->chang1_chi1(), output);
  }

  // optional int64 Chang1_Chi2 = 10;
  if (has_chang1_chi2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->chang1_chi2(), output);
  }

  // optional int64 Chang1_Chi3 = 11;
  if (has_chang1_chi3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->chang1_chi3(), output);
  }

  // optional int64 Chang1_Fang1 = 12;
  if (has_chang1_fang1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->chang1_fang1(), output);
  }

  // optional int64 Chang1_Fang2 = 13;
  if (has_chang1_fang2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->chang1_fang2(), output);
  }

  // optional int64 Chang1_Fang3 = 14;
  if (has_chang1_fang3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->chang1_fang3(), output);
  }

  // optional int64 Chang1_RateChi1 = 15;
  if (has_chang1_ratechi1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->chang1_ratechi1(), output);
  }

  // optional int64 Chang1_RateChi2 = 16;
  if (has_chang1_ratechi2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->chang1_ratechi2(), output);
  }

  // optional int64 Chang1_RateChi3 = 17;
  if (has_chang1_ratechi3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->chang1_ratechi3(), output);
  }

  // optional int64 Chang1_RatePing = 18;
  if (has_chang1_rateping()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->chang1_rateping(), output);
  }

  // optional int64 Chang1_RateFang1 = 19;
  if (has_chang1_ratefang1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->chang1_ratefang1(), output);
  }

  // optional int64 Chang1_RateFang2 = 20;
  if (has_chang1_ratefang2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->chang1_ratefang2(), output);
  }

  // optional int64 Chang1_RateFang3 = 21;
  if (has_chang1_ratefang3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->chang1_ratefang3(), output);
  }

  // optional int64 Chang2_RangeLow = 22;
  if (has_chang2_rangelow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->chang2_rangelow(), output);
  }

  // optional int64 Chang2_RangeHigh = 23;
  if (has_chang2_rangehigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->chang2_rangehigh(), output);
  }

  // optional int64 Chang2_Chi1 = 24;
  if (has_chang2_chi1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->chang2_chi1(), output);
  }

  // optional int64 Chang2_Chi2 = 25;
  if (has_chang2_chi2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->chang2_chi2(), output);
  }

  // optional int64 Chang2_Chi3 = 26;
  if (has_chang2_chi3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(26, this->chang2_chi3(), output);
  }

  // optional int64 Chang2_Fang1 = 27;
  if (has_chang2_fang1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->chang2_fang1(), output);
  }

  // optional int64 Chang2_Fang2 = 28;
  if (has_chang2_fang2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(28, this->chang2_fang2(), output);
  }

  // optional int64 Chang2_Fang3 = 29;
  if (has_chang2_fang3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(29, this->chang2_fang3(), output);
  }

  // optional int64 Chang2_RateChi1 = 30;
  if (has_chang2_ratechi1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(30, this->chang2_ratechi1(), output);
  }

  // optional int64 Chang2_RateChi2 = 31;
  if (has_chang2_ratechi2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(31, this->chang2_ratechi2(), output);
  }

  // optional int64 Chang2_RateChi3 = 32;
  if (has_chang2_ratechi3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(32, this->chang2_ratechi3(), output);
  }

  // optional int64 Chang2_RatePing = 33;
  if (has_chang2_rateping()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(33, this->chang2_rateping(), output);
  }

  // optional int64 Chang2_RateFang1 = 34;
  if (has_chang2_ratefang1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(34, this->chang2_ratefang1(), output);
  }

  // optional int64 Chang2_RateFang2 = 35;
  if (has_chang2_ratefang2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(35, this->chang2_ratefang2(), output);
  }

  // optional int64 Chang2_RateFang3 = 36;
  if (has_chang2_ratefang3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(36, this->chang2_ratefang3(), output);
  }

  // optional int64 Chang3_RangeLow = 37;
  if (has_chang3_rangelow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(37, this->chang3_rangelow(), output);
  }

  // optional int64 Chang3_RangeHigh = 38;
  if (has_chang3_rangehigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(38, this->chang3_rangehigh(), output);
  }

  // optional int64 Chang3_Chi1 = 39;
  if (has_chang3_chi1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(39, this->chang3_chi1(), output);
  }

  // optional int64 Chang3_Chi2 = 40;
  if (has_chang3_chi2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(40, this->chang3_chi2(), output);
  }

  // optional int64 Chang3_Chi3 = 41;
  if (has_chang3_chi3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(41, this->chang3_chi3(), output);
  }

  // optional int64 Chang3_Fang1 = 42;
  if (has_chang3_fang1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(42, this->chang3_fang1(), output);
  }

  // optional int64 Chang3_Fang2 = 43;
  if (has_chang3_fang2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(43, this->chang3_fang2(), output);
  }

  // optional int64 Chang3_Fang3 = 44;
  if (has_chang3_fang3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(44, this->chang3_fang3(), output);
  }

  // optional int64 Chang3_RateChi1 = 45;
  if (has_chang3_ratechi1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(45, this->chang3_ratechi1(), output);
  }

  // optional int64 Chang3_RateChi2 = 46;
  if (has_chang3_ratechi2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(46, this->chang3_ratechi2(), output);
  }

  // optional int64 Chang3_RateChi3 = 47;
  if (has_chang3_ratechi3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(47, this->chang3_ratechi3(), output);
  }

  // optional int64 Chang3_RatePing = 48;
  if (has_chang3_rateping()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(48, this->chang3_rateping(), output);
  }

  // optional int64 Chang3_RateFang1 = 49;
  if (has_chang3_ratefang1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(49, this->chang3_ratefang1(), output);
  }

  // optional int64 Chang3_RateFang2 = 50;
  if (has_chang3_ratefang2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(50, this->chang3_ratefang2(), output);
  }

  // optional int64 Chang3_RateFang3 = 51;
  if (has_chang3_ratefang3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(51, this->chang3_ratefang3(), output);
  }

  // optional int64 Clear_MaxVal = 52;
  if (has_clear_maxval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(52, this->clear_maxval(), output);
  }

  // optional int64 Clear_Fang3Mul = 53;
  if (has_clear_fang3mul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(53, this->clear_fang3mul(), output);
  }

  // optional int32 Clear_Chi3Mul = 54;
  if (has_clear_chi3mul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(54, this->clear_chi3mul(), output);
  }

  // optional int32 Clear_InitShoot = 55;
  if (has_clear_initshoot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(55, this->clear_initshoot(), output);
  }

  // optional int32 Clear_InitCapture = 56;
  if (has_clear_initcapture()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->clear_initcapture(), output);
  }

  // optional int32 Clear_InitDrawRate = 57;
  if (has_clear_initdrawrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(57, this->clear_initdrawrate(), output);
  }

  // optional int32 Clear_InitPoolRate = 58;
  if (has_clear_initpoolrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(58, this->clear_initpoolrate(), output);
  }

  // optional int32 Is_delete = 59;
  if (has_is_delete()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(59, this->is_delete(), output);
  }

  // optional int32 FishAlgoType = 60;
  if (has_fishalgotype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->fishalgotype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FishAlgoDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 AlgoID = 1;
  if (has_algoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->algoid(), target);
  }

  // optional int32 GamePlatform = 2;
  if (has_gameplatform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gameplatform(), target);
  }

  // optional string AlgoName = 3;
  if (has_algoname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->algoname().data(), this->algoname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->algoname(), target);
  }

  // optional string AlgoDesc = 4;
  if (has_algodesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->algodesc().data(), this->algodesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->algodesc(), target);
  }

  // optional int64 ChangeTimes = 5;
  if (has_changetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->changetimes(), target);
  }

  // optional int64 ChangeLiuShui = 6;
  if (has_changeliushui()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->changeliushui(), target);
  }

  // optional int64 Chang1_RangeLow = 7;
  if (has_chang1_rangelow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->chang1_rangelow(), target);
  }

  // optional int64 Chang1_RangeHigh = 8;
  if (has_chang1_rangehigh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->chang1_rangehigh(), target);
  }

  // optional int64 Chang1_Chi1 = 9;
  if (has_chang1_chi1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->chang1_chi1(), target);
  }

  // optional int64 Chang1_Chi2 = 10;
  if (has_chang1_chi2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->chang1_chi2(), target);
  }

  // optional int64 Chang1_Chi3 = 11;
  if (has_chang1_chi3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->chang1_chi3(), target);
  }

  // optional int64 Chang1_Fang1 = 12;
  if (has_chang1_fang1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->chang1_fang1(), target);
  }

  // optional int64 Chang1_Fang2 = 13;
  if (has_chang1_fang2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->chang1_fang2(), target);
  }

  // optional int64 Chang1_Fang3 = 14;
  if (has_chang1_fang3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->chang1_fang3(), target);
  }

  // optional int64 Chang1_RateChi1 = 15;
  if (has_chang1_ratechi1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->chang1_ratechi1(), target);
  }

  // optional int64 Chang1_RateChi2 = 16;
  if (has_chang1_ratechi2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->chang1_ratechi2(), target);
  }

  // optional int64 Chang1_RateChi3 = 17;
  if (has_chang1_ratechi3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->chang1_ratechi3(), target);
  }

  // optional int64 Chang1_RatePing = 18;
  if (has_chang1_rateping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->chang1_rateping(), target);
  }

  // optional int64 Chang1_RateFang1 = 19;
  if (has_chang1_ratefang1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->chang1_ratefang1(), target);
  }

  // optional int64 Chang1_RateFang2 = 20;
  if (has_chang1_ratefang2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->chang1_ratefang2(), target);
  }

  // optional int64 Chang1_RateFang3 = 21;
  if (has_chang1_ratefang3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->chang1_ratefang3(), target);
  }

  // optional int64 Chang2_RangeLow = 22;
  if (has_chang2_rangelow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->chang2_rangelow(), target);
  }

  // optional int64 Chang2_RangeHigh = 23;
  if (has_chang2_rangehigh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->chang2_rangehigh(), target);
  }

  // optional int64 Chang2_Chi1 = 24;
  if (has_chang2_chi1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->chang2_chi1(), target);
  }

  // optional int64 Chang2_Chi2 = 25;
  if (has_chang2_chi2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->chang2_chi2(), target);
  }

  // optional int64 Chang2_Chi3 = 26;
  if (has_chang2_chi3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(26, this->chang2_chi3(), target);
  }

  // optional int64 Chang2_Fang1 = 27;
  if (has_chang2_fang1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(27, this->chang2_fang1(), target);
  }

  // optional int64 Chang2_Fang2 = 28;
  if (has_chang2_fang2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(28, this->chang2_fang2(), target);
  }

  // optional int64 Chang2_Fang3 = 29;
  if (has_chang2_fang3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(29, this->chang2_fang3(), target);
  }

  // optional int64 Chang2_RateChi1 = 30;
  if (has_chang2_ratechi1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(30, this->chang2_ratechi1(), target);
  }

  // optional int64 Chang2_RateChi2 = 31;
  if (has_chang2_ratechi2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(31, this->chang2_ratechi2(), target);
  }

  // optional int64 Chang2_RateChi3 = 32;
  if (has_chang2_ratechi3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(32, this->chang2_ratechi3(), target);
  }

  // optional int64 Chang2_RatePing = 33;
  if (has_chang2_rateping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(33, this->chang2_rateping(), target);
  }

  // optional int64 Chang2_RateFang1 = 34;
  if (has_chang2_ratefang1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(34, this->chang2_ratefang1(), target);
  }

  // optional int64 Chang2_RateFang2 = 35;
  if (has_chang2_ratefang2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(35, this->chang2_ratefang2(), target);
  }

  // optional int64 Chang2_RateFang3 = 36;
  if (has_chang2_ratefang3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(36, this->chang2_ratefang3(), target);
  }

  // optional int64 Chang3_RangeLow = 37;
  if (has_chang3_rangelow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(37, this->chang3_rangelow(), target);
  }

  // optional int64 Chang3_RangeHigh = 38;
  if (has_chang3_rangehigh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(38, this->chang3_rangehigh(), target);
  }

  // optional int64 Chang3_Chi1 = 39;
  if (has_chang3_chi1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(39, this->chang3_chi1(), target);
  }

  // optional int64 Chang3_Chi2 = 40;
  if (has_chang3_chi2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(40, this->chang3_chi2(), target);
  }

  // optional int64 Chang3_Chi3 = 41;
  if (has_chang3_chi3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(41, this->chang3_chi3(), target);
  }

  // optional int64 Chang3_Fang1 = 42;
  if (has_chang3_fang1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(42, this->chang3_fang1(), target);
  }

  // optional int64 Chang3_Fang2 = 43;
  if (has_chang3_fang2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(43, this->chang3_fang2(), target);
  }

  // optional int64 Chang3_Fang3 = 44;
  if (has_chang3_fang3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(44, this->chang3_fang3(), target);
  }

  // optional int64 Chang3_RateChi1 = 45;
  if (has_chang3_ratechi1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(45, this->chang3_ratechi1(), target);
  }

  // optional int64 Chang3_RateChi2 = 46;
  if (has_chang3_ratechi2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(46, this->chang3_ratechi2(), target);
  }

  // optional int64 Chang3_RateChi3 = 47;
  if (has_chang3_ratechi3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(47, this->chang3_ratechi3(), target);
  }

  // optional int64 Chang3_RatePing = 48;
  if (has_chang3_rateping()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(48, this->chang3_rateping(), target);
  }

  // optional int64 Chang3_RateFang1 = 49;
  if (has_chang3_ratefang1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(49, this->chang3_ratefang1(), target);
  }

  // optional int64 Chang3_RateFang2 = 50;
  if (has_chang3_ratefang2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(50, this->chang3_ratefang2(), target);
  }

  // optional int64 Chang3_RateFang3 = 51;
  if (has_chang3_ratefang3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(51, this->chang3_ratefang3(), target);
  }

  // optional int64 Clear_MaxVal = 52;
  if (has_clear_maxval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(52, this->clear_maxval(), target);
  }

  // optional int64 Clear_Fang3Mul = 53;
  if (has_clear_fang3mul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(53, this->clear_fang3mul(), target);
  }

  // optional int32 Clear_Chi3Mul = 54;
  if (has_clear_chi3mul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(54, this->clear_chi3mul(), target);
  }

  // optional int32 Clear_InitShoot = 55;
  if (has_clear_initshoot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(55, this->clear_initshoot(), target);
  }

  // optional int32 Clear_InitCapture = 56;
  if (has_clear_initcapture()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->clear_initcapture(), target);
  }

  // optional int32 Clear_InitDrawRate = 57;
  if (has_clear_initdrawrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(57, this->clear_initdrawrate(), target);
  }

  // optional int32 Clear_InitPoolRate = 58;
  if (has_clear_initpoolrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(58, this->clear_initpoolrate(), target);
  }

  // optional int32 Is_delete = 59;
  if (has_is_delete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(59, this->is_delete(), target);
  }

  // optional int32 FishAlgoType = 60;
  if (has_fishalgotype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->fishalgotype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FishAlgoDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 AlgoID = 1;
    if (has_algoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->algoid());
    }

    // optional int32 GamePlatform = 2;
    if (has_gameplatform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameplatform());
    }

    // optional string AlgoName = 3;
    if (has_algoname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->algoname());
    }

    // optional string AlgoDesc = 4;
    if (has_algodesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->algodesc());
    }

    // optional int64 ChangeTimes = 5;
    if (has_changetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->changetimes());
    }

    // optional int64 ChangeLiuShui = 6;
    if (has_changeliushui()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->changeliushui());
    }

    // optional int64 Chang1_RangeLow = 7;
    if (has_chang1_rangelow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang1_rangelow());
    }

    // optional int64 Chang1_RangeHigh = 8;
    if (has_chang1_rangehigh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang1_rangehigh());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 Chang1_Chi1 = 9;
    if (has_chang1_chi1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang1_chi1());
    }

    // optional int64 Chang1_Chi2 = 10;
    if (has_chang1_chi2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang1_chi2());
    }

    // optional int64 Chang1_Chi3 = 11;
    if (has_chang1_chi3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang1_chi3());
    }

    // optional int64 Chang1_Fang1 = 12;
    if (has_chang1_fang1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang1_fang1());
    }

    // optional int64 Chang1_Fang2 = 13;
    if (has_chang1_fang2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang1_fang2());
    }

    // optional int64 Chang1_Fang3 = 14;
    if (has_chang1_fang3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang1_fang3());
    }

    // optional int64 Chang1_RateChi1 = 15;
    if (has_chang1_ratechi1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang1_ratechi1());
    }

    // optional int64 Chang1_RateChi2 = 16;
    if (has_chang1_ratechi2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang1_ratechi2());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int64 Chang1_RateChi3 = 17;
    if (has_chang1_ratechi3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang1_ratechi3());
    }

    // optional int64 Chang1_RatePing = 18;
    if (has_chang1_rateping()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang1_rateping());
    }

    // optional int64 Chang1_RateFang1 = 19;
    if (has_chang1_ratefang1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang1_ratefang1());
    }

    // optional int64 Chang1_RateFang2 = 20;
    if (has_chang1_ratefang2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang1_ratefang2());
    }

    // optional int64 Chang1_RateFang3 = 21;
    if (has_chang1_ratefang3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang1_ratefang3());
    }

    // optional int64 Chang2_RangeLow = 22;
    if (has_chang2_rangelow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang2_rangelow());
    }

    // optional int64 Chang2_RangeHigh = 23;
    if (has_chang2_rangehigh()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang2_rangehigh());
    }

    // optional int64 Chang2_Chi1 = 24;
    if (has_chang2_chi1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang2_chi1());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int64 Chang2_Chi2 = 25;
    if (has_chang2_chi2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang2_chi2());
    }

    // optional int64 Chang2_Chi3 = 26;
    if (has_chang2_chi3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang2_chi3());
    }

    // optional int64 Chang2_Fang1 = 27;
    if (has_chang2_fang1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang2_fang1());
    }

    // optional int64 Chang2_Fang2 = 28;
    if (has_chang2_fang2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang2_fang2());
    }

    // optional int64 Chang2_Fang3 = 29;
    if (has_chang2_fang3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang2_fang3());
    }

    // optional int64 Chang2_RateChi1 = 30;
    if (has_chang2_ratechi1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang2_ratechi1());
    }

    // optional int64 Chang2_RateChi2 = 31;
    if (has_chang2_ratechi2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang2_ratechi2());
    }

    // optional int64 Chang2_RateChi3 = 32;
    if (has_chang2_ratechi3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang2_ratechi3());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int64 Chang2_RatePing = 33;
    if (has_chang2_rateping()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang2_rateping());
    }

    // optional int64 Chang2_RateFang1 = 34;
    if (has_chang2_ratefang1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang2_ratefang1());
    }

    // optional int64 Chang2_RateFang2 = 35;
    if (has_chang2_ratefang2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang2_ratefang2());
    }

    // optional int64 Chang2_RateFang3 = 36;
    if (has_chang2_ratefang3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang2_ratefang3());
    }

    // optional int64 Chang3_RangeLow = 37;
    if (has_chang3_rangelow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang3_rangelow());
    }

    // optional int64 Chang3_RangeHigh = 38;
    if (has_chang3_rangehigh()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang3_rangehigh());
    }

    // optional int64 Chang3_Chi1 = 39;
    if (has_chang3_chi1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang3_chi1());
    }

    // optional int64 Chang3_Chi2 = 40;
    if (has_chang3_chi2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang3_chi2());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int64 Chang3_Chi3 = 41;
    if (has_chang3_chi3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang3_chi3());
    }

    // optional int64 Chang3_Fang1 = 42;
    if (has_chang3_fang1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang3_fang1());
    }

    // optional int64 Chang3_Fang2 = 43;
    if (has_chang3_fang2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang3_fang2());
    }

    // optional int64 Chang3_Fang3 = 44;
    if (has_chang3_fang3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang3_fang3());
    }

    // optional int64 Chang3_RateChi1 = 45;
    if (has_chang3_ratechi1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang3_ratechi1());
    }

    // optional int64 Chang3_RateChi2 = 46;
    if (has_chang3_ratechi2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang3_ratechi2());
    }

    // optional int64 Chang3_RateChi3 = 47;
    if (has_chang3_ratechi3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang3_ratechi3());
    }

    // optional int64 Chang3_RatePing = 48;
    if (has_chang3_rateping()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang3_rateping());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional int64 Chang3_RateFang1 = 49;
    if (has_chang3_ratefang1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang3_ratefang1());
    }

    // optional int64 Chang3_RateFang2 = 50;
    if (has_chang3_ratefang2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang3_ratefang2());
    }

    // optional int64 Chang3_RateFang3 = 51;
    if (has_chang3_ratefang3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chang3_ratefang3());
    }

    // optional int64 Clear_MaxVal = 52;
    if (has_clear_maxval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->clear_maxval());
    }

    // optional int64 Clear_Fang3Mul = 53;
    if (has_clear_fang3mul()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->clear_fang3mul());
    }

    // optional int32 Clear_Chi3Mul = 54;
    if (has_clear_chi3mul()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clear_chi3mul());
    }

    // optional int32 Clear_InitShoot = 55;
    if (has_clear_initshoot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clear_initshoot());
    }

    // optional int32 Clear_InitCapture = 56;
    if (has_clear_initcapture()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clear_initcapture());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional int32 Clear_InitDrawRate = 57;
    if (has_clear_initdrawrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clear_initdrawrate());
    }

    // optional int32 Clear_InitPoolRate = 58;
    if (has_clear_initpoolrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clear_initpoolrate());
    }

    // optional int32 Is_delete = 59;
    if (has_is_delete()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_delete());
    }

    // optional int32 FishAlgoType = 60;
    if (has_fishalgotype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fishalgotype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishAlgoDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FishAlgoDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FishAlgoDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FishAlgoDesc::MergeFrom(const FishAlgoDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_algoid()) {
      set_algoid(from.algoid());
    }
    if (from.has_gameplatform()) {
      set_gameplatform(from.gameplatform());
    }
    if (from.has_algoname()) {
      set_algoname(from.algoname());
    }
    if (from.has_algodesc()) {
      set_algodesc(from.algodesc());
    }
    if (from.has_changetimes()) {
      set_changetimes(from.changetimes());
    }
    if (from.has_changeliushui()) {
      set_changeliushui(from.changeliushui());
    }
    if (from.has_chang1_rangelow()) {
      set_chang1_rangelow(from.chang1_rangelow());
    }
    if (from.has_chang1_rangehigh()) {
      set_chang1_rangehigh(from.chang1_rangehigh());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_chang1_chi1()) {
      set_chang1_chi1(from.chang1_chi1());
    }
    if (from.has_chang1_chi2()) {
      set_chang1_chi2(from.chang1_chi2());
    }
    if (from.has_chang1_chi3()) {
      set_chang1_chi3(from.chang1_chi3());
    }
    if (from.has_chang1_fang1()) {
      set_chang1_fang1(from.chang1_fang1());
    }
    if (from.has_chang1_fang2()) {
      set_chang1_fang2(from.chang1_fang2());
    }
    if (from.has_chang1_fang3()) {
      set_chang1_fang3(from.chang1_fang3());
    }
    if (from.has_chang1_ratechi1()) {
      set_chang1_ratechi1(from.chang1_ratechi1());
    }
    if (from.has_chang1_ratechi2()) {
      set_chang1_ratechi2(from.chang1_ratechi2());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_chang1_ratechi3()) {
      set_chang1_ratechi3(from.chang1_ratechi3());
    }
    if (from.has_chang1_rateping()) {
      set_chang1_rateping(from.chang1_rateping());
    }
    if (from.has_chang1_ratefang1()) {
      set_chang1_ratefang1(from.chang1_ratefang1());
    }
    if (from.has_chang1_ratefang2()) {
      set_chang1_ratefang2(from.chang1_ratefang2());
    }
    if (from.has_chang1_ratefang3()) {
      set_chang1_ratefang3(from.chang1_ratefang3());
    }
    if (from.has_chang2_rangelow()) {
      set_chang2_rangelow(from.chang2_rangelow());
    }
    if (from.has_chang2_rangehigh()) {
      set_chang2_rangehigh(from.chang2_rangehigh());
    }
    if (from.has_chang2_chi1()) {
      set_chang2_chi1(from.chang2_chi1());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_chang2_chi2()) {
      set_chang2_chi2(from.chang2_chi2());
    }
    if (from.has_chang2_chi3()) {
      set_chang2_chi3(from.chang2_chi3());
    }
    if (from.has_chang2_fang1()) {
      set_chang2_fang1(from.chang2_fang1());
    }
    if (from.has_chang2_fang2()) {
      set_chang2_fang2(from.chang2_fang2());
    }
    if (from.has_chang2_fang3()) {
      set_chang2_fang3(from.chang2_fang3());
    }
    if (from.has_chang2_ratechi1()) {
      set_chang2_ratechi1(from.chang2_ratechi1());
    }
    if (from.has_chang2_ratechi2()) {
      set_chang2_ratechi2(from.chang2_ratechi2());
    }
    if (from.has_chang2_ratechi3()) {
      set_chang2_ratechi3(from.chang2_ratechi3());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_chang2_rateping()) {
      set_chang2_rateping(from.chang2_rateping());
    }
    if (from.has_chang2_ratefang1()) {
      set_chang2_ratefang1(from.chang2_ratefang1());
    }
    if (from.has_chang2_ratefang2()) {
      set_chang2_ratefang2(from.chang2_ratefang2());
    }
    if (from.has_chang2_ratefang3()) {
      set_chang2_ratefang3(from.chang2_ratefang3());
    }
    if (from.has_chang3_rangelow()) {
      set_chang3_rangelow(from.chang3_rangelow());
    }
    if (from.has_chang3_rangehigh()) {
      set_chang3_rangehigh(from.chang3_rangehigh());
    }
    if (from.has_chang3_chi1()) {
      set_chang3_chi1(from.chang3_chi1());
    }
    if (from.has_chang3_chi2()) {
      set_chang3_chi2(from.chang3_chi2());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_chang3_chi3()) {
      set_chang3_chi3(from.chang3_chi3());
    }
    if (from.has_chang3_fang1()) {
      set_chang3_fang1(from.chang3_fang1());
    }
    if (from.has_chang3_fang2()) {
      set_chang3_fang2(from.chang3_fang2());
    }
    if (from.has_chang3_fang3()) {
      set_chang3_fang3(from.chang3_fang3());
    }
    if (from.has_chang3_ratechi1()) {
      set_chang3_ratechi1(from.chang3_ratechi1());
    }
    if (from.has_chang3_ratechi2()) {
      set_chang3_ratechi2(from.chang3_ratechi2());
    }
    if (from.has_chang3_ratechi3()) {
      set_chang3_ratechi3(from.chang3_ratechi3());
    }
    if (from.has_chang3_rateping()) {
      set_chang3_rateping(from.chang3_rateping());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_chang3_ratefang1()) {
      set_chang3_ratefang1(from.chang3_ratefang1());
    }
    if (from.has_chang3_ratefang2()) {
      set_chang3_ratefang2(from.chang3_ratefang2());
    }
    if (from.has_chang3_ratefang3()) {
      set_chang3_ratefang3(from.chang3_ratefang3());
    }
    if (from.has_clear_maxval()) {
      set_clear_maxval(from.clear_maxval());
    }
    if (from.has_clear_fang3mul()) {
      set_clear_fang3mul(from.clear_fang3mul());
    }
    if (from.has_clear_chi3mul()) {
      set_clear_chi3mul(from.clear_chi3mul());
    }
    if (from.has_clear_initshoot()) {
      set_clear_initshoot(from.clear_initshoot());
    }
    if (from.has_clear_initcapture()) {
      set_clear_initcapture(from.clear_initcapture());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_clear_initdrawrate()) {
      set_clear_initdrawrate(from.clear_initdrawrate());
    }
    if (from.has_clear_initpoolrate()) {
      set_clear_initpoolrate(from.clear_initpoolrate());
    }
    if (from.has_is_delete()) {
      set_is_delete(from.is_delete());
    }
    if (from.has_fishalgotype()) {
      set_fishalgotype(from.fishalgotype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FishAlgoDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishAlgoDesc::CopyFrom(const FishAlgoDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishAlgoDesc::IsInitialized() const {

  return true;
}

void FishAlgoDesc::Swap(FishAlgoDesc* other) {
  if (other != this) {
    std::swap(algoid_, other->algoid_);
    std::swap(gameplatform_, other->gameplatform_);
    std::swap(algoname_, other->algoname_);
    std::swap(algodesc_, other->algodesc_);
    std::swap(changetimes_, other->changetimes_);
    std::swap(changeliushui_, other->changeliushui_);
    std::swap(chang1_rangelow_, other->chang1_rangelow_);
    std::swap(chang1_rangehigh_, other->chang1_rangehigh_);
    std::swap(chang1_chi1_, other->chang1_chi1_);
    std::swap(chang1_chi2_, other->chang1_chi2_);
    std::swap(chang1_chi3_, other->chang1_chi3_);
    std::swap(chang1_fang1_, other->chang1_fang1_);
    std::swap(chang1_fang2_, other->chang1_fang2_);
    std::swap(chang1_fang3_, other->chang1_fang3_);
    std::swap(chang1_ratechi1_, other->chang1_ratechi1_);
    std::swap(chang1_ratechi2_, other->chang1_ratechi2_);
    std::swap(chang1_ratechi3_, other->chang1_ratechi3_);
    std::swap(chang1_rateping_, other->chang1_rateping_);
    std::swap(chang1_ratefang1_, other->chang1_ratefang1_);
    std::swap(chang1_ratefang2_, other->chang1_ratefang2_);
    std::swap(chang1_ratefang3_, other->chang1_ratefang3_);
    std::swap(chang2_rangelow_, other->chang2_rangelow_);
    std::swap(chang2_rangehigh_, other->chang2_rangehigh_);
    std::swap(chang2_chi1_, other->chang2_chi1_);
    std::swap(chang2_chi2_, other->chang2_chi2_);
    std::swap(chang2_chi3_, other->chang2_chi3_);
    std::swap(chang2_fang1_, other->chang2_fang1_);
    std::swap(chang2_fang2_, other->chang2_fang2_);
    std::swap(chang2_fang3_, other->chang2_fang3_);
    std::swap(chang2_ratechi1_, other->chang2_ratechi1_);
    std::swap(chang2_ratechi2_, other->chang2_ratechi2_);
    std::swap(chang2_ratechi3_, other->chang2_ratechi3_);
    std::swap(chang2_rateping_, other->chang2_rateping_);
    std::swap(chang2_ratefang1_, other->chang2_ratefang1_);
    std::swap(chang2_ratefang2_, other->chang2_ratefang2_);
    std::swap(chang2_ratefang3_, other->chang2_ratefang3_);
    std::swap(chang3_rangelow_, other->chang3_rangelow_);
    std::swap(chang3_rangehigh_, other->chang3_rangehigh_);
    std::swap(chang3_chi1_, other->chang3_chi1_);
    std::swap(chang3_chi2_, other->chang3_chi2_);
    std::swap(chang3_chi3_, other->chang3_chi3_);
    std::swap(chang3_fang1_, other->chang3_fang1_);
    std::swap(chang3_fang2_, other->chang3_fang2_);
    std::swap(chang3_fang3_, other->chang3_fang3_);
    std::swap(chang3_ratechi1_, other->chang3_ratechi1_);
    std::swap(chang3_ratechi2_, other->chang3_ratechi2_);
    std::swap(chang3_ratechi3_, other->chang3_ratechi3_);
    std::swap(chang3_rateping_, other->chang3_rateping_);
    std::swap(chang3_ratefang1_, other->chang3_ratefang1_);
    std::swap(chang3_ratefang2_, other->chang3_ratefang2_);
    std::swap(chang3_ratefang3_, other->chang3_ratefang3_);
    std::swap(clear_maxval_, other->clear_maxval_);
    std::swap(clear_fang3mul_, other->clear_fang3mul_);
    std::swap(clear_chi3mul_, other->clear_chi3mul_);
    std::swap(clear_initshoot_, other->clear_initshoot_);
    std::swap(clear_initcapture_, other->clear_initcapture_);
    std::swap(clear_initdrawrate_, other->clear_initdrawrate_);
    std::swap(clear_initpoolrate_, other->clear_initpoolrate_);
    std::swap(is_delete_, other->is_delete_);
    std::swap(fishalgotype_, other->fishalgotype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FishAlgoDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishAlgoDesc_descriptor_;
  metadata.reflection = FishAlgoDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FishAlgoDesc::kFishAlgoDescListFieldNumber;
#endif  // !_MSC_VER

Sheet_FishAlgoDesc::Sheet_FishAlgoDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FishAlgoDesc::InitAsDefaultInstance() {
}

Sheet_FishAlgoDesc::Sheet_FishAlgoDesc(const Sheet_FishAlgoDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FishAlgoDesc::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FishAlgoDesc::~Sheet_FishAlgoDesc() {
  SharedDtor();
}

void Sheet_FishAlgoDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FishAlgoDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FishAlgoDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FishAlgoDesc_descriptor_;
}

const Sheet_FishAlgoDesc& Sheet_FishAlgoDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

Sheet_FishAlgoDesc* Sheet_FishAlgoDesc::default_instance_ = NULL;

Sheet_FishAlgoDesc* Sheet_FishAlgoDesc::New() const {
  return new Sheet_FishAlgoDesc;
}

void Sheet_FishAlgoDesc::Clear() {
  fishalgodesc_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FishAlgoDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FishAlgoDesc FishAlgoDesc_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FishAlgoDesc_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fishalgodesc_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_FishAlgoDesc_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FishAlgoDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FishAlgoDesc FishAlgoDesc_List = 1;
  for (int i = 0; i < this->fishalgodesc_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fishalgodesc_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FishAlgoDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FishAlgoDesc FishAlgoDesc_List = 1;
  for (int i = 0; i < this->fishalgodesc_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fishalgodesc_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FishAlgoDesc::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FishAlgoDesc FishAlgoDesc_List = 1;
  total_size += 1 * this->fishalgodesc_list_size();
  for (int i = 0; i < this->fishalgodesc_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fishalgodesc_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FishAlgoDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FishAlgoDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FishAlgoDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FishAlgoDesc::MergeFrom(const Sheet_FishAlgoDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  fishalgodesc_list_.MergeFrom(from.fishalgodesc_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FishAlgoDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FishAlgoDesc::CopyFrom(const Sheet_FishAlgoDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FishAlgoDesc::IsInitialized() const {

  return true;
}

void Sheet_FishAlgoDesc::Swap(Sheet_FishAlgoDesc* other) {
  if (other != this) {
    fishalgodesc_list_.Swap(&other->fishalgodesc_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FishAlgoDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FishAlgoDesc_descriptor_;
  metadata.reflection = Sheet_FishAlgoDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserDeskAlgoInfo::kAlgoIDFieldNumber;
const int UserDeskAlgoInfo::kDrawRateFieldNumber;
const int UserDeskAlgoInfo::kCurTotalShootFieldNumber;
const int UserDeskAlgoInfo::kCurTotalCaptureFieldNumber;
const int UserDeskAlgoInfo::kCurAlgoChangFieldNumber;
const int UserDeskAlgoInfo::kCurAlgoStatusFieldNumber;
#endif  // !_MSC_VER

UserDeskAlgoInfo::UserDeskAlgoInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserDeskAlgoInfo::InitAsDefaultInstance() {
}

UserDeskAlgoInfo::UserDeskAlgoInfo(const UserDeskAlgoInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserDeskAlgoInfo::SharedCtor() {
  _cached_size_ = 0;
  algoid_ = 0;
  drawrate_ = 0;
  curtotalshoot_ = 0;
  curtotalcapture_ = 0;
  curalgochang_ = GOOGLE_LONGLONG(0);
  curalgostatus_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserDeskAlgoInfo::~UserDeskAlgoInfo() {
  SharedDtor();
}

void UserDeskAlgoInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserDeskAlgoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserDeskAlgoInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserDeskAlgoInfo_descriptor_;
}

const UserDeskAlgoInfo& UserDeskAlgoInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

UserDeskAlgoInfo* UserDeskAlgoInfo::default_instance_ = NULL;

UserDeskAlgoInfo* UserDeskAlgoInfo::New() const {
  return new UserDeskAlgoInfo;
}

void UserDeskAlgoInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    algoid_ = 0;
    drawrate_ = 0;
    curtotalshoot_ = 0;
    curtotalcapture_ = 0;
    curalgochang_ = GOOGLE_LONGLONG(0);
    curalgostatus_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserDeskAlgoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 AlgoID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &algoid_)));
          set_has_algoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_DrawRate;
        break;
      }

      // optional float DrawRate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_DrawRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &drawrate_)));
          set_has_drawrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_CurTotalShoot;
        break;
      }

      // optional double CurTotalShoot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CurTotalShoot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curtotalshoot_)));
          set_has_curtotalshoot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_CurTotalCapture;
        break;
      }

      // optional double CurTotalCapture = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CurTotalCapture:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curtotalcapture_)));
          set_has_curtotalcapture();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_CurAlgoChang;
        break;
      }

      // optional int64 CurAlgoChang = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurAlgoChang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curalgochang_)));
          set_has_curalgochang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_CurAlgoStatus;
        break;
      }

      // optional int64 CurAlgoStatus = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurAlgoStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curalgostatus_)));
          set_has_curalgostatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserDeskAlgoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 AlgoID = 1;
  if (has_algoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->algoid(), output);
  }

  // optional float DrawRate = 2;
  if (has_drawrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->drawrate(), output);
  }

  // optional double CurTotalShoot = 3;
  if (has_curtotalshoot()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->curtotalshoot(), output);
  }

  // optional double CurTotalCapture = 4;
  if (has_curtotalcapture()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->curtotalcapture(), output);
  }

  // optional int64 CurAlgoChang = 5;
  if (has_curalgochang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->curalgochang(), output);
  }

  // optional int64 CurAlgoStatus = 6;
  if (has_curalgostatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->curalgostatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserDeskAlgoInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 AlgoID = 1;
  if (has_algoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->algoid(), target);
  }

  // optional float DrawRate = 2;
  if (has_drawrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->drawrate(), target);
  }

  // optional double CurTotalShoot = 3;
  if (has_curtotalshoot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->curtotalshoot(), target);
  }

  // optional double CurTotalCapture = 4;
  if (has_curtotalcapture()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->curtotalcapture(), target);
  }

  // optional int64 CurAlgoChang = 5;
  if (has_curalgochang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->curalgochang(), target);
  }

  // optional int64 CurAlgoStatus = 6;
  if (has_curalgostatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->curalgostatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserDeskAlgoInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 AlgoID = 1;
    if (has_algoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->algoid());
    }

    // optional float DrawRate = 2;
    if (has_drawrate()) {
      total_size += 1 + 4;
    }

    // optional double CurTotalShoot = 3;
    if (has_curtotalshoot()) {
      total_size += 1 + 8;
    }

    // optional double CurTotalCapture = 4;
    if (has_curtotalcapture()) {
      total_size += 1 + 8;
    }

    // optional int64 CurAlgoChang = 5;
    if (has_curalgochang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->curalgochang());
    }

    // optional int64 CurAlgoStatus = 6;
    if (has_curalgostatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->curalgostatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserDeskAlgoInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserDeskAlgoInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserDeskAlgoInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserDeskAlgoInfo::MergeFrom(const UserDeskAlgoInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_algoid()) {
      set_algoid(from.algoid());
    }
    if (from.has_drawrate()) {
      set_drawrate(from.drawrate());
    }
    if (from.has_curtotalshoot()) {
      set_curtotalshoot(from.curtotalshoot());
    }
    if (from.has_curtotalcapture()) {
      set_curtotalcapture(from.curtotalcapture());
    }
    if (from.has_curalgochang()) {
      set_curalgochang(from.curalgochang());
    }
    if (from.has_curalgostatus()) {
      set_curalgostatus(from.curalgostatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserDeskAlgoInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDeskAlgoInfo::CopyFrom(const UserDeskAlgoInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDeskAlgoInfo::IsInitialized() const {

  return true;
}

void UserDeskAlgoInfo::Swap(UserDeskAlgoInfo* other) {
  if (other != this) {
    std::swap(algoid_, other->algoid_);
    std::swap(drawrate_, other->drawrate_);
    std::swap(curtotalshoot_, other->curtotalshoot_);
    std::swap(curtotalcapture_, other->curtotalcapture_);
    std::swap(curalgochang_, other->curalgochang_);
    std::swap(curalgostatus_, other->curalgostatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserDeskAlgoInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserDeskAlgoInfo_descriptor_;
  metadata.reflection = UserDeskAlgoInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeskInfoDesc::kIdFieldNumber;
const int DeskInfoDesc::kRoomIDFieldNumber;
const int DeskInfoDesc::kDeskIDFieldNumber;
const int DeskInfoDesc::kAlgoTypeFieldNumber;
const int DeskInfoDesc::kAlgoDataFieldNumber;
const int DeskInfoDesc::kGameLevelFieldNumber;
const int DeskInfoDesc::kYValueAFieldNumber;
const int DeskInfoDesc::kYValueBFieldNumber;
const int DeskInfoDesc::kFreePoolFieldNumber;
const int DeskInfoDesc::kYValueFieldNumber;
#endif  // !_MSC_VER

DeskInfoDesc::DeskInfoDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeskInfoDesc::InitAsDefaultInstance() {
}

DeskInfoDesc::DeskInfoDesc(const DeskInfoDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeskInfoDesc::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  roomid_ = 0;
  deskid_ = 0;
  algotype_ = 0;
  gamelevel_ = 0;
  yvaluea_ = GOOGLE_LONGLONG(0);
  yvalueb_ = GOOGLE_LONGLONG(0);
  freepool_ = GOOGLE_LONGLONG(0);
  yvalue_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeskInfoDesc::~DeskInfoDesc() {
  SharedDtor();
}

void DeskInfoDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeskInfoDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeskInfoDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeskInfoDesc_descriptor_;
}

const DeskInfoDesc& DeskInfoDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

DeskInfoDesc* DeskInfoDesc::default_instance_ = NULL;

DeskInfoDesc* DeskInfoDesc::New() const {
  return new DeskInfoDesc;
}

void DeskInfoDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    roomid_ = 0;
    deskid_ = 0;
    algotype_ = 0;
    gamelevel_ = 0;
    yvaluea_ = GOOGLE_LONGLONG(0);
    yvalueb_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    freepool_ = GOOGLE_LONGLONG(0);
    yvalue_ = GOOGLE_LONGLONG(0);
  }
  algodata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeskInfoDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RoomID;
        break;
      }

      // optional int32 RoomID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoomID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DeskID;
        break;
      }

      // optional int32 DeskID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DeskID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deskid_)));
          set_has_deskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_AlgoType;
        break;
      }

      // optional int32 AlgoType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AlgoType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &algotype_)));
          set_has_algotype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_AlgoData;
        break;
      }

      // repeated .proto_ff.UserDeskAlgoInfo AlgoData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AlgoData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_algodata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_AlgoData;
        if (input->ExpectTag(48)) goto parse_GameLevel;
        break;
      }

      // optional int32 GameLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GameLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamelevel_)));
          set_has_gamelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_YValueA;
        break;
      }

      // optional int64 YValueA = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_YValueA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &yvaluea_)));
          set_has_yvaluea();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_YValueB;
        break;
      }

      // optional int64 YValueB = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_YValueB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &yvalueb_)));
          set_has_yvalueb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_FreePool;
        break;
      }

      // optional int64 FreePool = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FreePool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &freepool_)));
          set_has_freepool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_YValue;
        break;
      }

      // optional int64 YValue = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_YValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &yvalue_)));
          set_has_yvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeskInfoDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 RoomID = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // optional int32 DeskID = 3;
  if (has_deskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->deskid(), output);
  }

  // optional int32 AlgoType = 4;
  if (has_algotype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->algotype(), output);
  }

  // repeated .proto_ff.UserDeskAlgoInfo AlgoData = 5;
  for (int i = 0; i < this->algodata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->algodata(i), output);
  }

  // optional int32 GameLevel = 6;
  if (has_gamelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gamelevel(), output);
  }

  // optional int64 YValueA = 7;
  if (has_yvaluea()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->yvaluea(), output);
  }

  // optional int64 YValueB = 8;
  if (has_yvalueb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->yvalueb(), output);
  }

  // optional int64 FreePool = 9;
  if (has_freepool()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->freepool(), output);
  }

  // optional int64 YValue = 10;
  if (has_yvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->yvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeskInfoDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 RoomID = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // optional int32 DeskID = 3;
  if (has_deskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->deskid(), target);
  }

  // optional int32 AlgoType = 4;
  if (has_algotype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->algotype(), target);
  }

  // repeated .proto_ff.UserDeskAlgoInfo AlgoData = 5;
  for (int i = 0; i < this->algodata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->algodata(i), target);
  }

  // optional int32 GameLevel = 6;
  if (has_gamelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gamelevel(), target);
  }

  // optional int64 YValueA = 7;
  if (has_yvaluea()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->yvaluea(), target);
  }

  // optional int64 YValueB = 8;
  if (has_yvalueb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->yvalueb(), target);
  }

  // optional int64 FreePool = 9;
  if (has_freepool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->freepool(), target);
  }

  // optional int64 YValue = 10;
  if (has_yvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->yvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeskInfoDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 RoomID = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int32 DeskID = 3;
    if (has_deskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deskid());
    }

    // optional int32 AlgoType = 4;
    if (has_algotype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->algotype());
    }

    // optional int32 GameLevel = 6;
    if (has_gamelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamelevel());
    }

    // optional int64 YValueA = 7;
    if (has_yvaluea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->yvaluea());
    }

    // optional int64 YValueB = 8;
    if (has_yvalueb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->yvalueb());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 FreePool = 9;
    if (has_freepool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->freepool());
    }

    // optional int64 YValue = 10;
    if (has_yvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->yvalue());
    }

  }
  // repeated .proto_ff.UserDeskAlgoInfo AlgoData = 5;
  total_size += 1 * this->algodata_size();
  for (int i = 0; i < this->algodata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->algodata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeskInfoDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeskInfoDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeskInfoDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeskInfoDesc::MergeFrom(const DeskInfoDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  algodata_.MergeFrom(from.algodata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_deskid()) {
      set_deskid(from.deskid());
    }
    if (from.has_algotype()) {
      set_algotype(from.algotype());
    }
    if (from.has_gamelevel()) {
      set_gamelevel(from.gamelevel());
    }
    if (from.has_yvaluea()) {
      set_yvaluea(from.yvaluea());
    }
    if (from.has_yvalueb()) {
      set_yvalueb(from.yvalueb());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_freepool()) {
      set_freepool(from.freepool());
    }
    if (from.has_yvalue()) {
      set_yvalue(from.yvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeskInfoDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeskInfoDesc::CopyFrom(const DeskInfoDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeskInfoDesc::IsInitialized() const {

  return true;
}

void DeskInfoDesc::Swap(DeskInfoDesc* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(roomid_, other->roomid_);
    std::swap(deskid_, other->deskid_);
    std::swap(algotype_, other->algotype_);
    algodata_.Swap(&other->algodata_);
    std::swap(gamelevel_, other->gamelevel_);
    std::swap(yvaluea_, other->yvaluea_);
    std::swap(yvalueb_, other->yvalueb_);
    std::swap(freepool_, other->freepool_);
    std::swap(yvalue_, other->yvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeskInfoDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeskInfoDesc_descriptor_;
  metadata.reflection = DeskInfoDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_DeskInfoDesc::kDeskInfoDescListFieldNumber;
#endif  // !_MSC_VER

Sheet_DeskInfoDesc::Sheet_DeskInfoDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_DeskInfoDesc::InitAsDefaultInstance() {
}

Sheet_DeskInfoDesc::Sheet_DeskInfoDesc(const Sheet_DeskInfoDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_DeskInfoDesc::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_DeskInfoDesc::~Sheet_DeskInfoDesc() {
  SharedDtor();
}

void Sheet_DeskInfoDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_DeskInfoDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_DeskInfoDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_DeskInfoDesc_descriptor_;
}

const Sheet_DeskInfoDesc& Sheet_DeskInfoDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

Sheet_DeskInfoDesc* Sheet_DeskInfoDesc::default_instance_ = NULL;

Sheet_DeskInfoDesc* Sheet_DeskInfoDesc::New() const {
  return new Sheet_DeskInfoDesc;
}

void Sheet_DeskInfoDesc::Clear() {
  deskinfodesc_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_DeskInfoDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.DeskInfoDesc DeskInfoDesc_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DeskInfoDesc_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_deskinfodesc_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_DeskInfoDesc_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_DeskInfoDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.DeskInfoDesc DeskInfoDesc_List = 1;
  for (int i = 0; i < this->deskinfodesc_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->deskinfodesc_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_DeskInfoDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.DeskInfoDesc DeskInfoDesc_List = 1;
  for (int i = 0; i < this->deskinfodesc_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->deskinfodesc_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_DeskInfoDesc::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.DeskInfoDesc DeskInfoDesc_List = 1;
  total_size += 1 * this->deskinfodesc_list_size();
  for (int i = 0; i < this->deskinfodesc_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->deskinfodesc_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_DeskInfoDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_DeskInfoDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_DeskInfoDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_DeskInfoDesc::MergeFrom(const Sheet_DeskInfoDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  deskinfodesc_list_.MergeFrom(from.deskinfodesc_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_DeskInfoDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_DeskInfoDesc::CopyFrom(const Sheet_DeskInfoDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_DeskInfoDesc::IsInitialized() const {

  return true;
}

void Sheet_DeskInfoDesc::Swap(Sheet_DeskInfoDesc* other) {
  if (other != this) {
    deskinfodesc_list_.Swap(&other->deskinfodesc_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_DeskInfoDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_DeskInfoDesc_descriptor_;
  metadata.reflection = Sheet_DeskInfoDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FishInitPoolData::kFishIdFieldNumber;
const int FishInitPoolData::kNumFieldNumber;
#endif  // !_MSC_VER

FishInitPoolData::FishInitPoolData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FishInitPoolData::InitAsDefaultInstance() {
}

FishInitPoolData::FishInitPoolData(const FishInitPoolData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FishInitPoolData::SharedCtor() {
  _cached_size_ = 0;
  fish_id_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FishInitPoolData::~FishInitPoolData() {
  SharedDtor();
}

void FishInitPoolData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FishInitPoolData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishInitPoolData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishInitPoolData_descriptor_;
}

const FishInitPoolData& FishInitPoolData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

FishInitPoolData* FishInitPoolData::default_instance_ = NULL;

FishInitPoolData* FishInitPoolData::New() const {
  return new FishInitPoolData;
}

void FishInitPoolData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fish_id_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FishInitPoolData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fish_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fish_id_)));
          set_has_fish_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FishInitPoolData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 fish_id = 1;
  if (has_fish_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fish_id(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FishInitPoolData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 fish_id = 1;
  if (has_fish_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fish_id(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FishInitPoolData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 fish_id = 1;
    if (has_fish_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fish_id());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishInitPoolData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FishInitPoolData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FishInitPoolData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FishInitPoolData::MergeFrom(const FishInitPoolData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fish_id()) {
      set_fish_id(from.fish_id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FishInitPoolData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishInitPoolData::CopyFrom(const FishInitPoolData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishInitPoolData::IsInitialized() const {

  return true;
}

void FishInitPoolData::Swap(FishInitPoolData* other) {
  if (other != this) {
    std::swap(fish_id_, other->fish_id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FishInitPoolData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishInitPoolData_descriptor_;
  metadata.reflection = FishInitPoolData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FishInitPool::kInitPoolCountFieldNumber;
#endif  // !_MSC_VER

FishInitPool::FishInitPool()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FishInitPool::InitAsDefaultInstance() {
}

FishInitPool::FishInitPool(const FishInitPool& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FishInitPool::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FishInitPool::~FishInitPool() {
  SharedDtor();
}

void FishInitPool::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FishInitPool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishInitPool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishInitPool_descriptor_;
}

const FishInitPool& FishInitPool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

FishInitPool* FishInitPool::default_instance_ = NULL;

FishInitPool* FishInitPool::New() const {
  return new FishInitPool;
}

void FishInitPool::Clear() {
  initpoolcount_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FishInitPool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FishInitPoolData InitPoolCount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InitPoolCount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_initpoolcount()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_InitPoolCount;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FishInitPool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FishInitPoolData InitPoolCount = 1;
  for (int i = 0; i < this->initpoolcount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->initpoolcount(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FishInitPool::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FishInitPoolData InitPoolCount = 1;
  for (int i = 0; i < this->initpoolcount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->initpoolcount(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FishInitPool::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FishInitPoolData InitPoolCount = 1;
  total_size += 1 * this->initpoolcount_size();
  for (int i = 0; i < this->initpoolcount_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->initpoolcount(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishInitPool::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FishInitPool* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FishInitPool*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FishInitPool::MergeFrom(const FishInitPool& from) {
  GOOGLE_CHECK_NE(&from, this);
  initpoolcount_.MergeFrom(from.initpoolcount_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FishInitPool::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishInitPool::CopyFrom(const FishInitPool& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishInitPool::IsInitialized() const {

  return true;
}

void FishInitPool::Swap(FishInitPool* other) {
  if (other != this) {
    initpoolcount_.Swap(&other->initpoolcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FishInitPool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishInitPool_descriptor_;
  metadata.reflection = FishInitPool_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SeatDangRange_B::kValueFieldNumber;
#endif  // !_MSC_VER

SeatDangRange_B::SeatDangRange_B()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SeatDangRange_B::InitAsDefaultInstance() {
}

SeatDangRange_B::SeatDangRange_B(const SeatDangRange_B& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SeatDangRange_B::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeatDangRange_B::~SeatDangRange_B() {
  SharedDtor();
}

void SeatDangRange_B::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SeatDangRange_B::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeatDangRange_B::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeatDangRange_B_descriptor_;
}

const SeatDangRange_B& SeatDangRange_B::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

SeatDangRange_B* SeatDangRange_B::default_instance_ = NULL;

SeatDangRange_B* SeatDangRange_B::New() const {
  return new SeatDangRange_B;
}

void SeatDangRange_B::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeatDangRange_B::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SeatDangRange_B::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SeatDangRange_B::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SeatDangRange_B::ByteSize() const {
  int total_size = 0;

  // repeated int64 value = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->value(i));
    }
    total_size += 1 * this->value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeatDangRange_B::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeatDangRange_B* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeatDangRange_B*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeatDangRange_B::MergeFrom(const SeatDangRange_B& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeatDangRange_B::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeatDangRange_B::CopyFrom(const SeatDangRange_B& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeatDangRange_B::IsInitialized() const {

  return true;
}

void SeatDangRange_B::Swap(SeatDangRange_B* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeatDangRange_B::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeatDangRange_B_descriptor_;
  metadata.reflection = SeatDangRange_B_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SeatAlgoSetup::kSeatCtrlIsOpenFieldNumber;
const int SeatAlgoSetup::kSeatDangRangeDefAFieldNumber;
const int SeatAlgoSetup::kSeatDangRangeDefBFieldNumber;
const int SeatAlgoSetup::kSeatDangRangeDefRobotFieldNumber;
const int SeatAlgoSetup::kSeatDangRangeBFieldNumber;
const int SeatAlgoSetup::kClearDataMaxValFieldNumber;
const int SeatAlgoSetup::kClearDataFangCondationFieldNumber;
const int SeatAlgoSetup::kClearDataChiCondationFieldNumber;
#endif  // !_MSC_VER

SeatAlgoSetup::SeatAlgoSetup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SeatAlgoSetup::InitAsDefaultInstance() {
}

SeatAlgoSetup::SeatAlgoSetup(const SeatAlgoSetup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SeatAlgoSetup::SharedCtor() {
  _cached_size_ = 0;
  seatctrlisopen_ = 0;
  cleardatamaxval_ = GOOGLE_LONGLONG(0);
  cleardatafangcondation_ = 0;
  cleardatachicondation_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeatAlgoSetup::~SeatAlgoSetup() {
  SharedDtor();
}

void SeatAlgoSetup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SeatAlgoSetup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeatAlgoSetup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeatAlgoSetup_descriptor_;
}

const SeatAlgoSetup& SeatAlgoSetup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

SeatAlgoSetup* SeatAlgoSetup::default_instance_ = NULL;

SeatAlgoSetup* SeatAlgoSetup::New() const {
  return new SeatAlgoSetup;
}

void SeatAlgoSetup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seatctrlisopen_ = 0;
    cleardatamaxval_ = GOOGLE_LONGLONG(0);
    cleardatafangcondation_ = 0;
    cleardatachicondation_ = 0;
  }
  seatdangrange_def_a_.Clear();
  seatdangrange_def_b_.Clear();
  seatdangrange_def_robot_.Clear();
  seatdangrange_b_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeatAlgoSetup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SeatCtrlIsOpen = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatctrlisopen_)));
          set_has_seatctrlisopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SeatDangRange_Def_A;
        break;
      }

      // repeated int64 SeatDangRange_Def_A = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SeatDangRange_Def_A:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_seatdangrange_def_a())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_seatdangrange_def_a())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SeatDangRange_Def_A;
        if (input->ExpectTag(24)) goto parse_SeatDangRange_Def_B;
        break;
      }

      // repeated int64 SeatDangRange_Def_B = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SeatDangRange_Def_B:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_seatdangrange_def_b())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_seatdangrange_def_b())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SeatDangRange_Def_B;
        if (input->ExpectTag(32)) goto parse_SeatDangRange_Def_Robot;
        break;
      }

      // repeated int64 SeatDangRange_Def_Robot = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SeatDangRange_Def_Robot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 32, input, this->mutable_seatdangrange_def_robot())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_seatdangrange_def_robot())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_SeatDangRange_Def_Robot;
        if (input->ExpectTag(42)) goto parse_SeatDangRange_B;
        break;
      }

      // repeated .proto_ff.SeatDangRange_B SeatDangRange_B = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SeatDangRange_B:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_seatdangrange_b()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_SeatDangRange_B;
        if (input->ExpectTag(48)) goto parse_ClearDataMaxVal;
        break;
      }

      // optional int64 ClearDataMaxVal = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ClearDataMaxVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cleardatamaxval_)));
          set_has_cleardatamaxval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_ClearDataFangCondation;
        break;
      }

      // optional double ClearDataFangCondation = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ClearDataFangCondation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cleardatafangcondation_)));
          set_has_cleardatafangcondation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_ClearDataChiCondation;
        break;
      }

      // optional double ClearDataChiCondation = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ClearDataChiCondation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cleardatachicondation_)));
          set_has_cleardatachicondation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SeatAlgoSetup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 SeatCtrlIsOpen = 1;
  if (has_seatctrlisopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatctrlisopen(), output);
  }

  // repeated int64 SeatDangRange_Def_A = 2;
  for (int i = 0; i < this->seatdangrange_def_a_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->seatdangrange_def_a(i), output);
  }

  // repeated int64 SeatDangRange_Def_B = 3;
  for (int i = 0; i < this->seatdangrange_def_b_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->seatdangrange_def_b(i), output);
  }

  // repeated int64 SeatDangRange_Def_Robot = 4;
  for (int i = 0; i < this->seatdangrange_def_robot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->seatdangrange_def_robot(i), output);
  }

  // repeated .proto_ff.SeatDangRange_B SeatDangRange_B = 5;
  for (int i = 0; i < this->seatdangrange_b_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->seatdangrange_b(i), output);
  }

  // optional int64 ClearDataMaxVal = 6;
  if (has_cleardatamaxval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->cleardatamaxval(), output);
  }

  // optional double ClearDataFangCondation = 7;
  if (has_cleardatafangcondation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->cleardatafangcondation(), output);
  }

  // optional double ClearDataChiCondation = 8;
  if (has_cleardatachicondation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->cleardatachicondation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SeatAlgoSetup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 SeatCtrlIsOpen = 1;
  if (has_seatctrlisopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatctrlisopen(), target);
  }

  // repeated int64 SeatDangRange_Def_A = 2;
  for (int i = 0; i < this->seatdangrange_def_a_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->seatdangrange_def_a(i), target);
  }

  // repeated int64 SeatDangRange_Def_B = 3;
  for (int i = 0; i < this->seatdangrange_def_b_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->seatdangrange_def_b(i), target);
  }

  // repeated int64 SeatDangRange_Def_Robot = 4;
  for (int i = 0; i < this->seatdangrange_def_robot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(4, this->seatdangrange_def_robot(i), target);
  }

  // repeated .proto_ff.SeatDangRange_B SeatDangRange_B = 5;
  for (int i = 0; i < this->seatdangrange_b_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->seatdangrange_b(i), target);
  }

  // optional int64 ClearDataMaxVal = 6;
  if (has_cleardatamaxval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->cleardatamaxval(), target);
  }

  // optional double ClearDataFangCondation = 7;
  if (has_cleardatafangcondation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->cleardatafangcondation(), target);
  }

  // optional double ClearDataChiCondation = 8;
  if (has_cleardatachicondation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->cleardatachicondation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SeatAlgoSetup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SeatCtrlIsOpen = 1;
    if (has_seatctrlisopen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatctrlisopen());
    }

    // optional int64 ClearDataMaxVal = 6;
    if (has_cleardatamaxval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cleardatamaxval());
    }

    // optional double ClearDataFangCondation = 7;
    if (has_cleardatafangcondation()) {
      total_size += 1 + 8;
    }

    // optional double ClearDataChiCondation = 8;
    if (has_cleardatachicondation()) {
      total_size += 1 + 8;
    }

  }
  // repeated int64 SeatDangRange_Def_A = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->seatdangrange_def_a_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->seatdangrange_def_a(i));
    }
    total_size += 1 * this->seatdangrange_def_a_size() + data_size;
  }

  // repeated int64 SeatDangRange_Def_B = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->seatdangrange_def_b_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->seatdangrange_def_b(i));
    }
    total_size += 1 * this->seatdangrange_def_b_size() + data_size;
  }

  // repeated int64 SeatDangRange_Def_Robot = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->seatdangrange_def_robot_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->seatdangrange_def_robot(i));
    }
    total_size += 1 * this->seatdangrange_def_robot_size() + data_size;
  }

  // repeated .proto_ff.SeatDangRange_B SeatDangRange_B = 5;
  total_size += 1 * this->seatdangrange_b_size();
  for (int i = 0; i < this->seatdangrange_b_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seatdangrange_b(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeatAlgoSetup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeatAlgoSetup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeatAlgoSetup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeatAlgoSetup::MergeFrom(const SeatAlgoSetup& from) {
  GOOGLE_CHECK_NE(&from, this);
  seatdangrange_def_a_.MergeFrom(from.seatdangrange_def_a_);
  seatdangrange_def_b_.MergeFrom(from.seatdangrange_def_b_);
  seatdangrange_def_robot_.MergeFrom(from.seatdangrange_def_robot_);
  seatdangrange_b_.MergeFrom(from.seatdangrange_b_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatctrlisopen()) {
      set_seatctrlisopen(from.seatctrlisopen());
    }
    if (from.has_cleardatamaxval()) {
      set_cleardatamaxval(from.cleardatamaxval());
    }
    if (from.has_cleardatafangcondation()) {
      set_cleardatafangcondation(from.cleardatafangcondation());
    }
    if (from.has_cleardatachicondation()) {
      set_cleardatachicondation(from.cleardatachicondation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeatAlgoSetup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeatAlgoSetup::CopyFrom(const SeatAlgoSetup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeatAlgoSetup::IsInitialized() const {

  return true;
}

void SeatAlgoSetup::Swap(SeatAlgoSetup* other) {
  if (other != this) {
    std::swap(seatctrlisopen_, other->seatctrlisopen_);
    seatdangrange_def_a_.Swap(&other->seatdangrange_def_a_);
    seatdangrange_def_b_.Swap(&other->seatdangrange_def_b_);
    seatdangrange_def_robot_.Swap(&other->seatdangrange_def_robot_);
    seatdangrange_b_.Swap(&other->seatdangrange_b_);
    std::swap(cleardatamaxval_, other->cleardatamaxval_);
    std::swap(cleardatafangcondation_, other->cleardatafangcondation_);
    std::swap(cleardatachicondation_, other->cleardatachicondation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeatAlgoSetup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeatAlgoSetup_descriptor_;
  metadata.reflection = SeatAlgoSetup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HuanDangRange::kValueFieldNumber;
#endif  // !_MSC_VER

HuanDangRange::HuanDangRange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HuanDangRange::InitAsDefaultInstance() {
}

HuanDangRange::HuanDangRange(const HuanDangRange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HuanDangRange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HuanDangRange::~HuanDangRange() {
  SharedDtor();
}

void HuanDangRange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HuanDangRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HuanDangRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HuanDangRange_descriptor_;
}

const HuanDangRange& HuanDangRange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

HuanDangRange* HuanDangRange::default_instance_ = NULL;

HuanDangRange* HuanDangRange::New() const {
  return new HuanDangRange;
}

void HuanDangRange::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HuanDangRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HuanDangRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HuanDangRange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HuanDangRange::ByteSize() const {
  int total_size = 0;

  // repeated int64 value = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->value(i));
    }
    total_size += 1 * this->value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HuanDangRange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HuanDangRange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HuanDangRange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HuanDangRange::MergeFrom(const HuanDangRange& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HuanDangRange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HuanDangRange::CopyFrom(const HuanDangRange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HuanDangRange::IsInitialized() const {

  return true;
}

void HuanDangRange::Swap(HuanDangRange* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HuanDangRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HuanDangRange_descriptor_;
  metadata.reflection = HuanDangRange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DangChiRange::kValueFieldNumber;
#endif  // !_MSC_VER

DangChiRange::DangChiRange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DangChiRange::InitAsDefaultInstance() {
}

DangChiRange::DangChiRange(const DangChiRange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DangChiRange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DangChiRange::~DangChiRange() {
  SharedDtor();
}

void DangChiRange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DangChiRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DangChiRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DangChiRange_descriptor_;
}

const DangChiRange& DangChiRange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

DangChiRange* DangChiRange::default_instance_ = NULL;

DangChiRange* DangChiRange::New() const {
  return new DangChiRange;
}

void DangChiRange::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DangChiRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DangChiRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DangChiRange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DangChiRange::ByteSize() const {
  int total_size = 0;

  // repeated int64 value = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->value(i));
    }
    total_size += 1 * this->value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DangChiRange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DangChiRange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DangChiRange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DangChiRange::MergeFrom(const DangChiRange& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DangChiRange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DangChiRange::CopyFrom(const DangChiRange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DangChiRange::IsInitialized() const {

  return true;
}

void DangChiRange::Swap(DangChiRange* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DangChiRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DangChiRange_descriptor_;
  metadata.reflection = DangChiRange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FishAlgorithmSetup::kHuanChangTimesFieldNumber;
const int FishAlgorithmSetup::kHuanDangRangeFieldNumber;
const int FishAlgorithmSetup::kDangChiRangeFieldNumber;
const int FishAlgorithmSetup::kHuanBiaoLiuShuiValFieldNumber;
const int FishAlgorithmSetup::kPoolInitBFBFieldNumber;
const int FishAlgorithmSetup::kClearDataMaxValFieldNumber;
const int FishAlgorithmSetup::kClearDataFangCondationFieldNumber;
const int FishAlgorithmSetup::kClearDataChiCondationFieldNumber;
const int FishAlgorithmSetup::kClearDataInitShootFieldNumber;
const int FishAlgorithmSetup::kClearDataInitCaptureFieldNumber;
const int FishAlgorithmSetup::kClearDataInitDrawRateFieldNumber;
#endif  // !_MSC_VER

FishAlgorithmSetup::FishAlgorithmSetup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FishAlgorithmSetup::InitAsDefaultInstance() {
}

FishAlgorithmSetup::FishAlgorithmSetup(const FishAlgorithmSetup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FishAlgorithmSetup::SharedCtor() {
  _cached_size_ = 0;
  huanchangtimes_ = GOOGLE_LONGLONG(0);
  huanbiaoliushuival_ = GOOGLE_LONGLONG(0);
  poolinitbfb_ = GOOGLE_LONGLONG(0);
  cleardatamaxval_ = GOOGLE_LONGLONG(0);
  cleardatafangcondation_ = 0;
  cleardatachicondation_ = 0;
  cleardatainitshoot_ = GOOGLE_LONGLONG(0);
  cleardatainitcapture_ = GOOGLE_LONGLONG(0);
  cleardatainitdrawrate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FishAlgorithmSetup::~FishAlgorithmSetup() {
  SharedDtor();
}

void FishAlgorithmSetup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FishAlgorithmSetup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishAlgorithmSetup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishAlgorithmSetup_descriptor_;
}

const FishAlgorithmSetup& FishAlgorithmSetup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

FishAlgorithmSetup* FishAlgorithmSetup::default_instance_ = NULL;

FishAlgorithmSetup* FishAlgorithmSetup::New() const {
  return new FishAlgorithmSetup;
}

void FishAlgorithmSetup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    huanchangtimes_ = GOOGLE_LONGLONG(0);
    huanbiaoliushuival_ = GOOGLE_LONGLONG(0);
    poolinitbfb_ = GOOGLE_LONGLONG(0);
    cleardatamaxval_ = GOOGLE_LONGLONG(0);
    cleardatafangcondation_ = 0;
    cleardatachicondation_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cleardatainitshoot_ = GOOGLE_LONGLONG(0);
    cleardatainitcapture_ = GOOGLE_LONGLONG(0);
    cleardatainitdrawrate_ = 0;
  }
  huandangrange_.Clear();
  dangchirange_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FishAlgorithmSetup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 HuanChangTimes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &huanchangtimes_)));
          set_has_huanchangtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_HuanDangRange;
        break;
      }

      // repeated .proto_ff.HuanDangRange HuanDangRange = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HuanDangRange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_huandangrange()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_HuanDangRange;
        if (input->ExpectTag(26)) goto parse_DangChiRange;
        break;
      }

      // repeated .proto_ff.DangChiRange DangChiRange = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DangChiRange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dangchirange()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_DangChiRange;
        if (input->ExpectTag(32)) goto parse_HuanBiaoLiuShuiVal;
        break;
      }

      // optional int64 HuanBiaoLiuShuiVal = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HuanBiaoLiuShuiVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &huanbiaoliushuival_)));
          set_has_huanbiaoliushuival();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_PoolInitBFB;
        break;
      }

      // optional int64 PoolInitBFB = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PoolInitBFB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &poolinitbfb_)));
          set_has_poolinitbfb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ClearDataMaxVal;
        break;
      }

      // optional int64 ClearDataMaxVal = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ClearDataMaxVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cleardatamaxval_)));
          set_has_cleardatamaxval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_ClearDataFangCondation;
        break;
      }

      // optional double ClearDataFangCondation = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ClearDataFangCondation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cleardatafangcondation_)));
          set_has_cleardatafangcondation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_ClearDataChiCondation;
        break;
      }

      // optional double ClearDataChiCondation = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ClearDataChiCondation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cleardatachicondation_)));
          set_has_cleardatachicondation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ClearDataInitShoot;
        break;
      }

      // optional int64 ClearDataInitShoot = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ClearDataInitShoot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cleardatainitshoot_)));
          set_has_cleardatainitshoot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ClearDataInitCapture;
        break;
      }

      // optional int64 ClearDataInitCapture = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ClearDataInitCapture:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cleardatainitcapture_)));
          set_has_cleardatainitcapture();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_ClearDataInitDrawRate;
        break;
      }

      // optional double ClearDataInitDrawRate = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ClearDataInitDrawRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cleardatainitdrawrate_)));
          set_has_cleardatainitdrawrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FishAlgorithmSetup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 HuanChangTimes = 1;
  if (has_huanchangtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->huanchangtimes(), output);
  }

  // repeated .proto_ff.HuanDangRange HuanDangRange = 2;
  for (int i = 0; i < this->huandangrange_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->huandangrange(i), output);
  }

  // repeated .proto_ff.DangChiRange DangChiRange = 3;
  for (int i = 0; i < this->dangchirange_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dangchirange(i), output);
  }

  // optional int64 HuanBiaoLiuShuiVal = 4;
  if (has_huanbiaoliushuival()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->huanbiaoliushuival(), output);
  }

  // optional int64 PoolInitBFB = 5;
  if (has_poolinitbfb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->poolinitbfb(), output);
  }

  // optional int64 ClearDataMaxVal = 6;
  if (has_cleardatamaxval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->cleardatamaxval(), output);
  }

  // optional double ClearDataFangCondation = 7;
  if (has_cleardatafangcondation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->cleardatafangcondation(), output);
  }

  // optional double ClearDataChiCondation = 8;
  if (has_cleardatachicondation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->cleardatachicondation(), output);
  }

  // optional int64 ClearDataInitShoot = 9;
  if (has_cleardatainitshoot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->cleardatainitshoot(), output);
  }

  // optional int64 ClearDataInitCapture = 10;
  if (has_cleardatainitcapture()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->cleardatainitcapture(), output);
  }

  // optional double ClearDataInitDrawRate = 11;
  if (has_cleardatainitdrawrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->cleardatainitdrawrate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FishAlgorithmSetup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 HuanChangTimes = 1;
  if (has_huanchangtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->huanchangtimes(), target);
  }

  // repeated .proto_ff.HuanDangRange HuanDangRange = 2;
  for (int i = 0; i < this->huandangrange_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->huandangrange(i), target);
  }

  // repeated .proto_ff.DangChiRange DangChiRange = 3;
  for (int i = 0; i < this->dangchirange_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dangchirange(i), target);
  }

  // optional int64 HuanBiaoLiuShuiVal = 4;
  if (has_huanbiaoliushuival()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->huanbiaoliushuival(), target);
  }

  // optional int64 PoolInitBFB = 5;
  if (has_poolinitbfb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->poolinitbfb(), target);
  }

  // optional int64 ClearDataMaxVal = 6;
  if (has_cleardatamaxval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->cleardatamaxval(), target);
  }

  // optional double ClearDataFangCondation = 7;
  if (has_cleardatafangcondation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->cleardatafangcondation(), target);
  }

  // optional double ClearDataChiCondation = 8;
  if (has_cleardatachicondation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->cleardatachicondation(), target);
  }

  // optional int64 ClearDataInitShoot = 9;
  if (has_cleardatainitshoot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->cleardatainitshoot(), target);
  }

  // optional int64 ClearDataInitCapture = 10;
  if (has_cleardatainitcapture()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->cleardatainitcapture(), target);
  }

  // optional double ClearDataInitDrawRate = 11;
  if (has_cleardatainitdrawrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->cleardatainitdrawrate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FishAlgorithmSetup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 HuanChangTimes = 1;
    if (has_huanchangtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->huanchangtimes());
    }

    // optional int64 HuanBiaoLiuShuiVal = 4;
    if (has_huanbiaoliushuival()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->huanbiaoliushuival());
    }

    // optional int64 PoolInitBFB = 5;
    if (has_poolinitbfb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->poolinitbfb());
    }

    // optional int64 ClearDataMaxVal = 6;
    if (has_cleardatamaxval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cleardatamaxval());
    }

    // optional double ClearDataFangCondation = 7;
    if (has_cleardatafangcondation()) {
      total_size += 1 + 8;
    }

    // optional double ClearDataChiCondation = 8;
    if (has_cleardatachicondation()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 ClearDataInitShoot = 9;
    if (has_cleardatainitshoot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cleardatainitshoot());
    }

    // optional int64 ClearDataInitCapture = 10;
    if (has_cleardatainitcapture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cleardatainitcapture());
    }

    // optional double ClearDataInitDrawRate = 11;
    if (has_cleardatainitdrawrate()) {
      total_size += 1 + 8;
    }

  }
  // repeated .proto_ff.HuanDangRange HuanDangRange = 2;
  total_size += 1 * this->huandangrange_size();
  for (int i = 0; i < this->huandangrange_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->huandangrange(i));
  }

  // repeated .proto_ff.DangChiRange DangChiRange = 3;
  total_size += 1 * this->dangchirange_size();
  for (int i = 0; i < this->dangchirange_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dangchirange(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishAlgorithmSetup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FishAlgorithmSetup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FishAlgorithmSetup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FishAlgorithmSetup::MergeFrom(const FishAlgorithmSetup& from) {
  GOOGLE_CHECK_NE(&from, this);
  huandangrange_.MergeFrom(from.huandangrange_);
  dangchirange_.MergeFrom(from.dangchirange_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_huanchangtimes()) {
      set_huanchangtimes(from.huanchangtimes());
    }
    if (from.has_huanbiaoliushuival()) {
      set_huanbiaoliushuival(from.huanbiaoliushuival());
    }
    if (from.has_poolinitbfb()) {
      set_poolinitbfb(from.poolinitbfb());
    }
    if (from.has_cleardatamaxval()) {
      set_cleardatamaxval(from.cleardatamaxval());
    }
    if (from.has_cleardatafangcondation()) {
      set_cleardatafangcondation(from.cleardatafangcondation());
    }
    if (from.has_cleardatachicondation()) {
      set_cleardatachicondation(from.cleardatachicondation());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cleardatainitshoot()) {
      set_cleardatainitshoot(from.cleardatainitshoot());
    }
    if (from.has_cleardatainitcapture()) {
      set_cleardatainitcapture(from.cleardatainitcapture());
    }
    if (from.has_cleardatainitdrawrate()) {
      set_cleardatainitdrawrate(from.cleardatainitdrawrate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FishAlgorithmSetup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishAlgorithmSetup::CopyFrom(const FishAlgorithmSetup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishAlgorithmSetup::IsInitialized() const {

  return true;
}

void FishAlgorithmSetup::Swap(FishAlgorithmSetup* other) {
  if (other != this) {
    std::swap(huanchangtimes_, other->huanchangtimes_);
    huandangrange_.Swap(&other->huandangrange_);
    dangchirange_.Swap(&other->dangchirange_);
    std::swap(huanbiaoliushuival_, other->huanbiaoliushuival_);
    std::swap(poolinitbfb_, other->poolinitbfb_);
    std::swap(cleardatamaxval_, other->cleardatamaxval_);
    std::swap(cleardatafangcondation_, other->cleardatafangcondation_);
    std::swap(cleardatachicondation_, other->cleardatachicondation_);
    std::swap(cleardatainitshoot_, other->cleardatainitshoot_);
    std::swap(cleardatainitcapture_, other->cleardatainitcapture_);
    std::swap(cleardatainitdrawrate_, other->cleardatainitdrawrate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FishAlgorithmSetup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishAlgorithmSetup_descriptor_;
  metadata.reflection = FishAlgorithmSetup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FishAlgorithmFileName::kFileNameChi1FieldNumber;
const int FishAlgorithmFileName::kFileNameChi2FieldNumber;
const int FishAlgorithmFileName::kFileNameChi5FieldNumber;
const int FishAlgorithmFileName::kFileNameChi10FieldNumber;
const int FishAlgorithmFileName::kFileNameChi20FieldNumber;
const int FishAlgorithmFileName::kFileNameChi50FieldNumber;
const int FishAlgorithmFileName::kFileNameChi100FieldNumber;
const int FishAlgorithmFileName::kFileNameChi200FieldNumber;
const int FishAlgorithmFileName::kFileNameFang1FieldNumber;
const int FishAlgorithmFileName::kFileNameFang2FieldNumber;
const int FishAlgorithmFileName::kFileNameFang5FieldNumber;
const int FishAlgorithmFileName::kFileNameFang10FieldNumber;
const int FishAlgorithmFileName::kFileNameFang20FieldNumber;
const int FishAlgorithmFileName::kFileNameFang50FieldNumber;
const int FishAlgorithmFileName::kFileNameFang100FieldNumber;
const int FishAlgorithmFileName::kFileNameFang200FieldNumber;
#endif  // !_MSC_VER

FishAlgorithmFileName::FishAlgorithmFileName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FishAlgorithmFileName::InitAsDefaultInstance() {
}

FishAlgorithmFileName::FishAlgorithmFileName(const FishAlgorithmFileName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FishAlgorithmFileName::SharedCtor() {
  _cached_size_ = 0;
  filenamechi1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filenamechi2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filenamechi5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filenamechi10_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filenamechi20_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filenamechi50_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filenamechi100_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filenamechi200_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filenamefang1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filenamefang2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filenamefang5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filenamefang10_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filenamefang20_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filenamefang50_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filenamefang100_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filenamefang200_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FishAlgorithmFileName::~FishAlgorithmFileName() {
  SharedDtor();
}

void FishAlgorithmFileName::SharedDtor() {
  if (filenamechi1_ != &::google::protobuf::internal::kEmptyString) {
    delete filenamechi1_;
  }
  if (filenamechi2_ != &::google::protobuf::internal::kEmptyString) {
    delete filenamechi2_;
  }
  if (filenamechi5_ != &::google::protobuf::internal::kEmptyString) {
    delete filenamechi5_;
  }
  if (filenamechi10_ != &::google::protobuf::internal::kEmptyString) {
    delete filenamechi10_;
  }
  if (filenamechi20_ != &::google::protobuf::internal::kEmptyString) {
    delete filenamechi20_;
  }
  if (filenamechi50_ != &::google::protobuf::internal::kEmptyString) {
    delete filenamechi50_;
  }
  if (filenamechi100_ != &::google::protobuf::internal::kEmptyString) {
    delete filenamechi100_;
  }
  if (filenamechi200_ != &::google::protobuf::internal::kEmptyString) {
    delete filenamechi200_;
  }
  if (filenamefang1_ != &::google::protobuf::internal::kEmptyString) {
    delete filenamefang1_;
  }
  if (filenamefang2_ != &::google::protobuf::internal::kEmptyString) {
    delete filenamefang2_;
  }
  if (filenamefang5_ != &::google::protobuf::internal::kEmptyString) {
    delete filenamefang5_;
  }
  if (filenamefang10_ != &::google::protobuf::internal::kEmptyString) {
    delete filenamefang10_;
  }
  if (filenamefang20_ != &::google::protobuf::internal::kEmptyString) {
    delete filenamefang20_;
  }
  if (filenamefang50_ != &::google::protobuf::internal::kEmptyString) {
    delete filenamefang50_;
  }
  if (filenamefang100_ != &::google::protobuf::internal::kEmptyString) {
    delete filenamefang100_;
  }
  if (filenamefang200_ != &::google::protobuf::internal::kEmptyString) {
    delete filenamefang200_;
  }
  if (this != default_instance_) {
  }
}

void FishAlgorithmFileName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishAlgorithmFileName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishAlgorithmFileName_descriptor_;
}

const FishAlgorithmFileName& FishAlgorithmFileName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

FishAlgorithmFileName* FishAlgorithmFileName::default_instance_ = NULL;

FishAlgorithmFileName* FishAlgorithmFileName::New() const {
  return new FishAlgorithmFileName;
}

void FishAlgorithmFileName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filenamechi1()) {
      if (filenamechi1_ != &::google::protobuf::internal::kEmptyString) {
        filenamechi1_->clear();
      }
    }
    if (has_filenamechi2()) {
      if (filenamechi2_ != &::google::protobuf::internal::kEmptyString) {
        filenamechi2_->clear();
      }
    }
    if (has_filenamechi5()) {
      if (filenamechi5_ != &::google::protobuf::internal::kEmptyString) {
        filenamechi5_->clear();
      }
    }
    if (has_filenamechi10()) {
      if (filenamechi10_ != &::google::protobuf::internal::kEmptyString) {
        filenamechi10_->clear();
      }
    }
    if (has_filenamechi20()) {
      if (filenamechi20_ != &::google::protobuf::internal::kEmptyString) {
        filenamechi20_->clear();
      }
    }
    if (has_filenamechi50()) {
      if (filenamechi50_ != &::google::protobuf::internal::kEmptyString) {
        filenamechi50_->clear();
      }
    }
    if (has_filenamechi100()) {
      if (filenamechi100_ != &::google::protobuf::internal::kEmptyString) {
        filenamechi100_->clear();
      }
    }
    if (has_filenamechi200()) {
      if (filenamechi200_ != &::google::protobuf::internal::kEmptyString) {
        filenamechi200_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_filenamefang1()) {
      if (filenamefang1_ != &::google::protobuf::internal::kEmptyString) {
        filenamefang1_->clear();
      }
    }
    if (has_filenamefang2()) {
      if (filenamefang2_ != &::google::protobuf::internal::kEmptyString) {
        filenamefang2_->clear();
      }
    }
    if (has_filenamefang5()) {
      if (filenamefang5_ != &::google::protobuf::internal::kEmptyString) {
        filenamefang5_->clear();
      }
    }
    if (has_filenamefang10()) {
      if (filenamefang10_ != &::google::protobuf::internal::kEmptyString) {
        filenamefang10_->clear();
      }
    }
    if (has_filenamefang20()) {
      if (filenamefang20_ != &::google::protobuf::internal::kEmptyString) {
        filenamefang20_->clear();
      }
    }
    if (has_filenamefang50()) {
      if (filenamefang50_ != &::google::protobuf::internal::kEmptyString) {
        filenamefang50_->clear();
      }
    }
    if (has_filenamefang100()) {
      if (filenamefang100_ != &::google::protobuf::internal::kEmptyString) {
        filenamefang100_->clear();
      }
    }
    if (has_filenamefang200()) {
      if (filenamefang200_ != &::google::protobuf::internal::kEmptyString) {
        filenamefang200_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FishAlgorithmFileName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string FileNameChi1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filenamechi1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filenamechi1().data(), this->filenamechi1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_FileNameChi2;
        break;
      }

      // optional string FileNameChi2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FileNameChi2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filenamechi2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filenamechi2().data(), this->filenamechi2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_FileNameChi5;
        break;
      }

      // optional string FileNameChi5 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FileNameChi5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filenamechi5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filenamechi5().data(), this->filenamechi5().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_FileNameChi10;
        break;
      }

      // optional string FileNameChi10 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FileNameChi10:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filenamechi10()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filenamechi10().data(), this->filenamechi10().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_FileNameChi20;
        break;
      }

      // optional string FileNameChi20 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FileNameChi20:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filenamechi20()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filenamechi20().data(), this->filenamechi20().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_FileNameChi50;
        break;
      }

      // optional string FileNameChi50 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FileNameChi50:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filenamechi50()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filenamechi50().data(), this->filenamechi50().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_FileNameChi100;
        break;
      }

      // optional string FileNameChi100 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FileNameChi100:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filenamechi100()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filenamechi100().data(), this->filenamechi100().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_FileNameChi200;
        break;
      }

      // optional string FileNameChi200 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FileNameChi200:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filenamechi200()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filenamechi200().data(), this->filenamechi200().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_FileNameFang1;
        break;
      }

      // optional string FileNameFang1 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FileNameFang1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filenamefang1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filenamefang1().data(), this->filenamefang1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_FileNameFang2;
        break;
      }

      // optional string FileNameFang2 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FileNameFang2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filenamefang2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filenamefang2().data(), this->filenamefang2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_FileNameFang5;
        break;
      }

      // optional string FileNameFang5 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FileNameFang5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filenamefang5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filenamefang5().data(), this->filenamefang5().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_FileNameFang10;
        break;
      }

      // optional string FileNameFang10 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FileNameFang10:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filenamefang10()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filenamefang10().data(), this->filenamefang10().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_FileNameFang20;
        break;
      }

      // optional string FileNameFang20 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FileNameFang20:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filenamefang20()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filenamefang20().data(), this->filenamefang20().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_FileNameFang50;
        break;
      }

      // optional string FileNameFang50 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FileNameFang50:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filenamefang50()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filenamefang50().data(), this->filenamefang50().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_FileNameFang100;
        break;
      }

      // optional string FileNameFang100 = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FileNameFang100:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filenamefang100()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filenamefang100().data(), this->filenamefang100().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_FileNameFang200;
        break;
      }

      // optional string FileNameFang200 = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FileNameFang200:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filenamefang200()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filenamefang200().data(), this->filenamefang200().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FishAlgorithmFileName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string FileNameChi1 = 1;
  if (has_filenamechi1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filenamechi1().data(), this->filenamechi1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filenamechi1(), output);
  }

  // optional string FileNameChi2 = 2;
  if (has_filenamechi2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filenamechi2().data(), this->filenamechi2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->filenamechi2(), output);
  }

  // optional string FileNameChi5 = 3;
  if (has_filenamechi5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filenamechi5().data(), this->filenamechi5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->filenamechi5(), output);
  }

  // optional string FileNameChi10 = 4;
  if (has_filenamechi10()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filenamechi10().data(), this->filenamechi10().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->filenamechi10(), output);
  }

  // optional string FileNameChi20 = 5;
  if (has_filenamechi20()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filenamechi20().data(), this->filenamechi20().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->filenamechi20(), output);
  }

  // optional string FileNameChi50 = 6;
  if (has_filenamechi50()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filenamechi50().data(), this->filenamechi50().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->filenamechi50(), output);
  }

  // optional string FileNameChi100 = 7;
  if (has_filenamechi100()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filenamechi100().data(), this->filenamechi100().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->filenamechi100(), output);
  }

  // optional string FileNameChi200 = 8;
  if (has_filenamechi200()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filenamechi200().data(), this->filenamechi200().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->filenamechi200(), output);
  }

  // optional string FileNameFang1 = 11;
  if (has_filenamefang1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filenamefang1().data(), this->filenamefang1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->filenamefang1(), output);
  }

  // optional string FileNameFang2 = 12;
  if (has_filenamefang2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filenamefang2().data(), this->filenamefang2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->filenamefang2(), output);
  }

  // optional string FileNameFang5 = 13;
  if (has_filenamefang5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filenamefang5().data(), this->filenamefang5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->filenamefang5(), output);
  }

  // optional string FileNameFang10 = 14;
  if (has_filenamefang10()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filenamefang10().data(), this->filenamefang10().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->filenamefang10(), output);
  }

  // optional string FileNameFang20 = 15;
  if (has_filenamefang20()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filenamefang20().data(), this->filenamefang20().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->filenamefang20(), output);
  }

  // optional string FileNameFang50 = 16;
  if (has_filenamefang50()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filenamefang50().data(), this->filenamefang50().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->filenamefang50(), output);
  }

  // optional string FileNameFang100 = 17;
  if (has_filenamefang100()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filenamefang100().data(), this->filenamefang100().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->filenamefang100(), output);
  }

  // optional string FileNameFang200 = 18;
  if (has_filenamefang200()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filenamefang200().data(), this->filenamefang200().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->filenamefang200(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FishAlgorithmFileName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string FileNameChi1 = 1;
  if (has_filenamechi1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filenamechi1().data(), this->filenamechi1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filenamechi1(), target);
  }

  // optional string FileNameChi2 = 2;
  if (has_filenamechi2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filenamechi2().data(), this->filenamechi2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filenamechi2(), target);
  }

  // optional string FileNameChi5 = 3;
  if (has_filenamechi5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filenamechi5().data(), this->filenamechi5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filenamechi5(), target);
  }

  // optional string FileNameChi10 = 4;
  if (has_filenamechi10()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filenamechi10().data(), this->filenamechi10().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filenamechi10(), target);
  }

  // optional string FileNameChi20 = 5;
  if (has_filenamechi20()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filenamechi20().data(), this->filenamechi20().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->filenamechi20(), target);
  }

  // optional string FileNameChi50 = 6;
  if (has_filenamechi50()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filenamechi50().data(), this->filenamechi50().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->filenamechi50(), target);
  }

  // optional string FileNameChi100 = 7;
  if (has_filenamechi100()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filenamechi100().data(), this->filenamechi100().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->filenamechi100(), target);
  }

  // optional string FileNameChi200 = 8;
  if (has_filenamechi200()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filenamechi200().data(), this->filenamechi200().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->filenamechi200(), target);
  }

  // optional string FileNameFang1 = 11;
  if (has_filenamefang1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filenamefang1().data(), this->filenamefang1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->filenamefang1(), target);
  }

  // optional string FileNameFang2 = 12;
  if (has_filenamefang2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filenamefang2().data(), this->filenamefang2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->filenamefang2(), target);
  }

  // optional string FileNameFang5 = 13;
  if (has_filenamefang5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filenamefang5().data(), this->filenamefang5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->filenamefang5(), target);
  }

  // optional string FileNameFang10 = 14;
  if (has_filenamefang10()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filenamefang10().data(), this->filenamefang10().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->filenamefang10(), target);
  }

  // optional string FileNameFang20 = 15;
  if (has_filenamefang20()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filenamefang20().data(), this->filenamefang20().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->filenamefang20(), target);
  }

  // optional string FileNameFang50 = 16;
  if (has_filenamefang50()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filenamefang50().data(), this->filenamefang50().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->filenamefang50(), target);
  }

  // optional string FileNameFang100 = 17;
  if (has_filenamefang100()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filenamefang100().data(), this->filenamefang100().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->filenamefang100(), target);
  }

  // optional string FileNameFang200 = 18;
  if (has_filenamefang200()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filenamefang200().data(), this->filenamefang200().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->filenamefang200(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FishAlgorithmFileName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string FileNameChi1 = 1;
    if (has_filenamechi1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filenamechi1());
    }

    // optional string FileNameChi2 = 2;
    if (has_filenamechi2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filenamechi2());
    }

    // optional string FileNameChi5 = 3;
    if (has_filenamechi5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filenamechi5());
    }

    // optional string FileNameChi10 = 4;
    if (has_filenamechi10()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filenamechi10());
    }

    // optional string FileNameChi20 = 5;
    if (has_filenamechi20()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filenamechi20());
    }

    // optional string FileNameChi50 = 6;
    if (has_filenamechi50()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filenamechi50());
    }

    // optional string FileNameChi100 = 7;
    if (has_filenamechi100()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filenamechi100());
    }

    // optional string FileNameChi200 = 8;
    if (has_filenamechi200()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filenamechi200());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string FileNameFang1 = 11;
    if (has_filenamefang1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filenamefang1());
    }

    // optional string FileNameFang2 = 12;
    if (has_filenamefang2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filenamefang2());
    }

    // optional string FileNameFang5 = 13;
    if (has_filenamefang5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filenamefang5());
    }

    // optional string FileNameFang10 = 14;
    if (has_filenamefang10()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filenamefang10());
    }

    // optional string FileNameFang20 = 15;
    if (has_filenamefang20()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filenamefang20());
    }

    // optional string FileNameFang50 = 16;
    if (has_filenamefang50()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filenamefang50());
    }

    // optional string FileNameFang100 = 17;
    if (has_filenamefang100()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filenamefang100());
    }

    // optional string FileNameFang200 = 18;
    if (has_filenamefang200()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filenamefang200());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishAlgorithmFileName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FishAlgorithmFileName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FishAlgorithmFileName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FishAlgorithmFileName::MergeFrom(const FishAlgorithmFileName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filenamechi1()) {
      set_filenamechi1(from.filenamechi1());
    }
    if (from.has_filenamechi2()) {
      set_filenamechi2(from.filenamechi2());
    }
    if (from.has_filenamechi5()) {
      set_filenamechi5(from.filenamechi5());
    }
    if (from.has_filenamechi10()) {
      set_filenamechi10(from.filenamechi10());
    }
    if (from.has_filenamechi20()) {
      set_filenamechi20(from.filenamechi20());
    }
    if (from.has_filenamechi50()) {
      set_filenamechi50(from.filenamechi50());
    }
    if (from.has_filenamechi100()) {
      set_filenamechi100(from.filenamechi100());
    }
    if (from.has_filenamechi200()) {
      set_filenamechi200(from.filenamechi200());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_filenamefang1()) {
      set_filenamefang1(from.filenamefang1());
    }
    if (from.has_filenamefang2()) {
      set_filenamefang2(from.filenamefang2());
    }
    if (from.has_filenamefang5()) {
      set_filenamefang5(from.filenamefang5());
    }
    if (from.has_filenamefang10()) {
      set_filenamefang10(from.filenamefang10());
    }
    if (from.has_filenamefang20()) {
      set_filenamefang20(from.filenamefang20());
    }
    if (from.has_filenamefang50()) {
      set_filenamefang50(from.filenamefang50());
    }
    if (from.has_filenamefang100()) {
      set_filenamefang100(from.filenamefang100());
    }
    if (from.has_filenamefang200()) {
      set_filenamefang200(from.filenamefang200());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FishAlgorithmFileName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishAlgorithmFileName::CopyFrom(const FishAlgorithmFileName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishAlgorithmFileName::IsInitialized() const {

  return true;
}

void FishAlgorithmFileName::Swap(FishAlgorithmFileName* other) {
  if (other != this) {
    std::swap(filenamechi1_, other->filenamechi1_);
    std::swap(filenamechi2_, other->filenamechi2_);
    std::swap(filenamechi5_, other->filenamechi5_);
    std::swap(filenamechi10_, other->filenamechi10_);
    std::swap(filenamechi20_, other->filenamechi20_);
    std::swap(filenamechi50_, other->filenamechi50_);
    std::swap(filenamechi100_, other->filenamechi100_);
    std::swap(filenamechi200_, other->filenamechi200_);
    std::swap(filenamefang1_, other->filenamefang1_);
    std::swap(filenamefang2_, other->filenamefang2_);
    std::swap(filenamefang5_, other->filenamefang5_);
    std::swap(filenamefang10_, other->filenamefang10_);
    std::swap(filenamefang20_, other->filenamefang20_);
    std::swap(filenamefang50_, other->filenamefang50_);
    std::swap(filenamefang100_, other->filenamefang100_);
    std::swap(filenamefang200_, other->filenamefang200_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FishAlgorithmFileName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishAlgorithmFileName_descriptor_;
  metadata.reflection = FishAlgorithmFileName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FishAlgorithmCsvItem::kValueFieldNumber;
#endif  // !_MSC_VER

FishAlgorithmCsvItem::FishAlgorithmCsvItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FishAlgorithmCsvItem::InitAsDefaultInstance() {
}

FishAlgorithmCsvItem::FishAlgorithmCsvItem(const FishAlgorithmCsvItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FishAlgorithmCsvItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FishAlgorithmCsvItem::~FishAlgorithmCsvItem() {
  SharedDtor();
}

void FishAlgorithmCsvItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FishAlgorithmCsvItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishAlgorithmCsvItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishAlgorithmCsvItem_descriptor_;
}

const FishAlgorithmCsvItem& FishAlgorithmCsvItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

FishAlgorithmCsvItem* FishAlgorithmCsvItem::default_instance_ = NULL;

FishAlgorithmCsvItem* FishAlgorithmCsvItem::New() const {
  return new FishAlgorithmCsvItem;
}

void FishAlgorithmCsvItem::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FishAlgorithmCsvItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FishAlgorithmCsvItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FishAlgorithmCsvItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FishAlgorithmCsvItem::ByteSize() const {
  int total_size = 0;

  // repeated int32 value = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->value(i));
    }
    total_size += 1 * this->value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishAlgorithmCsvItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FishAlgorithmCsvItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FishAlgorithmCsvItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FishAlgorithmCsvItem::MergeFrom(const FishAlgorithmCsvItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FishAlgorithmCsvItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishAlgorithmCsvItem::CopyFrom(const FishAlgorithmCsvItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishAlgorithmCsvItem::IsInitialized() const {

  return true;
}

void FishAlgorithmCsvItem::Swap(FishAlgorithmCsvItem* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FishAlgorithmCsvItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishAlgorithmCsvItem_descriptor_;
  metadata.reflection = FishAlgorithmCsvItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FishAlgorithmCsv::kItemFieldNumber;
#endif  // !_MSC_VER

FishAlgorithmCsv::FishAlgorithmCsv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FishAlgorithmCsv::InitAsDefaultInstance() {
}

FishAlgorithmCsv::FishAlgorithmCsv(const FishAlgorithmCsv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FishAlgorithmCsv::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FishAlgorithmCsv::~FishAlgorithmCsv() {
  SharedDtor();
}

void FishAlgorithmCsv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FishAlgorithmCsv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishAlgorithmCsv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishAlgorithmCsv_descriptor_;
}

const FishAlgorithmCsv& FishAlgorithmCsv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

FishAlgorithmCsv* FishAlgorithmCsv::default_instance_ = NULL;

FishAlgorithmCsv* FishAlgorithmCsv::New() const {
  return new FishAlgorithmCsv;
}

void FishAlgorithmCsv::Clear() {
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FishAlgorithmCsv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FishAlgorithmCsvItem item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FishAlgorithmCsv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FishAlgorithmCsvItem item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FishAlgorithmCsv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FishAlgorithmCsvItem item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FishAlgorithmCsv::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FishAlgorithmCsvItem item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishAlgorithmCsv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FishAlgorithmCsv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FishAlgorithmCsv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FishAlgorithmCsv::MergeFrom(const FishAlgorithmCsv& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FishAlgorithmCsv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishAlgorithmCsv::CopyFrom(const FishAlgorithmCsv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishAlgorithmCsv::IsInitialized() const {

  return true;
}

void FishAlgorithmCsv::Swap(FishAlgorithmCsv* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FishAlgorithmCsv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishAlgorithmCsv_descriptor_;
  metadata.reflection = FishAlgorithmCsv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FishNormalSetup::kSwitchBossTimeFieldNumber;
const int FishNormalSetup::kSwitchSceneTimeFieldNumber;
const int FishNormalSetup::kInitSceneIndexFieldNumber;
const int FishNormalSetup::kAwardPoolSaveToDBTimeFieldNumber;
const int FishNormalSetup::kClearTraceTimeFieldNumber;
const int FishNormalSetup::kCannonLevelValFieldNumber;
const int FishNormalSetup::kCannonShowNumFieldNumber;
const int FishNormalSetup::kBulletHarmAddBFBFieldNumber;
const int FishNormalSetup::kBulletCountInScreenFieldNumber;
const int FishNormalSetup::kTotalSceneCountFieldNumber;
const int FishNormalSetup::kScreenFishMaxCountFieldNumber;
const int FishNormalSetup::kClientNotOperateTipTimesFieldNumber;
const int FishNormalSetup::kClientExitTimesFieldNumber;
const int FishNormalSetup::kTestFishMustKilledFieldNumber;
const int FishNormalSetup::kClientLessMoneyTipFieldNumber;
const int FishNormalSetup::kTurnTableCalcMinByOneJuFieldNumber;
const int FishNormalSetup::kUserSettlementTimesFieldNumber;
const int FishNormalSetup::kTipBaoJiMoneyFieldNumber;
const int FishNormalSetup::kBatchSendFishesIntervalFieldNumber;
const int FishNormalSetup::kBatchSendFishesCountFieldNumber;
const int FishNormalSetup::kSwitchScenePrepareTimeFieldNumber;
const int FishNormalSetup::kSwitchSceneFishGoAwayTimeFieldNumber;
#endif  // !_MSC_VER

FishNormalSetup::FishNormalSetup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FishNormalSetup::InitAsDefaultInstance() {
}

FishNormalSetup::FishNormalSetup(const FishNormalSetup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FishNormalSetup::SharedCtor() {
  _cached_size_ = 0;
  switchbosstime_ = 0;
  switchscenetime_ = 0;
  initsceneindex_ = 0;
  awardpoolsavetodbtime_ = 0;
  cleartracetime_ = 0;
  bulletcountinscreen_ = 0;
  totalscenecount_ = 0;
  screenfishmaxcount_ = 0;
  clientnotoperatetiptimes_ = 0;
  clientexittimes_ = 0;
  testfishmustkilled_ = 0;
  clientlessmoneytip_ = 0;
  turntablecalcminbyoneju_ = 0;
  usersettlementtimes_ = 0;
  tipbaojimoney_ = 0;
  batchsendfishesinterval_ = 0;
  batchsendfishescount_ = 0;
  switchscenepreparetime_ = 0;
  switchscenefishgoawaytime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FishNormalSetup::~FishNormalSetup() {
  SharedDtor();
}

void FishNormalSetup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FishNormalSetup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishNormalSetup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishNormalSetup_descriptor_;
}

const FishNormalSetup& FishNormalSetup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

FishNormalSetup* FishNormalSetup::default_instance_ = NULL;

FishNormalSetup* FishNormalSetup::New() const {
  return new FishNormalSetup;
}

void FishNormalSetup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    switchbosstime_ = 0;
    switchscenetime_ = 0;
    initsceneindex_ = 0;
    awardpoolsavetodbtime_ = 0;
    cleartracetime_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bulletcountinscreen_ = 0;
    totalscenecount_ = 0;
    screenfishmaxcount_ = 0;
    clientnotoperatetiptimes_ = 0;
    clientexittimes_ = 0;
    testfishmustkilled_ = 0;
    clientlessmoneytip_ = 0;
    turntablecalcminbyoneju_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    usersettlementtimes_ = 0;
    tipbaojimoney_ = 0;
    batchsendfishesinterval_ = 0;
    batchsendfishescount_ = 0;
    switchscenepreparetime_ = 0;
    switchscenefishgoawaytime_ = 0;
  }
  cannonlevelval_.Clear();
  cannonshownum_.Clear();
  bulletharmaddbfb_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FishNormalSetup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SwitchBossTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &switchbosstime_)));
          set_has_switchbosstime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SwitchSceneTime;
        break;
      }

      // optional int32 SwitchSceneTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SwitchSceneTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &switchscenetime_)));
          set_has_switchscenetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_InitSceneIndex;
        break;
      }

      // optional int32 InitSceneIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InitSceneIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &initsceneindex_)));
          set_has_initsceneindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_AwardPoolSaveToDBTime;
        break;
      }

      // optional int32 AwardPoolSaveToDBTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AwardPoolSaveToDBTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardpoolsavetodbtime_)));
          set_has_awardpoolsavetodbtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ClearTraceTime;
        break;
      }

      // optional int32 ClearTraceTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ClearTraceTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cleartracetime_)));
          set_has_cleartracetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_CannonLevelVal;
        break;
      }

      // repeated int32 CannonLevelVal = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CannonLevelVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_cannonlevelval())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cannonlevelval())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_CannonLevelVal;
        if (input->ExpectTag(56)) goto parse_CannonShowNum;
        break;
      }

      // repeated int32 CannonShowNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CannonShowNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_cannonshownum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cannonshownum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_CannonShowNum;
        if (input->ExpectTag(65)) goto parse_BulletHarmAddBFB;
        break;
      }

      // repeated double BulletHarmAddBFB = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_BulletHarmAddBFB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 65, input, this->mutable_bulletharmaddbfb())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_bulletharmaddbfb())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_BulletHarmAddBFB;
        if (input->ExpectTag(72)) goto parse_BulletCountInScreen;
        break;
      }

      // optional int32 BulletCountInScreen = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BulletCountInScreen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bulletcountinscreen_)));
          set_has_bulletcountinscreen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_TotalSceneCount;
        break;
      }

      // optional int32 TotalSceneCount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalSceneCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalscenecount_)));
          set_has_totalscenecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ScreenFishMaxCount;
        break;
      }

      // optional int32 ScreenFishMaxCount = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ScreenFishMaxCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screenfishmaxcount_)));
          set_has_screenfishmaxcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_ClientNotOperateTipTimes;
        break;
      }

      // optional int32 ClientNotOperateTipTimes = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ClientNotOperateTipTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientnotoperatetiptimes_)));
          set_has_clientnotoperatetiptimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_ClientExitTimes;
        break;
      }

      // optional int32 ClientExitTimes = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ClientExitTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientexittimes_)));
          set_has_clientexittimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_TestFishMustKilled;
        break;
      }

      // optional int32 TestFishMustKilled = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TestFishMustKilled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &testfishmustkilled_)));
          set_has_testfishmustkilled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_ClientLessMoneyTip;
        break;
      }

      // optional int32 ClientLessMoneyTip = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ClientLessMoneyTip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientlessmoneytip_)));
          set_has_clientlessmoneytip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_TurnTableCalcMinByOneJu;
        break;
      }

      // optional int32 TurnTableCalcMinByOneJu = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TurnTableCalcMinByOneJu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turntablecalcminbyoneju_)));
          set_has_turntablecalcminbyoneju();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_UserSettlementTimes;
        break;
      }

      // optional int32 UserSettlementTimes = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserSettlementTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usersettlementtimes_)));
          set_has_usersettlementtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_TipBaoJiMoney;
        break;
      }

      // optional int32 TipBaoJiMoney = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TipBaoJiMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tipbaojimoney_)));
          set_has_tipbaojimoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_BatchSendFishesInterval;
        break;
      }

      // optional int32 BatchSendFishesInterval = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BatchSendFishesInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batchsendfishesinterval_)));
          set_has_batchsendfishesinterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_BatchSendFishesCount;
        break;
      }

      // optional int32 BatchSendFishesCount = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BatchSendFishesCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batchsendfishescount_)));
          set_has_batchsendfishescount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_SwitchScenePrepareTime;
        break;
      }

      // optional int32 SwitchScenePrepareTime = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SwitchScenePrepareTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &switchscenepreparetime_)));
          set_has_switchscenepreparetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_SwitchSceneFishGoAwayTime;
        break;
      }

      // optional int32 SwitchSceneFishGoAwayTime = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SwitchSceneFishGoAwayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &switchscenefishgoawaytime_)));
          set_has_switchscenefishgoawaytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FishNormalSetup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 SwitchBossTime = 1;
  if (has_switchbosstime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->switchbosstime(), output);
  }

  // optional int32 SwitchSceneTime = 2;
  if (has_switchscenetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->switchscenetime(), output);
  }

  // optional int32 InitSceneIndex = 3;
  if (has_initsceneindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->initsceneindex(), output);
  }

  // optional int32 AwardPoolSaveToDBTime = 4;
  if (has_awardpoolsavetodbtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->awardpoolsavetodbtime(), output);
  }

  // optional int32 ClearTraceTime = 5;
  if (has_cleartracetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cleartracetime(), output);
  }

  // repeated int32 CannonLevelVal = 6;
  for (int i = 0; i < this->cannonlevelval_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->cannonlevelval(i), output);
  }

  // repeated int32 CannonShowNum = 7;
  for (int i = 0; i < this->cannonshownum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->cannonshownum(i), output);
  }

  // repeated double BulletHarmAddBFB = 8;
  for (int i = 0; i < this->bulletharmaddbfb_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      8, this->bulletharmaddbfb(i), output);
  }

  // optional int32 BulletCountInScreen = 9;
  if (has_bulletcountinscreen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bulletcountinscreen(), output);
  }

  // optional int32 TotalSceneCount = 10;
  if (has_totalscenecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->totalscenecount(), output);
  }

  // optional int32 ScreenFishMaxCount = 11;
  if (has_screenfishmaxcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->screenfishmaxcount(), output);
  }

  // optional int32 ClientNotOperateTipTimes = 12;
  if (has_clientnotoperatetiptimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->clientnotoperatetiptimes(), output);
  }

  // optional int32 ClientExitTimes = 13;
  if (has_clientexittimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->clientexittimes(), output);
  }

  // optional int32 TestFishMustKilled = 14;
  if (has_testfishmustkilled()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->testfishmustkilled(), output);
  }

  // optional int32 ClientLessMoneyTip = 15;
  if (has_clientlessmoneytip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->clientlessmoneytip(), output);
  }

  // optional int32 TurnTableCalcMinByOneJu = 16;
  if (has_turntablecalcminbyoneju()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->turntablecalcminbyoneju(), output);
  }

  // optional int32 UserSettlementTimes = 17;
  if (has_usersettlementtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->usersettlementtimes(), output);
  }

  // optional int32 TipBaoJiMoney = 18;
  if (has_tipbaojimoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->tipbaojimoney(), output);
  }

  // optional int32 BatchSendFishesInterval = 19;
  if (has_batchsendfishesinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->batchsendfishesinterval(), output);
  }

  // optional int32 BatchSendFishesCount = 20;
  if (has_batchsendfishescount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->batchsendfishescount(), output);
  }

  // optional int32 SwitchScenePrepareTime = 21;
  if (has_switchscenepreparetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->switchscenepreparetime(), output);
  }

  // optional int32 SwitchSceneFishGoAwayTime = 22;
  if (has_switchscenefishgoawaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->switchscenefishgoawaytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FishNormalSetup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 SwitchBossTime = 1;
  if (has_switchbosstime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->switchbosstime(), target);
  }

  // optional int32 SwitchSceneTime = 2;
  if (has_switchscenetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->switchscenetime(), target);
  }

  // optional int32 InitSceneIndex = 3;
  if (has_initsceneindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->initsceneindex(), target);
  }

  // optional int32 AwardPoolSaveToDBTime = 4;
  if (has_awardpoolsavetodbtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->awardpoolsavetodbtime(), target);
  }

  // optional int32 ClearTraceTime = 5;
  if (has_cleartracetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cleartracetime(), target);
  }

  // repeated int32 CannonLevelVal = 6;
  for (int i = 0; i < this->cannonlevelval_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->cannonlevelval(i), target);
  }

  // repeated int32 CannonShowNum = 7;
  for (int i = 0; i < this->cannonshownum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->cannonshownum(i), target);
  }

  // repeated double BulletHarmAddBFB = 8;
  for (int i = 0; i < this->bulletharmaddbfb_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(8, this->bulletharmaddbfb(i), target);
  }

  // optional int32 BulletCountInScreen = 9;
  if (has_bulletcountinscreen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bulletcountinscreen(), target);
  }

  // optional int32 TotalSceneCount = 10;
  if (has_totalscenecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->totalscenecount(), target);
  }

  // optional int32 ScreenFishMaxCount = 11;
  if (has_screenfishmaxcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->screenfishmaxcount(), target);
  }

  // optional int32 ClientNotOperateTipTimes = 12;
  if (has_clientnotoperatetiptimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->clientnotoperatetiptimes(), target);
  }

  // optional int32 ClientExitTimes = 13;
  if (has_clientexittimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->clientexittimes(), target);
  }

  // optional int32 TestFishMustKilled = 14;
  if (has_testfishmustkilled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->testfishmustkilled(), target);
  }

  // optional int32 ClientLessMoneyTip = 15;
  if (has_clientlessmoneytip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->clientlessmoneytip(), target);
  }

  // optional int32 TurnTableCalcMinByOneJu = 16;
  if (has_turntablecalcminbyoneju()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->turntablecalcminbyoneju(), target);
  }

  // optional int32 UserSettlementTimes = 17;
  if (has_usersettlementtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->usersettlementtimes(), target);
  }

  // optional int32 TipBaoJiMoney = 18;
  if (has_tipbaojimoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->tipbaojimoney(), target);
  }

  // optional int32 BatchSendFishesInterval = 19;
  if (has_batchsendfishesinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->batchsendfishesinterval(), target);
  }

  // optional int32 BatchSendFishesCount = 20;
  if (has_batchsendfishescount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->batchsendfishescount(), target);
  }

  // optional int32 SwitchScenePrepareTime = 21;
  if (has_switchscenepreparetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->switchscenepreparetime(), target);
  }

  // optional int32 SwitchSceneFishGoAwayTime = 22;
  if (has_switchscenefishgoawaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->switchscenefishgoawaytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FishNormalSetup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SwitchBossTime = 1;
    if (has_switchbosstime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->switchbosstime());
    }

    // optional int32 SwitchSceneTime = 2;
    if (has_switchscenetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->switchscenetime());
    }

    // optional int32 InitSceneIndex = 3;
    if (has_initsceneindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->initsceneindex());
    }

    // optional int32 AwardPoolSaveToDBTime = 4;
    if (has_awardpoolsavetodbtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardpoolsavetodbtime());
    }

    // optional int32 ClearTraceTime = 5;
    if (has_cleartracetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cleartracetime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 BulletCountInScreen = 9;
    if (has_bulletcountinscreen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bulletcountinscreen());
    }

    // optional int32 TotalSceneCount = 10;
    if (has_totalscenecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalscenecount());
    }

    // optional int32 ScreenFishMaxCount = 11;
    if (has_screenfishmaxcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screenfishmaxcount());
    }

    // optional int32 ClientNotOperateTipTimes = 12;
    if (has_clientnotoperatetiptimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clientnotoperatetiptimes());
    }

    // optional int32 ClientExitTimes = 13;
    if (has_clientexittimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clientexittimes());
    }

    // optional int32 TestFishMustKilled = 14;
    if (has_testfishmustkilled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->testfishmustkilled());
    }

    // optional int32 ClientLessMoneyTip = 15;
    if (has_clientlessmoneytip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clientlessmoneytip());
    }

    // optional int32 TurnTableCalcMinByOneJu = 16;
    if (has_turntablecalcminbyoneju()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turntablecalcminbyoneju());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 UserSettlementTimes = 17;
    if (has_usersettlementtimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usersettlementtimes());
    }

    // optional int32 TipBaoJiMoney = 18;
    if (has_tipbaojimoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tipbaojimoney());
    }

    // optional int32 BatchSendFishesInterval = 19;
    if (has_batchsendfishesinterval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->batchsendfishesinterval());
    }

    // optional int32 BatchSendFishesCount = 20;
    if (has_batchsendfishescount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->batchsendfishescount());
    }

    // optional int32 SwitchScenePrepareTime = 21;
    if (has_switchscenepreparetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->switchscenepreparetime());
    }

    // optional int32 SwitchSceneFishGoAwayTime = 22;
    if (has_switchscenefishgoawaytime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->switchscenefishgoawaytime());
    }

  }
  // repeated int32 CannonLevelVal = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->cannonlevelval_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cannonlevelval(i));
    }
    total_size += 1 * this->cannonlevelval_size() + data_size;
  }

  // repeated int32 CannonShowNum = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->cannonshownum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cannonshownum(i));
    }
    total_size += 1 * this->cannonshownum_size() + data_size;
  }

  // repeated double BulletHarmAddBFB = 8;
  {
    int data_size = 0;
    data_size = 8 * this->bulletharmaddbfb_size();
    total_size += 1 * this->bulletharmaddbfb_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishNormalSetup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FishNormalSetup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FishNormalSetup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FishNormalSetup::MergeFrom(const FishNormalSetup& from) {
  GOOGLE_CHECK_NE(&from, this);
  cannonlevelval_.MergeFrom(from.cannonlevelval_);
  cannonshownum_.MergeFrom(from.cannonshownum_);
  bulletharmaddbfb_.MergeFrom(from.bulletharmaddbfb_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_switchbosstime()) {
      set_switchbosstime(from.switchbosstime());
    }
    if (from.has_switchscenetime()) {
      set_switchscenetime(from.switchscenetime());
    }
    if (from.has_initsceneindex()) {
      set_initsceneindex(from.initsceneindex());
    }
    if (from.has_awardpoolsavetodbtime()) {
      set_awardpoolsavetodbtime(from.awardpoolsavetodbtime());
    }
    if (from.has_cleartracetime()) {
      set_cleartracetime(from.cleartracetime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bulletcountinscreen()) {
      set_bulletcountinscreen(from.bulletcountinscreen());
    }
    if (from.has_totalscenecount()) {
      set_totalscenecount(from.totalscenecount());
    }
    if (from.has_screenfishmaxcount()) {
      set_screenfishmaxcount(from.screenfishmaxcount());
    }
    if (from.has_clientnotoperatetiptimes()) {
      set_clientnotoperatetiptimes(from.clientnotoperatetiptimes());
    }
    if (from.has_clientexittimes()) {
      set_clientexittimes(from.clientexittimes());
    }
    if (from.has_testfishmustkilled()) {
      set_testfishmustkilled(from.testfishmustkilled());
    }
    if (from.has_clientlessmoneytip()) {
      set_clientlessmoneytip(from.clientlessmoneytip());
    }
    if (from.has_turntablecalcminbyoneju()) {
      set_turntablecalcminbyoneju(from.turntablecalcminbyoneju());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_usersettlementtimes()) {
      set_usersettlementtimes(from.usersettlementtimes());
    }
    if (from.has_tipbaojimoney()) {
      set_tipbaojimoney(from.tipbaojimoney());
    }
    if (from.has_batchsendfishesinterval()) {
      set_batchsendfishesinterval(from.batchsendfishesinterval());
    }
    if (from.has_batchsendfishescount()) {
      set_batchsendfishescount(from.batchsendfishescount());
    }
    if (from.has_switchscenepreparetime()) {
      set_switchscenepreparetime(from.switchscenepreparetime());
    }
    if (from.has_switchscenefishgoawaytime()) {
      set_switchscenefishgoawaytime(from.switchscenefishgoawaytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FishNormalSetup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishNormalSetup::CopyFrom(const FishNormalSetup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishNormalSetup::IsInitialized() const {

  return true;
}

void FishNormalSetup::Swap(FishNormalSetup* other) {
  if (other != this) {
    std::swap(switchbosstime_, other->switchbosstime_);
    std::swap(switchscenetime_, other->switchscenetime_);
    std::swap(initsceneindex_, other->initsceneindex_);
    std::swap(awardpoolsavetodbtime_, other->awardpoolsavetodbtime_);
    std::swap(cleartracetime_, other->cleartracetime_);
    cannonlevelval_.Swap(&other->cannonlevelval_);
    cannonshownum_.Swap(&other->cannonshownum_);
    bulletharmaddbfb_.Swap(&other->bulletharmaddbfb_);
    std::swap(bulletcountinscreen_, other->bulletcountinscreen_);
    std::swap(totalscenecount_, other->totalscenecount_);
    std::swap(screenfishmaxcount_, other->screenfishmaxcount_);
    std::swap(clientnotoperatetiptimes_, other->clientnotoperatetiptimes_);
    std::swap(clientexittimes_, other->clientexittimes_);
    std::swap(testfishmustkilled_, other->testfishmustkilled_);
    std::swap(clientlessmoneytip_, other->clientlessmoneytip_);
    std::swap(turntablecalcminbyoneju_, other->turntablecalcminbyoneju_);
    std::swap(usersettlementtimes_, other->usersettlementtimes_);
    std::swap(tipbaojimoney_, other->tipbaojimoney_);
    std::swap(batchsendfishesinterval_, other->batchsendfishesinterval_);
    std::swap(batchsendfishescount_, other->batchsendfishescount_);
    std::swap(switchscenepreparetime_, other->switchscenepreparetime_);
    std::swap(switchscenefishgoawaytime_, other->switchscenefishgoawaytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FishNormalSetup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishNormalSetup_descriptor_;
  metadata.reflection = FishNormalSetup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FishPoolSaveBaseMul::kValueFieldNumber;
#endif  // !_MSC_VER

FishPoolSaveBaseMul::FishPoolSaveBaseMul()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FishPoolSaveBaseMul::InitAsDefaultInstance() {
}

FishPoolSaveBaseMul::FishPoolSaveBaseMul(const FishPoolSaveBaseMul& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FishPoolSaveBaseMul::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FishPoolSaveBaseMul::~FishPoolSaveBaseMul() {
  SharedDtor();
}

void FishPoolSaveBaseMul::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FishPoolSaveBaseMul::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishPoolSaveBaseMul::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishPoolSaveBaseMul_descriptor_;
}

const FishPoolSaveBaseMul& FishPoolSaveBaseMul::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

FishPoolSaveBaseMul* FishPoolSaveBaseMul::default_instance_ = NULL;

FishPoolSaveBaseMul* FishPoolSaveBaseMul::New() const {
  return new FishPoolSaveBaseMul;
}

void FishPoolSaveBaseMul::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FishPoolSaveBaseMul::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FishPoolSaveBaseMul::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FishPoolSaveBaseMul::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FishPoolSaveBaseMul::ByteSize() const {
  int total_size = 0;

  // repeated int32 value = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->value(i));
    }
    total_size += 1 * this->value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishPoolSaveBaseMul::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FishPoolSaveBaseMul* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FishPoolSaveBaseMul*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FishPoolSaveBaseMul::MergeFrom(const FishPoolSaveBaseMul& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FishPoolSaveBaseMul::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishPoolSaveBaseMul::CopyFrom(const FishPoolSaveBaseMul& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishPoolSaveBaseMul::IsInitialized() const {

  return true;
}

void FishPoolSaveBaseMul::Swap(FishPoolSaveBaseMul* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FishPoolSaveBaseMul::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishPoolSaveBaseMul_descriptor_;
  metadata.reflection = FishPoolSaveBaseMul_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FishPoolSaveRelaCount::kValueFieldNumber;
#endif  // !_MSC_VER

FishPoolSaveRelaCount::FishPoolSaveRelaCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FishPoolSaveRelaCount::InitAsDefaultInstance() {
}

FishPoolSaveRelaCount::FishPoolSaveRelaCount(const FishPoolSaveRelaCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FishPoolSaveRelaCount::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FishPoolSaveRelaCount::~FishPoolSaveRelaCount() {
  SharedDtor();
}

void FishPoolSaveRelaCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FishPoolSaveRelaCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishPoolSaveRelaCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishPoolSaveRelaCount_descriptor_;
}

const FishPoolSaveRelaCount& FishPoolSaveRelaCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

FishPoolSaveRelaCount* FishPoolSaveRelaCount::default_instance_ = NULL;

FishPoolSaveRelaCount* FishPoolSaveRelaCount::New() const {
  return new FishPoolSaveRelaCount;
}

void FishPoolSaveRelaCount::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FishPoolSaveRelaCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FishPoolSaveRelaCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FishPoolSaveRelaCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FishPoolSaveRelaCount::ByteSize() const {
  int total_size = 0;

  // repeated int32 value = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->value(i));
    }
    total_size += 1 * this->value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishPoolSaveRelaCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FishPoolSaveRelaCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FishPoolSaveRelaCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FishPoolSaveRelaCount::MergeFrom(const FishPoolSaveRelaCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FishPoolSaveRelaCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishPoolSaveRelaCount::CopyFrom(const FishPoolSaveRelaCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishPoolSaveRelaCount::IsInitialized() const {

  return true;
}

void FishPoolSaveRelaCount::Swap(FishPoolSaveRelaCount* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FishPoolSaveRelaCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishPoolSaveRelaCount_descriptor_;
  metadata.reflection = FishPoolSaveRelaCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FishPoolSaveHitCountCfg::kValueFieldNumber;
#endif  // !_MSC_VER

FishPoolSaveHitCountCfg::FishPoolSaveHitCountCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FishPoolSaveHitCountCfg::InitAsDefaultInstance() {
}

FishPoolSaveHitCountCfg::FishPoolSaveHitCountCfg(const FishPoolSaveHitCountCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FishPoolSaveHitCountCfg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FishPoolSaveHitCountCfg::~FishPoolSaveHitCountCfg() {
  SharedDtor();
}

void FishPoolSaveHitCountCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FishPoolSaveHitCountCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishPoolSaveHitCountCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishPoolSaveHitCountCfg_descriptor_;
}

const FishPoolSaveHitCountCfg& FishPoolSaveHitCountCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

FishPoolSaveHitCountCfg* FishPoolSaveHitCountCfg::default_instance_ = NULL;

FishPoolSaveHitCountCfg* FishPoolSaveHitCountCfg::New() const {
  return new FishPoolSaveHitCountCfg;
}

void FishPoolSaveHitCountCfg::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FishPoolSaveHitCountCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FishPoolSaveHitCountCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FishPoolSaveHitCountCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FishPoolSaveHitCountCfg::ByteSize() const {
  int total_size = 0;

  // repeated int32 value = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->value(i));
    }
    total_size += 1 * this->value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishPoolSaveHitCountCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FishPoolSaveHitCountCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FishPoolSaveHitCountCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FishPoolSaveHitCountCfg::MergeFrom(const FishPoolSaveHitCountCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FishPoolSaveHitCountCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishPoolSaveHitCountCfg::CopyFrom(const FishPoolSaveHitCountCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishPoolSaveHitCountCfg::IsInitialized() const {

  return true;
}

void FishPoolSaveHitCountCfg::Swap(FishPoolSaveHitCountCfg* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FishPoolSaveHitCountCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishPoolSaveHitCountCfg_descriptor_;
  metadata.reflection = FishPoolSaveHitCountCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FishPoolSaveConnonHitCount::kValueFieldNumber;
#endif  // !_MSC_VER

FishPoolSaveConnonHitCount::FishPoolSaveConnonHitCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FishPoolSaveConnonHitCount::InitAsDefaultInstance() {
}

FishPoolSaveConnonHitCount::FishPoolSaveConnonHitCount(const FishPoolSaveConnonHitCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FishPoolSaveConnonHitCount::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FishPoolSaveConnonHitCount::~FishPoolSaveConnonHitCount() {
  SharedDtor();
}

void FishPoolSaveConnonHitCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FishPoolSaveConnonHitCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishPoolSaveConnonHitCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishPoolSaveConnonHitCount_descriptor_;
}

const FishPoolSaveConnonHitCount& FishPoolSaveConnonHitCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

FishPoolSaveConnonHitCount* FishPoolSaveConnonHitCount::default_instance_ = NULL;

FishPoolSaveConnonHitCount* FishPoolSaveConnonHitCount::New() const {
  return new FishPoolSaveConnonHitCount;
}

void FishPoolSaveConnonHitCount::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FishPoolSaveConnonHitCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FishPoolSaveConnonHitCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FishPoolSaveConnonHitCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FishPoolSaveConnonHitCount::ByteSize() const {
  int total_size = 0;

  // repeated double value = 1;
  {
    int data_size = 0;
    data_size = 8 * this->value_size();
    total_size += 1 * this->value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishPoolSaveConnonHitCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FishPoolSaveConnonHitCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FishPoolSaveConnonHitCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FishPoolSaveConnonHitCount::MergeFrom(const FishPoolSaveConnonHitCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FishPoolSaveConnonHitCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishPoolSaveConnonHitCount::CopyFrom(const FishPoolSaveConnonHitCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishPoolSaveConnonHitCount::IsInitialized() const {

  return true;
}

void FishPoolSaveConnonHitCount::Swap(FishPoolSaveConnonHitCount* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FishPoolSaveConnonHitCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishPoolSaveConnonHitCount_descriptor_;
  metadata.reflection = FishPoolSaveConnonHitCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FishPoolSave::kDwFishIDFieldNumber;
const int FishPoolSave::kBtFishKindFieldNumber;
const int FishPoolSave::kBtFishKindGroup1FieldNumber;
const int FishPoolSave::kBtFishKindGroup2FieldNumber;
const int FishPoolSave::kBtFishKindGroup3FieldNumber;
const int FishPoolSave::kBtFishKindGroup4FieldNumber;
const int FishPoolSave::kBKilledFieldNumber;
const int FishPoolSave::kBRobotKilledFieldNumber;
const int FishPoolSave::kBKilledByOtherRelaFieldNumber;
const int FishPoolSave::kBKilledByAlgoAFieldNumber;
const int FishPoolSave::kBtKilledCannonIndexFieldNumber;
const int FishPoolSave::kBFloatMulFieldNumber;
const int FishPoolSave::kArBaseMulFieldNumber;
const int FishPoolSave::kArRelaCountFieldNumber;
const int FishPoolSave::kArHitCountCfgFieldNumber;
const int FishPoolSave::kArConnonHitCountFieldNumber;
#endif  // !_MSC_VER

FishPoolSave::FishPoolSave()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FishPoolSave::InitAsDefaultInstance() {
}

FishPoolSave::FishPoolSave(const FishPoolSave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FishPoolSave::SharedCtor() {
  _cached_size_ = 0;
  dwfishid_ = 0;
  btfishkind_ = 0;
  btfishkindgroup1_ = 0;
  btfishkindgroup2_ = 0;
  btfishkindgroup3_ = 0;
  btfishkindgroup4_ = 0;
  bkilled_ = false;
  brobotkilled_ = false;
  bkilledbyotherrela_ = false;
  bkilledbyalgoa_ = false;
  btkilledcannonindex_ = 0;
  bfloatmul_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FishPoolSave::~FishPoolSave() {
  SharedDtor();
}

void FishPoolSave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FishPoolSave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishPoolSave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishPoolSave_descriptor_;
}

const FishPoolSave& FishPoolSave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

FishPoolSave* FishPoolSave::default_instance_ = NULL;

FishPoolSave* FishPoolSave::New() const {
  return new FishPoolSave;
}

void FishPoolSave::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwfishid_ = 0;
    btfishkind_ = 0;
    btfishkindgroup1_ = 0;
    btfishkindgroup2_ = 0;
    btfishkindgroup3_ = 0;
    btfishkindgroup4_ = 0;
    bkilled_ = false;
    brobotkilled_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bkilledbyotherrela_ = false;
    bkilledbyalgoa_ = false;
    btkilledcannonindex_ = 0;
    bfloatmul_ = false;
  }
  arbasemul_.Clear();
  arrelacount_.Clear();
  arhitcountcfg_.Clear();
  arconnonhitcount_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FishPoolSave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dwFishID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwfishid_)));
          set_has_dwfishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_btFishKind;
        break;
      }

      // optional int32 btFishKind = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_btFishKind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &btfishkind_)));
          set_has_btfishkind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_btFishKindGroup1;
        break;
      }

      // optional int32 btFishKindGroup1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_btFishKindGroup1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &btfishkindgroup1_)));
          set_has_btfishkindgroup1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_btFishKindGroup2;
        break;
      }

      // optional int32 btFishKindGroup2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_btFishKindGroup2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &btfishkindgroup2_)));
          set_has_btfishkindgroup2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_btFishKindGroup3;
        break;
      }

      // optional int32 btFishKindGroup3 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_btFishKindGroup3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &btfishkindgroup3_)));
          set_has_btfishkindgroup3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_btFishKindGroup4;
        break;
      }

      // optional int32 btFishKindGroup4 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_btFishKindGroup4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &btfishkindgroup4_)));
          set_has_btfishkindgroup4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bKilled;
        break;
      }

      // optional bool bKilled = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bKilled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bkilled_)));
          set_has_bkilled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bRobotKilled;
        break;
      }

      // optional bool bRobotKilled = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bRobotKilled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &brobotkilled_)));
          set_has_brobotkilled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bKilledByOtherRela;
        break;
      }

      // optional bool bKilledByOtherRela = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bKilledByOtherRela:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bkilledbyotherrela_)));
          set_has_bkilledbyotherrela();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_bKilledByAlgoA;
        break;
      }

      // optional bool bKilledByAlgoA = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bKilledByAlgoA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bkilledbyalgoa_)));
          set_has_bkilledbyalgoa();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_btKilledCannonIndex;
        break;
      }

      // optional int32 btKilledCannonIndex = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_btKilledCannonIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &btkilledcannonindex_)));
          set_has_btkilledcannonindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_bFloatMul;
        break;
      }

      // optional bool bFloatMul = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bFloatMul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bfloatmul_)));
          set_has_bfloatmul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_arBaseMul;
        break;
      }

      // repeated .proto_ff.FishPoolSaveBaseMul arBaseMul = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arBaseMul:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arbasemul()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_arBaseMul;
        if (input->ExpectTag(114)) goto parse_arRelaCount;
        break;
      }

      // repeated .proto_ff.FishPoolSaveRelaCount arRelaCount = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arRelaCount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrelacount()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_arRelaCount;
        if (input->ExpectTag(122)) goto parse_arHitCountCfg;
        break;
      }

      // repeated .proto_ff.FishPoolSaveHitCountCfg arHitCountCfg = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arHitCountCfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arhitcountcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_arHitCountCfg;
        if (input->ExpectTag(130)) goto parse_arConnonHitCount;
        break;
      }

      // repeated .proto_ff.FishPoolSaveConnonHitCount arConnonHitCount = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arConnonHitCount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arconnonhitcount()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_arConnonHitCount;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FishPoolSave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dwFishID = 1;
  if (has_dwfishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dwfishid(), output);
  }

  // optional int32 btFishKind = 2;
  if (has_btfishkind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->btfishkind(), output);
  }

  // optional int32 btFishKindGroup1 = 3;
  if (has_btfishkindgroup1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->btfishkindgroup1(), output);
  }

  // optional int32 btFishKindGroup2 = 4;
  if (has_btfishkindgroup2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->btfishkindgroup2(), output);
  }

  // optional int32 btFishKindGroup3 = 5;
  if (has_btfishkindgroup3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->btfishkindgroup3(), output);
  }

  // optional int32 btFishKindGroup4 = 6;
  if (has_btfishkindgroup4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->btfishkindgroup4(), output);
  }

  // optional bool bKilled = 7;
  if (has_bkilled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->bkilled(), output);
  }

  // optional bool bRobotKilled = 8;
  if (has_brobotkilled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->brobotkilled(), output);
  }

  // optional bool bKilledByOtherRela = 9;
  if (has_bkilledbyotherrela()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->bkilledbyotherrela(), output);
  }

  // optional bool bKilledByAlgoA = 10;
  if (has_bkilledbyalgoa()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->bkilledbyalgoa(), output);
  }

  // optional int32 btKilledCannonIndex = 11;
  if (has_btkilledcannonindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->btkilledcannonindex(), output);
  }

  // optional bool bFloatMul = 12;
  if (has_bfloatmul()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->bfloatmul(), output);
  }

  // repeated .proto_ff.FishPoolSaveBaseMul arBaseMul = 13;
  for (int i = 0; i < this->arbasemul_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->arbasemul(i), output);
  }

  // repeated .proto_ff.FishPoolSaveRelaCount arRelaCount = 14;
  for (int i = 0; i < this->arrelacount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->arrelacount(i), output);
  }

  // repeated .proto_ff.FishPoolSaveHitCountCfg arHitCountCfg = 15;
  for (int i = 0; i < this->arhitcountcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->arhitcountcfg(i), output);
  }

  // repeated .proto_ff.FishPoolSaveConnonHitCount arConnonHitCount = 16;
  for (int i = 0; i < this->arconnonhitcount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->arconnonhitcount(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FishPoolSave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dwFishID = 1;
  if (has_dwfishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dwfishid(), target);
  }

  // optional int32 btFishKind = 2;
  if (has_btfishkind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->btfishkind(), target);
  }

  // optional int32 btFishKindGroup1 = 3;
  if (has_btfishkindgroup1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->btfishkindgroup1(), target);
  }

  // optional int32 btFishKindGroup2 = 4;
  if (has_btfishkindgroup2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->btfishkindgroup2(), target);
  }

  // optional int32 btFishKindGroup3 = 5;
  if (has_btfishkindgroup3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->btfishkindgroup3(), target);
  }

  // optional int32 btFishKindGroup4 = 6;
  if (has_btfishkindgroup4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->btfishkindgroup4(), target);
  }

  // optional bool bKilled = 7;
  if (has_bkilled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->bkilled(), target);
  }

  // optional bool bRobotKilled = 8;
  if (has_brobotkilled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->brobotkilled(), target);
  }

  // optional bool bKilledByOtherRela = 9;
  if (has_bkilledbyotherrela()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->bkilledbyotherrela(), target);
  }

  // optional bool bKilledByAlgoA = 10;
  if (has_bkilledbyalgoa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->bkilledbyalgoa(), target);
  }

  // optional int32 btKilledCannonIndex = 11;
  if (has_btkilledcannonindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->btkilledcannonindex(), target);
  }

  // optional bool bFloatMul = 12;
  if (has_bfloatmul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->bfloatmul(), target);
  }

  // repeated .proto_ff.FishPoolSaveBaseMul arBaseMul = 13;
  for (int i = 0; i < this->arbasemul_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->arbasemul(i), target);
  }

  // repeated .proto_ff.FishPoolSaveRelaCount arRelaCount = 14;
  for (int i = 0; i < this->arrelacount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->arrelacount(i), target);
  }

  // repeated .proto_ff.FishPoolSaveHitCountCfg arHitCountCfg = 15;
  for (int i = 0; i < this->arhitcountcfg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->arhitcountcfg(i), target);
  }

  // repeated .proto_ff.FishPoolSaveConnonHitCount arConnonHitCount = 16;
  for (int i = 0; i < this->arconnonhitcount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->arconnonhitcount(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FishPoolSave::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dwFishID = 1;
    if (has_dwfishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwfishid());
    }

    // optional int32 btFishKind = 2;
    if (has_btfishkind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->btfishkind());
    }

    // optional int32 btFishKindGroup1 = 3;
    if (has_btfishkindgroup1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->btfishkindgroup1());
    }

    // optional int32 btFishKindGroup2 = 4;
    if (has_btfishkindgroup2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->btfishkindgroup2());
    }

    // optional int32 btFishKindGroup3 = 5;
    if (has_btfishkindgroup3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->btfishkindgroup3());
    }

    // optional int32 btFishKindGroup4 = 6;
    if (has_btfishkindgroup4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->btfishkindgroup4());
    }

    // optional bool bKilled = 7;
    if (has_bkilled()) {
      total_size += 1 + 1;
    }

    // optional bool bRobotKilled = 8;
    if (has_brobotkilled()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool bKilledByOtherRela = 9;
    if (has_bkilledbyotherrela()) {
      total_size += 1 + 1;
    }

    // optional bool bKilledByAlgoA = 10;
    if (has_bkilledbyalgoa()) {
      total_size += 1 + 1;
    }

    // optional int32 btKilledCannonIndex = 11;
    if (has_btkilledcannonindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->btkilledcannonindex());
    }

    // optional bool bFloatMul = 12;
    if (has_bfloatmul()) {
      total_size += 1 + 1;
    }

  }
  // repeated .proto_ff.FishPoolSaveBaseMul arBaseMul = 13;
  total_size += 1 * this->arbasemul_size();
  for (int i = 0; i < this->arbasemul_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arbasemul(i));
  }

  // repeated .proto_ff.FishPoolSaveRelaCount arRelaCount = 14;
  total_size += 1 * this->arrelacount_size();
  for (int i = 0; i < this->arrelacount_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrelacount(i));
  }

  // repeated .proto_ff.FishPoolSaveHitCountCfg arHitCountCfg = 15;
  total_size += 1 * this->arhitcountcfg_size();
  for (int i = 0; i < this->arhitcountcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arhitcountcfg(i));
  }

  // repeated .proto_ff.FishPoolSaveConnonHitCount arConnonHitCount = 16;
  total_size += 2 * this->arconnonhitcount_size();
  for (int i = 0; i < this->arconnonhitcount_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arconnonhitcount(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishPoolSave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FishPoolSave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FishPoolSave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FishPoolSave::MergeFrom(const FishPoolSave& from) {
  GOOGLE_CHECK_NE(&from, this);
  arbasemul_.MergeFrom(from.arbasemul_);
  arrelacount_.MergeFrom(from.arrelacount_);
  arhitcountcfg_.MergeFrom(from.arhitcountcfg_);
  arconnonhitcount_.MergeFrom(from.arconnonhitcount_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwfishid()) {
      set_dwfishid(from.dwfishid());
    }
    if (from.has_btfishkind()) {
      set_btfishkind(from.btfishkind());
    }
    if (from.has_btfishkindgroup1()) {
      set_btfishkindgroup1(from.btfishkindgroup1());
    }
    if (from.has_btfishkindgroup2()) {
      set_btfishkindgroup2(from.btfishkindgroup2());
    }
    if (from.has_btfishkindgroup3()) {
      set_btfishkindgroup3(from.btfishkindgroup3());
    }
    if (from.has_btfishkindgroup4()) {
      set_btfishkindgroup4(from.btfishkindgroup4());
    }
    if (from.has_bkilled()) {
      set_bkilled(from.bkilled());
    }
    if (from.has_brobotkilled()) {
      set_brobotkilled(from.brobotkilled());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bkilledbyotherrela()) {
      set_bkilledbyotherrela(from.bkilledbyotherrela());
    }
    if (from.has_bkilledbyalgoa()) {
      set_bkilledbyalgoa(from.bkilledbyalgoa());
    }
    if (from.has_btkilledcannonindex()) {
      set_btkilledcannonindex(from.btkilledcannonindex());
    }
    if (from.has_bfloatmul()) {
      set_bfloatmul(from.bfloatmul());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FishPoolSave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishPoolSave::CopyFrom(const FishPoolSave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishPoolSave::IsInitialized() const {

  return true;
}

void FishPoolSave::Swap(FishPoolSave* other) {
  if (other != this) {
    std::swap(dwfishid_, other->dwfishid_);
    std::swap(btfishkind_, other->btfishkind_);
    std::swap(btfishkindgroup1_, other->btfishkindgroup1_);
    std::swap(btfishkindgroup2_, other->btfishkindgroup2_);
    std::swap(btfishkindgroup3_, other->btfishkindgroup3_);
    std::swap(btfishkindgroup4_, other->btfishkindgroup4_);
    std::swap(bkilled_, other->bkilled_);
    std::swap(brobotkilled_, other->brobotkilled_);
    std::swap(bkilledbyotherrela_, other->bkilledbyotherrela_);
    std::swap(bkilledbyalgoa_, other->bkilledbyalgoa_);
    std::swap(btkilledcannonindex_, other->btkilledcannonindex_);
    std::swap(bfloatmul_, other->bfloatmul_);
    arbasemul_.Swap(&other->arbasemul_);
    arrelacount_.Swap(&other->arrelacount_);
    arhitcountcfg_.Swap(&other->arhitcountcfg_);
    arconnonhitcount_.Swap(&other->arconnonhitcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FishPoolSave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishPoolSave_descriptor_;
  metadata.reflection = FishPoolSave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FishKindFishPoolSave::kFishPoolFieldNumber;
#endif  // !_MSC_VER

FishKindFishPoolSave::FishKindFishPoolSave()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FishKindFishPoolSave::InitAsDefaultInstance() {
}

FishKindFishPoolSave::FishKindFishPoolSave(const FishKindFishPoolSave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FishKindFishPoolSave::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FishKindFishPoolSave::~FishKindFishPoolSave() {
  SharedDtor();
}

void FishKindFishPoolSave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FishKindFishPoolSave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishKindFishPoolSave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishKindFishPoolSave_descriptor_;
}

const FishKindFishPoolSave& FishKindFishPoolSave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

FishKindFishPoolSave* FishKindFishPoolSave::default_instance_ = NULL;

FishKindFishPoolSave* FishKindFishPoolSave::New() const {
  return new FishKindFishPoolSave;
}

void FishKindFishPoolSave::Clear() {
  fish_pool_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FishKindFishPoolSave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FishPoolSave fish_pool = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fish_pool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fish_pool()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fish_pool;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FishKindFishPoolSave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FishPoolSave fish_pool = 1;
  for (int i = 0; i < this->fish_pool_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fish_pool(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FishKindFishPoolSave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FishPoolSave fish_pool = 1;
  for (int i = 0; i < this->fish_pool_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fish_pool(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FishKindFishPoolSave::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FishPoolSave fish_pool = 1;
  total_size += 1 * this->fish_pool_size();
  for (int i = 0; i < this->fish_pool_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fish_pool(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishKindFishPoolSave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FishKindFishPoolSave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FishKindFishPoolSave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FishKindFishPoolSave::MergeFrom(const FishKindFishPoolSave& from) {
  GOOGLE_CHECK_NE(&from, this);
  fish_pool_.MergeFrom(from.fish_pool_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FishKindFishPoolSave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishKindFishPoolSave::CopyFrom(const FishKindFishPoolSave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishKindFishPoolSave::IsInitialized() const {

  return true;
}

void FishKindFishPoolSave::Swap(FishKindFishPoolSave* other) {
  if (other != this) {
    fish_pool_.Swap(&other->fish_pool_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FishKindFishPoolSave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishKindFishPoolSave_descriptor_;
  metadata.reflection = FishKindFishPoolSave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FishKindFishPoolSaveArray::kFishKindFieldNumber;
#endif  // !_MSC_VER

FishKindFishPoolSaveArray::FishKindFishPoolSaveArray()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FishKindFishPoolSaveArray::InitAsDefaultInstance() {
}

FishKindFishPoolSaveArray::FishKindFishPoolSaveArray(const FishKindFishPoolSaveArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FishKindFishPoolSaveArray::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FishKindFishPoolSaveArray::~FishKindFishPoolSaveArray() {
  SharedDtor();
}

void FishKindFishPoolSaveArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FishKindFishPoolSaveArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishKindFishPoolSaveArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FishKindFishPoolSaveArray_descriptor_;
}

const FishKindFishPoolSaveArray& FishKindFishPoolSaveArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

FishKindFishPoolSaveArray* FishKindFishPoolSaveArray::default_instance_ = NULL;

FishKindFishPoolSaveArray* FishKindFishPoolSaveArray::New() const {
  return new FishKindFishPoolSaveArray;
}

void FishKindFishPoolSaveArray::Clear() {
  fish_kind_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FishKindFishPoolSaveArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FishKindFishPoolSave fish_kind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fish_kind:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fish_kind()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fish_kind;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FishKindFishPoolSaveArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FishKindFishPoolSave fish_kind = 1;
  for (int i = 0; i < this->fish_kind_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fish_kind(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FishKindFishPoolSaveArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FishKindFishPoolSave fish_kind = 1;
  for (int i = 0; i < this->fish_kind_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fish_kind(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FishKindFishPoolSaveArray::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FishKindFishPoolSave fish_kind = 1;
  total_size += 1 * this->fish_kind_size();
  for (int i = 0; i < this->fish_kind_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fish_kind(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishKindFishPoolSaveArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FishKindFishPoolSaveArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FishKindFishPoolSaveArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FishKindFishPoolSaveArray::MergeFrom(const FishKindFishPoolSaveArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  fish_kind_.MergeFrom(from.fish_kind_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FishKindFishPoolSaveArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishKindFishPoolSaveArray::CopyFrom(const FishKindFishPoolSaveArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishKindFishPoolSaveArray::IsInitialized() const {

  return true;
}

void FishKindFishPoolSaveArray::Swap(FishKindFishPoolSaveArray* other) {
  if (other != this) {
    fish_kind_.Swap(&other->fish_kind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FishKindFishPoolSaveArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FishKindFishPoolSaveArray_descriptor_;
  metadata.reflection = FishKindFishPoolSaveArray_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMCtrlLevelDesc::kControlLevelFieldNumber;
const int GMCtrlLevelDesc::kNameFieldNumber;
const int GMCtrlLevelDesc::kControlRateFieldNumber;
#endif  // !_MSC_VER

GMCtrlLevelDesc::GMCtrlLevelDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMCtrlLevelDesc::InitAsDefaultInstance() {
}

GMCtrlLevelDesc::GMCtrlLevelDesc(const GMCtrlLevelDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMCtrlLevelDesc::SharedCtor() {
  _cached_size_ = 0;
  controllevel_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  controlrate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMCtrlLevelDesc::~GMCtrlLevelDesc() {
  SharedDtor();
}

void GMCtrlLevelDesc::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GMCtrlLevelDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMCtrlLevelDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMCtrlLevelDesc_descriptor_;
}

const GMCtrlLevelDesc& GMCtrlLevelDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

GMCtrlLevelDesc* GMCtrlLevelDesc::default_instance_ = NULL;

GMCtrlLevelDesc* GMCtrlLevelDesc::New() const {
  return new GMCtrlLevelDesc;
}

void GMCtrlLevelDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    controllevel_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    controlrate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMCtrlLevelDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ControlLevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &controllevel_)));
          set_has_controllevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // optional string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ControlRate;
        break;
      }

      // optional int32 ControlRate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ControlRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &controlrate_)));
          set_has_controlrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMCtrlLevelDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ControlLevel = 1;
  if (has_controllevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->controllevel(), output);
  }

  // optional string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 ControlRate = 3;
  if (has_controlrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->controlrate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMCtrlLevelDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ControlLevel = 1;
  if (has_controllevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->controllevel(), target);
  }

  // optional string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 ControlRate = 3;
  if (has_controlrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->controlrate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMCtrlLevelDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ControlLevel = 1;
    if (has_controllevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->controllevel());
    }

    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 ControlRate = 3;
    if (has_controlrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->controlrate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMCtrlLevelDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMCtrlLevelDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMCtrlLevelDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMCtrlLevelDesc::MergeFrom(const GMCtrlLevelDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_controllevel()) {
      set_controllevel(from.controllevel());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_controlrate()) {
      set_controlrate(from.controlrate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMCtrlLevelDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMCtrlLevelDesc::CopyFrom(const GMCtrlLevelDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMCtrlLevelDesc::IsInitialized() const {

  return true;
}

void GMCtrlLevelDesc::Swap(GMCtrlLevelDesc* other) {
  if (other != this) {
    std::swap(controllevel_, other->controllevel_);
    std::swap(name_, other->name_);
    std::swap(controlrate_, other->controlrate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMCtrlLevelDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMCtrlLevelDesc_descriptor_;
  metadata.reflection = GMCtrlLevelDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GMCtrlLevelDesc::kGMCtrlLevelDescListFieldNumber;
#endif  // !_MSC_VER

Sheet_GMCtrlLevelDesc::Sheet_GMCtrlLevelDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GMCtrlLevelDesc::InitAsDefaultInstance() {
}

Sheet_GMCtrlLevelDesc::Sheet_GMCtrlLevelDesc(const Sheet_GMCtrlLevelDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GMCtrlLevelDesc::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GMCtrlLevelDesc::~Sheet_GMCtrlLevelDesc() {
  SharedDtor();
}

void Sheet_GMCtrlLevelDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GMCtrlLevelDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GMCtrlLevelDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GMCtrlLevelDesc_descriptor_;
}

const Sheet_GMCtrlLevelDesc& Sheet_GMCtrlLevelDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

Sheet_GMCtrlLevelDesc* Sheet_GMCtrlLevelDesc::default_instance_ = NULL;

Sheet_GMCtrlLevelDesc* Sheet_GMCtrlLevelDesc::New() const {
  return new Sheet_GMCtrlLevelDesc;
}

void Sheet_GMCtrlLevelDesc::Clear() {
  gmctrlleveldesc_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GMCtrlLevelDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.GMCtrlLevelDesc GMCtrlLevelDesc_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GMCtrlLevelDesc_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gmctrlleveldesc_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_GMCtrlLevelDesc_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GMCtrlLevelDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.GMCtrlLevelDesc GMCtrlLevelDesc_List = 1;
  for (int i = 0; i < this->gmctrlleveldesc_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gmctrlleveldesc_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GMCtrlLevelDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.GMCtrlLevelDesc GMCtrlLevelDesc_List = 1;
  for (int i = 0; i < this->gmctrlleveldesc_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gmctrlleveldesc_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GMCtrlLevelDesc::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.GMCtrlLevelDesc GMCtrlLevelDesc_List = 1;
  total_size += 1 * this->gmctrlleveldesc_list_size();
  for (int i = 0; i < this->gmctrlleveldesc_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gmctrlleveldesc_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GMCtrlLevelDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GMCtrlLevelDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GMCtrlLevelDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GMCtrlLevelDesc::MergeFrom(const Sheet_GMCtrlLevelDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  gmctrlleveldesc_list_.MergeFrom(from.gmctrlleveldesc_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GMCtrlLevelDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GMCtrlLevelDesc::CopyFrom(const Sheet_GMCtrlLevelDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GMCtrlLevelDesc::IsInitialized() const {

  return true;
}

void Sheet_GMCtrlLevelDesc::Swap(Sheet_GMCtrlLevelDesc* other) {
  if (other != this) {
    gmctrlleveldesc_list_.Swap(&other->gmctrlleveldesc_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GMCtrlLevelDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GMCtrlLevelDesc_descriptor_;
  metadata.reflection = Sheet_GMCtrlLevelDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LineGameSystemControlInfo::kRoomIDFieldNumber;
const int LineGameSystemControlInfo::kAreaIDFieldNumber;
const int LineGameSystemControlInfo::kTotalProfitFieldNumber;
const int LineGameSystemControlInfo::kCurrentSystemControlFieldNumber;
#endif  // !_MSC_VER

LineGameSystemControlInfo::LineGameSystemControlInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LineGameSystemControlInfo::InitAsDefaultInstance() {
}

LineGameSystemControlInfo::LineGameSystemControlInfo(const LineGameSystemControlInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LineGameSystemControlInfo::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  areaid_ = 0;
  totalprofit_ = GOOGLE_LONGLONG(0);
  currentsystemcontrol_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LineGameSystemControlInfo::~LineGameSystemControlInfo() {
  SharedDtor();
}

void LineGameSystemControlInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LineGameSystemControlInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineGameSystemControlInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineGameSystemControlInfo_descriptor_;
}

const LineGameSystemControlInfo& LineGameSystemControlInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

LineGameSystemControlInfo* LineGameSystemControlInfo::default_instance_ = NULL;

LineGameSystemControlInfo* LineGameSystemControlInfo::New() const {
  return new LineGameSystemControlInfo;
}

void LineGameSystemControlInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
    areaid_ = 0;
    totalprofit_ = GOOGLE_LONGLONG(0);
    currentsystemcontrol_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LineGameSystemControlInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 RoomID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_AreaID;
        break;
      }

      // optional int32 AreaID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AreaID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TotalProfit;
        break;
      }

      // optional int64 TotalProfit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalProfit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalprofit_)));
          set_has_totalprofit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_CurrentSystemControl;
        break;
      }

      // optional int32 CurrentSystemControl = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurrentSystemControl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentsystemcontrol_)));
          set_has_currentsystemcontrol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LineGameSystemControlInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 RoomID = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  // optional int32 AreaID = 2;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->areaid(), output);
  }

  // optional int64 TotalProfit = 3;
  if (has_totalprofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->totalprofit(), output);
  }

  // optional int32 CurrentSystemControl = 4;
  if (has_currentsystemcontrol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->currentsystemcontrol(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LineGameSystemControlInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 RoomID = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  // optional int32 AreaID = 2;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->areaid(), target);
  }

  // optional int64 TotalProfit = 3;
  if (has_totalprofit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->totalprofit(), target);
  }

  // optional int32 CurrentSystemControl = 4;
  if (has_currentsystemcontrol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->currentsystemcontrol(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LineGameSystemControlInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 RoomID = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int32 AreaID = 2;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->areaid());
    }

    // optional int64 TotalProfit = 3;
    if (has_totalprofit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totalprofit());
    }

    // optional int32 CurrentSystemControl = 4;
    if (has_currentsystemcontrol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentsystemcontrol());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineGameSystemControlInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LineGameSystemControlInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LineGameSystemControlInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LineGameSystemControlInfo::MergeFrom(const LineGameSystemControlInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
    if (from.has_totalprofit()) {
      set_totalprofit(from.totalprofit());
    }
    if (from.has_currentsystemcontrol()) {
      set_currentsystemcontrol(from.currentsystemcontrol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LineGameSystemControlInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineGameSystemControlInfo::CopyFrom(const LineGameSystemControlInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineGameSystemControlInfo::IsInitialized() const {

  return true;
}

void LineGameSystemControlInfo::Swap(LineGameSystemControlInfo* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(areaid_, other->areaid_);
    std::swap(totalprofit_, other->totalprofit_);
    std::swap(currentsystemcontrol_, other->currentsystemcontrol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LineGameSystemControlInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LineGameSystemControlInfo_descriptor_;
  metadata.reflection = LineGameSystemControlInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_LineGameSystemControlInfo::kLineGameSystemControlInfoListFieldNumber;
#endif  // !_MSC_VER

Sheet_LineGameSystemControlInfo::Sheet_LineGameSystemControlInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_LineGameSystemControlInfo::InitAsDefaultInstance() {
}

Sheet_LineGameSystemControlInfo::Sheet_LineGameSystemControlInfo(const Sheet_LineGameSystemControlInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_LineGameSystemControlInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_LineGameSystemControlInfo::~Sheet_LineGameSystemControlInfo() {
  SharedDtor();
}

void Sheet_LineGameSystemControlInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_LineGameSystemControlInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_LineGameSystemControlInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_LineGameSystemControlInfo_descriptor_;
}

const Sheet_LineGameSystemControlInfo& Sheet_LineGameSystemControlInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

Sheet_LineGameSystemControlInfo* Sheet_LineGameSystemControlInfo::default_instance_ = NULL;

Sheet_LineGameSystemControlInfo* Sheet_LineGameSystemControlInfo::New() const {
  return new Sheet_LineGameSystemControlInfo;
}

void Sheet_LineGameSystemControlInfo::Clear() {
  linegamesystemcontrolinfo_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_LineGameSystemControlInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.LineGameSystemControlInfo LineGameSystemControlInfo_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LineGameSystemControlInfo_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_linegamesystemcontrolinfo_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_LineGameSystemControlInfo_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_LineGameSystemControlInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.LineGameSystemControlInfo LineGameSystemControlInfo_List = 1;
  for (int i = 0; i < this->linegamesystemcontrolinfo_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->linegamesystemcontrolinfo_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_LineGameSystemControlInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.LineGameSystemControlInfo LineGameSystemControlInfo_List = 1;
  for (int i = 0; i < this->linegamesystemcontrolinfo_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->linegamesystemcontrolinfo_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_LineGameSystemControlInfo::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.LineGameSystemControlInfo LineGameSystemControlInfo_List = 1;
  total_size += 1 * this->linegamesystemcontrolinfo_list_size();
  for (int i = 0; i < this->linegamesystemcontrolinfo_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->linegamesystemcontrolinfo_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_LineGameSystemControlInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_LineGameSystemControlInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_LineGameSystemControlInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_LineGameSystemControlInfo::MergeFrom(const Sheet_LineGameSystemControlInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  linegamesystemcontrolinfo_list_.MergeFrom(from.linegamesystemcontrolinfo_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_LineGameSystemControlInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_LineGameSystemControlInfo::CopyFrom(const Sheet_LineGameSystemControlInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_LineGameSystemControlInfo::IsInitialized() const {

  return true;
}

void Sheet_LineGameSystemControlInfo::Swap(Sheet_LineGameSystemControlInfo* other) {
  if (other != this) {
    linegamesystemcontrolinfo_list_.Swap(&other->linegamesystemcontrolinfo_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_LineGameSystemControlInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_LineGameSystemControlInfo_descriptor_;
  metadata.reflection = Sheet_LineGameSystemControlInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LineLevelDesc::kLevelIDFieldNumber;
const int LineLevelDesc::kLevelNameFieldNumber;
const int LineLevelDesc::kCannonLevelValFieldNumber;
const int LineLevelDesc::kVecCannonLevelValFieldNumber;
const int LineLevelDesc::kCannonShowNumFieldNumber;
const int LineLevelDesc::kVecCannonShowNumFieldNumber;
const int LineLevelDesc::kMinMoneyFieldNumber;
const int LineLevelDesc::kMaxMoneyFieldNumber;
const int LineLevelDesc::kStartGameFieldNumber;
const int LineLevelDesc::kFlagFieldNumber;
const int LineLevelDesc::kMaxWinTimesFieldNumber;
const int LineLevelDesc::kChipFieldNumber;
const int LineLevelDesc::kVecChipsFieldNumber;
const int LineLevelDesc::kGMLevelRateFieldNumber;
const int LineLevelDesc::kVecGMLevelRateFieldNumber;
#endif  // !_MSC_VER

LineLevelDesc::LineLevelDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LineLevelDesc::InitAsDefaultInstance() {
}

LineLevelDesc::LineLevelDesc(const LineLevelDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LineLevelDesc::SharedCtor() {
  _cached_size_ = 0;
  levelid_ = 0;
  levelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cannonlevelval_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cannonshownum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  minmoney_ = 0;
  maxmoney_ = 0;
  startgame_ = 0;
  flag_ = 0;
  maxwintimes_ = 0;
  chip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gmlevelrate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LineLevelDesc::~LineLevelDesc() {
  SharedDtor();
}

void LineLevelDesc::SharedDtor() {
  if (levelname_ != &::google::protobuf::internal::kEmptyString) {
    delete levelname_;
  }
  if (cannonlevelval_ != &::google::protobuf::internal::kEmptyString) {
    delete cannonlevelval_;
  }
  if (cannonshownum_ != &::google::protobuf::internal::kEmptyString) {
    delete cannonshownum_;
  }
  if (chip_ != &::google::protobuf::internal::kEmptyString) {
    delete chip_;
  }
  if (gmlevelrate_ != &::google::protobuf::internal::kEmptyString) {
    delete gmlevelrate_;
  }
  if (this != default_instance_) {
  }
}

void LineLevelDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineLevelDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineLevelDesc_descriptor_;
}

const LineLevelDesc& LineLevelDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

LineLevelDesc* LineLevelDesc::default_instance_ = NULL;

LineLevelDesc* LineLevelDesc::New() const {
  return new LineLevelDesc;
}

void LineLevelDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    levelid_ = 0;
    if (has_levelname()) {
      if (levelname_ != &::google::protobuf::internal::kEmptyString) {
        levelname_->clear();
      }
    }
    if (has_cannonlevelval()) {
      if (cannonlevelval_ != &::google::protobuf::internal::kEmptyString) {
        cannonlevelval_->clear();
      }
    }
    if (has_cannonshownum()) {
      if (cannonshownum_ != &::google::protobuf::internal::kEmptyString) {
        cannonshownum_->clear();
      }
    }
    minmoney_ = 0;
    maxmoney_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    startgame_ = 0;
    flag_ = 0;
    maxwintimes_ = 0;
    if (has_chip()) {
      if (chip_ != &::google::protobuf::internal::kEmptyString) {
        chip_->clear();
      }
    }
    if (has_gmlevelrate()) {
      if (gmlevelrate_ != &::google::protobuf::internal::kEmptyString) {
        gmlevelrate_->clear();
      }
    }
  }
  veccannonlevelval_.Clear();
  veccannonshownum_.Clear();
  vecchips_.Clear();
  vecgmlevelrate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LineLevelDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 LevelID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levelid_)));
          set_has_levelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LevelName;
        break;
      }

      // optional string LevelName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LevelName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_levelname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->levelname().data(), this->levelname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_CannonLevelVal;
        break;
      }

      // optional string CannonLevelVal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CannonLevelVal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cannonlevelval()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cannonlevelval().data(), this->cannonlevelval().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_VecCannonLevelVal;
        break;
      }

      // repeated int32 VecCannonLevelVal = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VecCannonLevelVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_veccannonlevelval())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_veccannonlevelval())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_VecCannonLevelVal;
        if (input->ExpectTag(42)) goto parse_CannonShowNum;
        break;
      }

      // optional string CannonShowNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CannonShowNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cannonshownum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cannonshownum().data(), this->cannonshownum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_VecCannonShowNum;
        break;
      }

      // repeated int32 VecCannonShowNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VecCannonShowNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_veccannonshownum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_veccannonshownum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_VecCannonShowNum;
        if (input->ExpectTag(56)) goto parse_MinMoney;
        break;
      }

      // optional int32 MinMoney = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MinMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minmoney_)));
          set_has_minmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_MaxMoney;
        break;
      }

      // optional int32 MaxMoney = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxmoney_)));
          set_has_maxmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_StartGame;
        break;
      }

      // optional int32 StartGame = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StartGame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startgame_)));
          set_has_startgame();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_Flag;
        break;
      }

      // optional int32 Flag = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_MaxWinTimes;
        break;
      }

      // optional int32 MaxWinTimes = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxWinTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxwintimes_)));
          set_has_maxwintimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_Chip;
        break;
      }

      // optional string Chip = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Chip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chip().data(), this->chip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_VecChips;
        break;
      }

      // repeated int64 VecChips = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VecChips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 104, input, this->mutable_vecchips())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_vecchips())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_VecChips;
        if (input->ExpectTag(114)) goto parse_GMLevelRate;
        break;
      }

      // optional string GMLevelRate = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GMLevelRate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gmlevelrate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gmlevelrate().data(), this->gmlevelrate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_VecGMLevelRate;
        break;
      }

      // repeated int32 VecGMLevelRate = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VecGMLevelRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 120, input, this->mutable_vecgmlevelrate())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_vecgmlevelrate())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_VecGMLevelRate;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LineLevelDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 LevelID = 1;
  if (has_levelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->levelid(), output);
  }

  // optional string LevelName = 2;
  if (has_levelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->levelname().data(), this->levelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->levelname(), output);
  }

  // optional string CannonLevelVal = 3;
  if (has_cannonlevelval()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cannonlevelval().data(), this->cannonlevelval().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cannonlevelval(), output);
  }

  // repeated int32 VecCannonLevelVal = 4;
  for (int i = 0; i < this->veccannonlevelval_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->veccannonlevelval(i), output);
  }

  // optional string CannonShowNum = 5;
  if (has_cannonshownum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cannonshownum().data(), this->cannonshownum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->cannonshownum(), output);
  }

  // repeated int32 VecCannonShowNum = 6;
  for (int i = 0; i < this->veccannonshownum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->veccannonshownum(i), output);
  }

  // optional int32 MinMoney = 7;
  if (has_minmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->minmoney(), output);
  }

  // optional int32 MaxMoney = 8;
  if (has_maxmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->maxmoney(), output);
  }

  // optional int32 StartGame = 9;
  if (has_startgame()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->startgame(), output);
  }

  // optional int32 Flag = 10;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->flag(), output);
  }

  // optional int32 MaxWinTimes = 11;
  if (has_maxwintimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->maxwintimes(), output);
  }

  // optional string Chip = 12;
  if (has_chip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chip().data(), this->chip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->chip(), output);
  }

  // repeated int64 VecChips = 13;
  for (int i = 0; i < this->vecchips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      13, this->vecchips(i), output);
  }

  // optional string GMLevelRate = 14;
  if (has_gmlevelrate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gmlevelrate().data(), this->gmlevelrate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->gmlevelrate(), output);
  }

  // repeated int32 VecGMLevelRate = 15;
  for (int i = 0; i < this->vecgmlevelrate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      15, this->vecgmlevelrate(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LineLevelDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 LevelID = 1;
  if (has_levelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->levelid(), target);
  }

  // optional string LevelName = 2;
  if (has_levelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->levelname().data(), this->levelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->levelname(), target);
  }

  // optional string CannonLevelVal = 3;
  if (has_cannonlevelval()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cannonlevelval().data(), this->cannonlevelval().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cannonlevelval(), target);
  }

  // repeated int32 VecCannonLevelVal = 4;
  for (int i = 0; i < this->veccannonlevelval_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->veccannonlevelval(i), target);
  }

  // optional string CannonShowNum = 5;
  if (has_cannonshownum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cannonshownum().data(), this->cannonshownum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cannonshownum(), target);
  }

  // repeated int32 VecCannonShowNum = 6;
  for (int i = 0; i < this->veccannonshownum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->veccannonshownum(i), target);
  }

  // optional int32 MinMoney = 7;
  if (has_minmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->minmoney(), target);
  }

  // optional int32 MaxMoney = 8;
  if (has_maxmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->maxmoney(), target);
  }

  // optional int32 StartGame = 9;
  if (has_startgame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->startgame(), target);
  }

  // optional int32 Flag = 10;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->flag(), target);
  }

  // optional int32 MaxWinTimes = 11;
  if (has_maxwintimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->maxwintimes(), target);
  }

  // optional string Chip = 12;
  if (has_chip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chip().data(), this->chip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->chip(), target);
  }

  // repeated int64 VecChips = 13;
  for (int i = 0; i < this->vecchips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(13, this->vecchips(i), target);
  }

  // optional string GMLevelRate = 14;
  if (has_gmlevelrate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gmlevelrate().data(), this->gmlevelrate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->gmlevelrate(), target);
  }

  // repeated int32 VecGMLevelRate = 15;
  for (int i = 0; i < this->vecgmlevelrate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(15, this->vecgmlevelrate(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LineLevelDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 LevelID = 1;
    if (has_levelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levelid());
    }

    // optional string LevelName = 2;
    if (has_levelname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->levelname());
    }

    // optional string CannonLevelVal = 3;
    if (has_cannonlevelval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cannonlevelval());
    }

    // optional string CannonShowNum = 5;
    if (has_cannonshownum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cannonshownum());
    }

    // optional int32 MinMoney = 7;
    if (has_minmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minmoney());
    }

    // optional int32 MaxMoney = 8;
    if (has_maxmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxmoney());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 StartGame = 9;
    if (has_startgame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startgame());
    }

    // optional int32 Flag = 10;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int32 MaxWinTimes = 11;
    if (has_maxwintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxwintimes());
    }

    // optional string Chip = 12;
    if (has_chip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chip());
    }

    // optional string GMLevelRate = 14;
    if (has_gmlevelrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gmlevelrate());
    }

  }
  // repeated int32 VecCannonLevelVal = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->veccannonlevelval_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->veccannonlevelval(i));
    }
    total_size += 1 * this->veccannonlevelval_size() + data_size;
  }

  // repeated int32 VecCannonShowNum = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->veccannonshownum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->veccannonshownum(i));
    }
    total_size += 1 * this->veccannonshownum_size() + data_size;
  }

  // repeated int64 VecChips = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->vecchips_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->vecchips(i));
    }
    total_size += 1 * this->vecchips_size() + data_size;
  }

  // repeated int32 VecGMLevelRate = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->vecgmlevelrate_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->vecgmlevelrate(i));
    }
    total_size += 1 * this->vecgmlevelrate_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineLevelDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LineLevelDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LineLevelDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LineLevelDesc::MergeFrom(const LineLevelDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  veccannonlevelval_.MergeFrom(from.veccannonlevelval_);
  veccannonshownum_.MergeFrom(from.veccannonshownum_);
  vecchips_.MergeFrom(from.vecchips_);
  vecgmlevelrate_.MergeFrom(from.vecgmlevelrate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_levelid()) {
      set_levelid(from.levelid());
    }
    if (from.has_levelname()) {
      set_levelname(from.levelname());
    }
    if (from.has_cannonlevelval()) {
      set_cannonlevelval(from.cannonlevelval());
    }
    if (from.has_cannonshownum()) {
      set_cannonshownum(from.cannonshownum());
    }
    if (from.has_minmoney()) {
      set_minmoney(from.minmoney());
    }
    if (from.has_maxmoney()) {
      set_maxmoney(from.maxmoney());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_startgame()) {
      set_startgame(from.startgame());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_maxwintimes()) {
      set_maxwintimes(from.maxwintimes());
    }
    if (from.has_chip()) {
      set_chip(from.chip());
    }
    if (from.has_gmlevelrate()) {
      set_gmlevelrate(from.gmlevelrate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LineLevelDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineLevelDesc::CopyFrom(const LineLevelDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineLevelDesc::IsInitialized() const {

  return true;
}

void LineLevelDesc::Swap(LineLevelDesc* other) {
  if (other != this) {
    std::swap(levelid_, other->levelid_);
    std::swap(levelname_, other->levelname_);
    std::swap(cannonlevelval_, other->cannonlevelval_);
    veccannonlevelval_.Swap(&other->veccannonlevelval_);
    std::swap(cannonshownum_, other->cannonshownum_);
    veccannonshownum_.Swap(&other->veccannonshownum_);
    std::swap(minmoney_, other->minmoney_);
    std::swap(maxmoney_, other->maxmoney_);
    std::swap(startgame_, other->startgame_);
    std::swap(flag_, other->flag_);
    std::swap(maxwintimes_, other->maxwintimes_);
    std::swap(chip_, other->chip_);
    vecchips_.Swap(&other->vecchips_);
    std::swap(gmlevelrate_, other->gmlevelrate_);
    vecgmlevelrate_.Swap(&other->vecgmlevelrate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LineLevelDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LineLevelDesc_descriptor_;
  metadata.reflection = LineLevelDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_LineLevelDesc::kLineLevelDescListFieldNumber;
#endif  // !_MSC_VER

Sheet_LineLevelDesc::Sheet_LineLevelDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_LineLevelDesc::InitAsDefaultInstance() {
}

Sheet_LineLevelDesc::Sheet_LineLevelDesc(const Sheet_LineLevelDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_LineLevelDesc::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_LineLevelDesc::~Sheet_LineLevelDesc() {
  SharedDtor();
}

void Sheet_LineLevelDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_LineLevelDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_LineLevelDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_LineLevelDesc_descriptor_;
}

const Sheet_LineLevelDesc& Sheet_LineLevelDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

Sheet_LineLevelDesc* Sheet_LineLevelDesc::default_instance_ = NULL;

Sheet_LineLevelDesc* Sheet_LineLevelDesc::New() const {
  return new Sheet_LineLevelDesc;
}

void Sheet_LineLevelDesc::Clear() {
  lineleveldesc_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_LineLevelDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.LineLevelDesc LineLevelDesc_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LineLevelDesc_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lineleveldesc_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_LineLevelDesc_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_LineLevelDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.LineLevelDesc LineLevelDesc_List = 1;
  for (int i = 0; i < this->lineleveldesc_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lineleveldesc_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_LineLevelDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.LineLevelDesc LineLevelDesc_List = 1;
  for (int i = 0; i < this->lineleveldesc_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lineleveldesc_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_LineLevelDesc::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.LineLevelDesc LineLevelDesc_List = 1;
  total_size += 1 * this->lineleveldesc_list_size();
  for (int i = 0; i < this->lineleveldesc_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lineleveldesc_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_LineLevelDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_LineLevelDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_LineLevelDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_LineLevelDesc::MergeFrom(const Sheet_LineLevelDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  lineleveldesc_list_.MergeFrom(from.lineleveldesc_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_LineLevelDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_LineLevelDesc::CopyFrom(const Sheet_LineLevelDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_LineLevelDesc::IsInitialized() const {

  return true;
}

void Sheet_LineLevelDesc::Swap(Sheet_LineLevelDesc* other) {
  if (other != this) {
    lineleveldesc_list_.Swap(&other->lineleveldesc_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_LineLevelDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_LineLevelDesc_descriptor_;
  metadata.reflection = Sheet_LineLevelDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LineDeskInfoDesc::kIdFieldNumber;
const int LineDeskInfoDesc::kRoomIDFieldNumber;
const int LineDeskInfoDesc::kDeskIDFieldNumber;
const int LineDeskInfoDesc::kAlgoIDFieldNumber;
const int LineDeskInfoDesc::kDrawRateFieldNumber;
#endif  // !_MSC_VER

LineDeskInfoDesc::LineDeskInfoDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LineDeskInfoDesc::InitAsDefaultInstance() {
}

LineDeskInfoDesc::LineDeskInfoDesc(const LineDeskInfoDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LineDeskInfoDesc::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  roomid_ = 0;
  deskid_ = 0;
  algoid_ = 0;
  drawrate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LineDeskInfoDesc::~LineDeskInfoDesc() {
  SharedDtor();
}

void LineDeskInfoDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LineDeskInfoDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineDeskInfoDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineDeskInfoDesc_descriptor_;
}

const LineDeskInfoDesc& LineDeskInfoDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

LineDeskInfoDesc* LineDeskInfoDesc::default_instance_ = NULL;

LineDeskInfoDesc* LineDeskInfoDesc::New() const {
  return new LineDeskInfoDesc;
}

void LineDeskInfoDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    roomid_ = 0;
    deskid_ = 0;
    algoid_ = 0;
    drawrate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LineDeskInfoDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RoomID;
        break;
      }

      // optional int32 RoomID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoomID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DeskID;
        break;
      }

      // optional int32 DeskID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DeskID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deskid_)));
          set_has_deskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_AlgoID;
        break;
      }

      // optional int32 AlgoID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AlgoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &algoid_)));
          set_has_algoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DrawRate;
        break;
      }

      // optional int32 DrawRate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DrawRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drawrate_)));
          set_has_drawrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LineDeskInfoDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 RoomID = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // optional int32 DeskID = 3;
  if (has_deskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->deskid(), output);
  }

  // optional int32 AlgoID = 4;
  if (has_algoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->algoid(), output);
  }

  // optional int32 DrawRate = 5;
  if (has_drawrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->drawrate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LineDeskInfoDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 RoomID = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // optional int32 DeskID = 3;
  if (has_deskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->deskid(), target);
  }

  // optional int32 AlgoID = 4;
  if (has_algoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->algoid(), target);
  }

  // optional int32 DrawRate = 5;
  if (has_drawrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->drawrate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LineDeskInfoDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 RoomID = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int32 DeskID = 3;
    if (has_deskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deskid());
    }

    // optional int32 AlgoID = 4;
    if (has_algoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->algoid());
    }

    // optional int32 DrawRate = 5;
    if (has_drawrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drawrate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineDeskInfoDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LineDeskInfoDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LineDeskInfoDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LineDeskInfoDesc::MergeFrom(const LineDeskInfoDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_deskid()) {
      set_deskid(from.deskid());
    }
    if (from.has_algoid()) {
      set_algoid(from.algoid());
    }
    if (from.has_drawrate()) {
      set_drawrate(from.drawrate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LineDeskInfoDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineDeskInfoDesc::CopyFrom(const LineDeskInfoDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineDeskInfoDesc::IsInitialized() const {

  return true;
}

void LineDeskInfoDesc::Swap(LineDeskInfoDesc* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(roomid_, other->roomid_);
    std::swap(deskid_, other->deskid_);
    std::swap(algoid_, other->algoid_);
    std::swap(drawrate_, other->drawrate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LineDeskInfoDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LineDeskInfoDesc_descriptor_;
  metadata.reflection = LineDeskInfoDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_LineDeskInfoDesc::kLineDeskInfoDescListFieldNumber;
#endif  // !_MSC_VER

Sheet_LineDeskInfoDesc::Sheet_LineDeskInfoDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_LineDeskInfoDesc::InitAsDefaultInstance() {
}

Sheet_LineDeskInfoDesc::Sheet_LineDeskInfoDesc(const Sheet_LineDeskInfoDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_LineDeskInfoDesc::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_LineDeskInfoDesc::~Sheet_LineDeskInfoDesc() {
  SharedDtor();
}

void Sheet_LineDeskInfoDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_LineDeskInfoDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_LineDeskInfoDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_LineDeskInfoDesc_descriptor_;
}

const Sheet_LineDeskInfoDesc& Sheet_LineDeskInfoDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

Sheet_LineDeskInfoDesc* Sheet_LineDeskInfoDesc::default_instance_ = NULL;

Sheet_LineDeskInfoDesc* Sheet_LineDeskInfoDesc::New() const {
  return new Sheet_LineDeskInfoDesc;
}

void Sheet_LineDeskInfoDesc::Clear() {
  linedeskinfodesc_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_LineDeskInfoDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.LineDeskInfoDesc LineDeskInfoDesc_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LineDeskInfoDesc_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_linedeskinfodesc_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_LineDeskInfoDesc_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_LineDeskInfoDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.LineDeskInfoDesc LineDeskInfoDesc_List = 1;
  for (int i = 0; i < this->linedeskinfodesc_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->linedeskinfodesc_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_LineDeskInfoDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.LineDeskInfoDesc LineDeskInfoDesc_List = 1;
  for (int i = 0; i < this->linedeskinfodesc_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->linedeskinfodesc_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_LineDeskInfoDesc::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.LineDeskInfoDesc LineDeskInfoDesc_List = 1;
  total_size += 1 * this->linedeskinfodesc_list_size();
  for (int i = 0; i < this->linedeskinfodesc_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->linedeskinfodesc_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_LineDeskInfoDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_LineDeskInfoDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_LineDeskInfoDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_LineDeskInfoDesc::MergeFrom(const Sheet_LineDeskInfoDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  linedeskinfodesc_list_.MergeFrom(from.linedeskinfodesc_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_LineDeskInfoDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_LineDeskInfoDesc::CopyFrom(const Sheet_LineDeskInfoDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_LineDeskInfoDesc::IsInitialized() const {

  return true;
}

void Sheet_LineDeskInfoDesc::Swap(Sheet_LineDeskInfoDesc* other) {
  if (other != this) {
    linedeskinfodesc_list_.Swap(&other->linedeskinfodesc_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_LineDeskInfoDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_LineDeskInfoDesc_descriptor_;
  metadata.reflection = Sheet_LineDeskInfoDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LineAlgoDesc::kAlgoIDFieldNumber;
const int LineAlgoDesc::kAlgoNameFieldNumber;
const int LineAlgoDesc::kAlgoDescFieldNumber;
const int LineAlgoDesc::kLevelChi5FieldNumber;
const int LineAlgoDesc::kLevelChi4FieldNumber;
const int LineAlgoDesc::kLevelChi3FieldNumber;
const int LineAlgoDesc::kLevelChi2FieldNumber;
const int LineAlgoDesc::kLevelChi1FieldNumber;
const int LineAlgoDesc::kLevelFang1FieldNumber;
const int LineAlgoDesc::kLevelFang2FieldNumber;
const int LineAlgoDesc::kLevelFang3FieldNumber;
const int LineAlgoDesc::kLevelFang4FieldNumber;
const int LineAlgoDesc::kLevelFang5FieldNumber;
const int LineAlgoDesc::kUserLuckSectionFieldNumber;
const int LineAlgoDesc::kVecUserLuckSectionFieldNumber;
const int LineAlgoDesc::kUserNewSectionFieldNumber;
const int LineAlgoDesc::kVecUserNewSectionFieldNumber;
const int LineAlgoDesc::kUserNewLuckValFieldNumber;
const int LineAlgoDesc::kVecUserNewLuckValFieldNumber;
const int LineAlgoDesc::kUserRechargeSectionFieldNumber;
const int LineAlgoDesc::kVecUserRechargeSectionFieldNumber;
const int LineAlgoDesc::kUserRechargeLuckyValFieldNumber;
const int LineAlgoDesc::kVecUserRechargeLuckyValFieldNumber;
const int LineAlgoDesc::kUserLuceFlagFieldNumber;
#endif  // !_MSC_VER

LineAlgoDesc::LineAlgoDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LineAlgoDesc::InitAsDefaultInstance() {
}

LineAlgoDesc::LineAlgoDesc(const LineAlgoDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LineAlgoDesc::SharedCtor() {
  _cached_size_ = 0;
  algoid_ = 0;
  algoname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  algodesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_chi5_ = GOOGLE_LONGLONG(0);
  level_chi4_ = GOOGLE_LONGLONG(0);
  level_chi3_ = GOOGLE_LONGLONG(0);
  level_chi2_ = GOOGLE_LONGLONG(0);
  level_chi1_ = GOOGLE_LONGLONG(0);
  level_fang1_ = GOOGLE_LONGLONG(0);
  level_fang2_ = GOOGLE_LONGLONG(0);
  level_fang3_ = GOOGLE_LONGLONG(0);
  level_fang4_ = GOOGLE_LONGLONG(0);
  level_fang5_ = GOOGLE_LONGLONG(0);
  userlucksection_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usernewsection_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usernewluckval_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userrechargesection_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userrechargeluckyval_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userluceflag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LineAlgoDesc::~LineAlgoDesc() {
  SharedDtor();
}

void LineAlgoDesc::SharedDtor() {
  if (algoname_ != &::google::protobuf::internal::kEmptyString) {
    delete algoname_;
  }
  if (algodesc_ != &::google::protobuf::internal::kEmptyString) {
    delete algodesc_;
  }
  if (userlucksection_ != &::google::protobuf::internal::kEmptyString) {
    delete userlucksection_;
  }
  if (usernewsection_ != &::google::protobuf::internal::kEmptyString) {
    delete usernewsection_;
  }
  if (usernewluckval_ != &::google::protobuf::internal::kEmptyString) {
    delete usernewluckval_;
  }
  if (userrechargesection_ != &::google::protobuf::internal::kEmptyString) {
    delete userrechargesection_;
  }
  if (userrechargeluckyval_ != &::google::protobuf::internal::kEmptyString) {
    delete userrechargeluckyval_;
  }
  if (this != default_instance_) {
  }
}

void LineAlgoDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineAlgoDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineAlgoDesc_descriptor_;
}

const LineAlgoDesc& LineAlgoDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

LineAlgoDesc* LineAlgoDesc::default_instance_ = NULL;

LineAlgoDesc* LineAlgoDesc::New() const {
  return new LineAlgoDesc;
}

void LineAlgoDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    algoid_ = 0;
    if (has_algoname()) {
      if (algoname_ != &::google::protobuf::internal::kEmptyString) {
        algoname_->clear();
      }
    }
    if (has_algodesc()) {
      if (algodesc_ != &::google::protobuf::internal::kEmptyString) {
        algodesc_->clear();
      }
    }
    level_chi5_ = GOOGLE_LONGLONG(0);
    level_chi4_ = GOOGLE_LONGLONG(0);
    level_chi3_ = GOOGLE_LONGLONG(0);
    level_chi2_ = GOOGLE_LONGLONG(0);
    level_chi1_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    level_fang1_ = GOOGLE_LONGLONG(0);
    level_fang2_ = GOOGLE_LONGLONG(0);
    level_fang3_ = GOOGLE_LONGLONG(0);
    level_fang4_ = GOOGLE_LONGLONG(0);
    level_fang5_ = GOOGLE_LONGLONG(0);
    if (has_userlucksection()) {
      if (userlucksection_ != &::google::protobuf::internal::kEmptyString) {
        userlucksection_->clear();
      }
    }
    if (has_usernewsection()) {
      if (usernewsection_ != &::google::protobuf::internal::kEmptyString) {
        usernewsection_->clear();
      }
    }
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (has_usernewluckval()) {
      if (usernewluckval_ != &::google::protobuf::internal::kEmptyString) {
        usernewluckval_->clear();
      }
    }
    if (has_userrechargesection()) {
      if (userrechargesection_ != &::google::protobuf::internal::kEmptyString) {
        userrechargesection_->clear();
      }
    }
    if (has_userrechargeluckyval()) {
      if (userrechargeluckyval_ != &::google::protobuf::internal::kEmptyString) {
        userrechargeluckyval_->clear();
      }
    }
    userluceflag_ = 0;
  }
  vecuserlucksection_.Clear();
  vecusernewsection_.Clear();
  vecusernewluckval_.Clear();
  vecuserrechargesection_.Clear();
  vecuserrechargeluckyval_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LineAlgoDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 AlgoID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &algoid_)));
          set_has_algoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AlgoName;
        break;
      }

      // optional string AlgoName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AlgoName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_algoname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->algoname().data(), this->algoname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_AlgoDesc;
        break;
      }

      // optional string AlgoDesc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AlgoDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_algodesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->algodesc().data(), this->algodesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Level_Chi5;
        break;
      }

      // optional int64 Level_Chi5 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level_Chi5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &level_chi5_)));
          set_has_level_chi5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Level_Chi4;
        break;
      }

      // optional int64 Level_Chi4 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level_Chi4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &level_chi4_)));
          set_has_level_chi4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Level_Chi3;
        break;
      }

      // optional int64 Level_Chi3 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level_Chi3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &level_chi3_)));
          set_has_level_chi3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Level_Chi2;
        break;
      }

      // optional int64 Level_Chi2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level_Chi2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &level_chi2_)));
          set_has_level_chi2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_Level_Chi1;
        break;
      }

      // optional int64 Level_Chi1 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level_Chi1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &level_chi1_)));
          set_has_level_chi1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_Level_Fang1;
        break;
      }

      // optional int64 Level_Fang1 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level_Fang1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &level_fang1_)));
          set_has_level_fang1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_Level_Fang2;
        break;
      }

      // optional int64 Level_Fang2 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level_Fang2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &level_fang2_)));
          set_has_level_fang2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_Level_Fang3;
        break;
      }

      // optional int64 Level_Fang3 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level_Fang3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &level_fang3_)));
          set_has_level_fang3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_Level_Fang4;
        break;
      }

      // optional int64 Level_Fang4 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level_Fang4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &level_fang4_)));
          set_has_level_fang4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_Level_Fang5;
        break;
      }

      // optional int64 Level_Fang5 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level_Fang5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &level_fang5_)));
          set_has_level_fang5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_UserLuckSection;
        break;
      }

      // optional string UserLuckSection = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserLuckSection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userlucksection()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userlucksection().data(), this->userlucksection().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_VecUserLuckSection;
        break;
      }

      // repeated int32 VecUserLuckSection = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VecUserLuckSection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 120, input, this->mutable_vecuserlucksection())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_vecuserlucksection())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_VecUserLuckSection;
        if (input->ExpectTag(130)) goto parse_UserNewSection;
        break;
      }

      // optional string UserNewSection = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserNewSection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usernewsection()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->usernewsection().data(), this->usernewsection().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_VecUserNewSection;
        break;
      }

      // repeated int32 VecUserNewSection = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VecUserNewSection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 136, input, this->mutable_vecusernewsection())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_vecusernewsection())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_VecUserNewSection;
        if (input->ExpectTag(146)) goto parse_UserNewLuckVal;
        break;
      }

      // optional string UserNewLuckVal = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserNewLuckVal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usernewluckval()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->usernewluckval().data(), this->usernewluckval().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_VecUserNewLuckVal;
        break;
      }

      // repeated int32 VecUserNewLuckVal = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VecUserNewLuckVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 152, input, this->mutable_vecusernewluckval())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_vecusernewluckval())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_VecUserNewLuckVal;
        if (input->ExpectTag(162)) goto parse_UserRechargeSection;
        break;
      }

      // optional string UserRechargeSection = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserRechargeSection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userrechargesection()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userrechargesection().data(), this->userrechargesection().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_VecUserRechargeSection;
        break;
      }

      // repeated int32 VecUserRechargeSection = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VecUserRechargeSection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 168, input, this->mutable_vecuserrechargesection())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_vecuserrechargesection())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_VecUserRechargeSection;
        if (input->ExpectTag(178)) goto parse_UserRechargeLuckyVal;
        break;
      }

      // optional string UserRechargeLuckyVal = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserRechargeLuckyVal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userrechargeluckyval()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userrechargeluckyval().data(), this->userrechargeluckyval().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_VecUserRechargeLuckyVal;
        break;
      }

      // repeated int32 VecUserRechargeLuckyVal = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VecUserRechargeLuckyVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 184, input, this->mutable_vecuserrechargeluckyval())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_vecuserrechargeluckyval())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_VecUserRechargeLuckyVal;
        if (input->ExpectTag(192)) goto parse_UserLuceFlag;
        break;
      }

      // optional int32 UserLuceFlag = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserLuceFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userluceflag_)));
          set_has_userluceflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LineAlgoDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 AlgoID = 1;
  if (has_algoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->algoid(), output);
  }

  // optional string AlgoName = 2;
  if (has_algoname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->algoname().data(), this->algoname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->algoname(), output);
  }

  // optional string AlgoDesc = 3;
  if (has_algodesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->algodesc().data(), this->algodesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->algodesc(), output);
  }

  // optional int64 Level_Chi5 = 4;
  if (has_level_chi5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->level_chi5(), output);
  }

  // optional int64 Level_Chi4 = 5;
  if (has_level_chi4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->level_chi4(), output);
  }

  // optional int64 Level_Chi3 = 6;
  if (has_level_chi3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->level_chi3(), output);
  }

  // optional int64 Level_Chi2 = 7;
  if (has_level_chi2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->level_chi2(), output);
  }

  // optional int64 Level_Chi1 = 8;
  if (has_level_chi1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->level_chi1(), output);
  }

  // optional int64 Level_Fang1 = 9;
  if (has_level_fang1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->level_fang1(), output);
  }

  // optional int64 Level_Fang2 = 10;
  if (has_level_fang2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->level_fang2(), output);
  }

  // optional int64 Level_Fang3 = 11;
  if (has_level_fang3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->level_fang3(), output);
  }

  // optional int64 Level_Fang4 = 12;
  if (has_level_fang4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->level_fang4(), output);
  }

  // optional int64 Level_Fang5 = 13;
  if (has_level_fang5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->level_fang5(), output);
  }

  // optional string UserLuckSection = 14;
  if (has_userlucksection()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userlucksection().data(), this->userlucksection().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->userlucksection(), output);
  }

  // repeated int32 VecUserLuckSection = 15;
  for (int i = 0; i < this->vecuserlucksection_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      15, this->vecuserlucksection(i), output);
  }

  // optional string UserNewSection = 16;
  if (has_usernewsection()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usernewsection().data(), this->usernewsection().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->usernewsection(), output);
  }

  // repeated int32 VecUserNewSection = 17;
  for (int i = 0; i < this->vecusernewsection_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      17, this->vecusernewsection(i), output);
  }

  // optional string UserNewLuckVal = 18;
  if (has_usernewluckval()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usernewluckval().data(), this->usernewluckval().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->usernewluckval(), output);
  }

  // repeated int32 VecUserNewLuckVal = 19;
  for (int i = 0; i < this->vecusernewluckval_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      19, this->vecusernewluckval(i), output);
  }

  // optional string UserRechargeSection = 20;
  if (has_userrechargesection()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userrechargesection().data(), this->userrechargesection().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->userrechargesection(), output);
  }

  // repeated int32 VecUserRechargeSection = 21;
  for (int i = 0; i < this->vecuserrechargesection_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      21, this->vecuserrechargesection(i), output);
  }

  // optional string UserRechargeLuckyVal = 22;
  if (has_userrechargeluckyval()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userrechargeluckyval().data(), this->userrechargeluckyval().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->userrechargeluckyval(), output);
  }

  // repeated int32 VecUserRechargeLuckyVal = 23;
  for (int i = 0; i < this->vecuserrechargeluckyval_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      23, this->vecuserrechargeluckyval(i), output);
  }

  // optional int32 UserLuceFlag = 24;
  if (has_userluceflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->userluceflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LineAlgoDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 AlgoID = 1;
  if (has_algoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->algoid(), target);
  }

  // optional string AlgoName = 2;
  if (has_algoname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->algoname().data(), this->algoname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->algoname(), target);
  }

  // optional string AlgoDesc = 3;
  if (has_algodesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->algodesc().data(), this->algodesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->algodesc(), target);
  }

  // optional int64 Level_Chi5 = 4;
  if (has_level_chi5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->level_chi5(), target);
  }

  // optional int64 Level_Chi4 = 5;
  if (has_level_chi4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->level_chi4(), target);
  }

  // optional int64 Level_Chi3 = 6;
  if (has_level_chi3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->level_chi3(), target);
  }

  // optional int64 Level_Chi2 = 7;
  if (has_level_chi2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->level_chi2(), target);
  }

  // optional int64 Level_Chi1 = 8;
  if (has_level_chi1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->level_chi1(), target);
  }

  // optional int64 Level_Fang1 = 9;
  if (has_level_fang1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->level_fang1(), target);
  }

  // optional int64 Level_Fang2 = 10;
  if (has_level_fang2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->level_fang2(), target);
  }

  // optional int64 Level_Fang3 = 11;
  if (has_level_fang3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->level_fang3(), target);
  }

  // optional int64 Level_Fang4 = 12;
  if (has_level_fang4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->level_fang4(), target);
  }

  // optional int64 Level_Fang5 = 13;
  if (has_level_fang5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->level_fang5(), target);
  }

  // optional string UserLuckSection = 14;
  if (has_userlucksection()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userlucksection().data(), this->userlucksection().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->userlucksection(), target);
  }

  // repeated int32 VecUserLuckSection = 15;
  for (int i = 0; i < this->vecuserlucksection_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(15, this->vecuserlucksection(i), target);
  }

  // optional string UserNewSection = 16;
  if (has_usernewsection()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usernewsection().data(), this->usernewsection().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->usernewsection(), target);
  }

  // repeated int32 VecUserNewSection = 17;
  for (int i = 0; i < this->vecusernewsection_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(17, this->vecusernewsection(i), target);
  }

  // optional string UserNewLuckVal = 18;
  if (has_usernewluckval()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usernewluckval().data(), this->usernewluckval().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->usernewluckval(), target);
  }

  // repeated int32 VecUserNewLuckVal = 19;
  for (int i = 0; i < this->vecusernewluckval_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(19, this->vecusernewluckval(i), target);
  }

  // optional string UserRechargeSection = 20;
  if (has_userrechargesection()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userrechargesection().data(), this->userrechargesection().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->userrechargesection(), target);
  }

  // repeated int32 VecUserRechargeSection = 21;
  for (int i = 0; i < this->vecuserrechargesection_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(21, this->vecuserrechargesection(i), target);
  }

  // optional string UserRechargeLuckyVal = 22;
  if (has_userrechargeluckyval()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userrechargeluckyval().data(), this->userrechargeluckyval().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->userrechargeluckyval(), target);
  }

  // repeated int32 VecUserRechargeLuckyVal = 23;
  for (int i = 0; i < this->vecuserrechargeluckyval_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(23, this->vecuserrechargeluckyval(i), target);
  }

  // optional int32 UserLuceFlag = 24;
  if (has_userluceflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->userluceflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LineAlgoDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 AlgoID = 1;
    if (has_algoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->algoid());
    }

    // optional string AlgoName = 2;
    if (has_algoname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->algoname());
    }

    // optional string AlgoDesc = 3;
    if (has_algodesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->algodesc());
    }

    // optional int64 Level_Chi5 = 4;
    if (has_level_chi5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->level_chi5());
    }

    // optional int64 Level_Chi4 = 5;
    if (has_level_chi4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->level_chi4());
    }

    // optional int64 Level_Chi3 = 6;
    if (has_level_chi3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->level_chi3());
    }

    // optional int64 Level_Chi2 = 7;
    if (has_level_chi2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->level_chi2());
    }

    // optional int64 Level_Chi1 = 8;
    if (has_level_chi1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->level_chi1());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 Level_Fang1 = 9;
    if (has_level_fang1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->level_fang1());
    }

    // optional int64 Level_Fang2 = 10;
    if (has_level_fang2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->level_fang2());
    }

    // optional int64 Level_Fang3 = 11;
    if (has_level_fang3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->level_fang3());
    }

    // optional int64 Level_Fang4 = 12;
    if (has_level_fang4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->level_fang4());
    }

    // optional int64 Level_Fang5 = 13;
    if (has_level_fang5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->level_fang5());
    }

    // optional string UserLuckSection = 14;
    if (has_userlucksection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userlucksection());
    }

    // optional string UserNewSection = 16;
    if (has_usernewsection()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usernewsection());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional string UserNewLuckVal = 18;
    if (has_usernewluckval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usernewluckval());
    }

    // optional string UserRechargeSection = 20;
    if (has_userrechargesection()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userrechargesection());
    }

    // optional string UserRechargeLuckyVal = 22;
    if (has_userrechargeluckyval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userrechargeluckyval());
    }

    // optional int32 UserLuceFlag = 24;
    if (has_userluceflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userluceflag());
    }

  }
  // repeated int32 VecUserLuckSection = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->vecuserlucksection_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->vecuserlucksection(i));
    }
    total_size += 1 * this->vecuserlucksection_size() + data_size;
  }

  // repeated int32 VecUserNewSection = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->vecusernewsection_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->vecusernewsection(i));
    }
    total_size += 2 * this->vecusernewsection_size() + data_size;
  }

  // repeated int32 VecUserNewLuckVal = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->vecusernewluckval_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->vecusernewluckval(i));
    }
    total_size += 2 * this->vecusernewluckval_size() + data_size;
  }

  // repeated int32 VecUserRechargeSection = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->vecuserrechargesection_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->vecuserrechargesection(i));
    }
    total_size += 2 * this->vecuserrechargesection_size() + data_size;
  }

  // repeated int32 VecUserRechargeLuckyVal = 23;
  {
    int data_size = 0;
    for (int i = 0; i < this->vecuserrechargeluckyval_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->vecuserrechargeluckyval(i));
    }
    total_size += 2 * this->vecuserrechargeluckyval_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineAlgoDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LineAlgoDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LineAlgoDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LineAlgoDesc::MergeFrom(const LineAlgoDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  vecuserlucksection_.MergeFrom(from.vecuserlucksection_);
  vecusernewsection_.MergeFrom(from.vecusernewsection_);
  vecusernewluckval_.MergeFrom(from.vecusernewluckval_);
  vecuserrechargesection_.MergeFrom(from.vecuserrechargesection_);
  vecuserrechargeluckyval_.MergeFrom(from.vecuserrechargeluckyval_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_algoid()) {
      set_algoid(from.algoid());
    }
    if (from.has_algoname()) {
      set_algoname(from.algoname());
    }
    if (from.has_algodesc()) {
      set_algodesc(from.algodesc());
    }
    if (from.has_level_chi5()) {
      set_level_chi5(from.level_chi5());
    }
    if (from.has_level_chi4()) {
      set_level_chi4(from.level_chi4());
    }
    if (from.has_level_chi3()) {
      set_level_chi3(from.level_chi3());
    }
    if (from.has_level_chi2()) {
      set_level_chi2(from.level_chi2());
    }
    if (from.has_level_chi1()) {
      set_level_chi1(from.level_chi1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level_fang1()) {
      set_level_fang1(from.level_fang1());
    }
    if (from.has_level_fang2()) {
      set_level_fang2(from.level_fang2());
    }
    if (from.has_level_fang3()) {
      set_level_fang3(from.level_fang3());
    }
    if (from.has_level_fang4()) {
      set_level_fang4(from.level_fang4());
    }
    if (from.has_level_fang5()) {
      set_level_fang5(from.level_fang5());
    }
    if (from.has_userlucksection()) {
      set_userlucksection(from.userlucksection());
    }
    if (from.has_usernewsection()) {
      set_usernewsection(from.usernewsection());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_usernewluckval()) {
      set_usernewluckval(from.usernewluckval());
    }
    if (from.has_userrechargesection()) {
      set_userrechargesection(from.userrechargesection());
    }
    if (from.has_userrechargeluckyval()) {
      set_userrechargeluckyval(from.userrechargeluckyval());
    }
    if (from.has_userluceflag()) {
      set_userluceflag(from.userluceflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LineAlgoDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineAlgoDesc::CopyFrom(const LineAlgoDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineAlgoDesc::IsInitialized() const {

  return true;
}

void LineAlgoDesc::Swap(LineAlgoDesc* other) {
  if (other != this) {
    std::swap(algoid_, other->algoid_);
    std::swap(algoname_, other->algoname_);
    std::swap(algodesc_, other->algodesc_);
    std::swap(level_chi5_, other->level_chi5_);
    std::swap(level_chi4_, other->level_chi4_);
    std::swap(level_chi3_, other->level_chi3_);
    std::swap(level_chi2_, other->level_chi2_);
    std::swap(level_chi1_, other->level_chi1_);
    std::swap(level_fang1_, other->level_fang1_);
    std::swap(level_fang2_, other->level_fang2_);
    std::swap(level_fang3_, other->level_fang3_);
    std::swap(level_fang4_, other->level_fang4_);
    std::swap(level_fang5_, other->level_fang5_);
    std::swap(userlucksection_, other->userlucksection_);
    vecuserlucksection_.Swap(&other->vecuserlucksection_);
    std::swap(usernewsection_, other->usernewsection_);
    vecusernewsection_.Swap(&other->vecusernewsection_);
    std::swap(usernewluckval_, other->usernewluckval_);
    vecusernewluckval_.Swap(&other->vecusernewluckval_);
    std::swap(userrechargesection_, other->userrechargesection_);
    vecuserrechargesection_.Swap(&other->vecuserrechargesection_);
    std::swap(userrechargeluckyval_, other->userrechargeluckyval_);
    vecuserrechargeluckyval_.Swap(&other->vecuserrechargeluckyval_);
    std::swap(userluceflag_, other->userluceflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LineAlgoDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LineAlgoDesc_descriptor_;
  metadata.reflection = LineAlgoDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_LineAlgoDesc::kLineAlgoDescListFieldNumber;
#endif  // !_MSC_VER

Sheet_LineAlgoDesc::Sheet_LineAlgoDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_LineAlgoDesc::InitAsDefaultInstance() {
}

Sheet_LineAlgoDesc::Sheet_LineAlgoDesc(const Sheet_LineAlgoDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_LineAlgoDesc::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_LineAlgoDesc::~Sheet_LineAlgoDesc() {
  SharedDtor();
}

void Sheet_LineAlgoDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_LineAlgoDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_LineAlgoDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_LineAlgoDesc_descriptor_;
}

const Sheet_LineAlgoDesc& Sheet_LineAlgoDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FishResMeta_2eproto();
  return *default_instance_;
}

Sheet_LineAlgoDesc* Sheet_LineAlgoDesc::default_instance_ = NULL;

Sheet_LineAlgoDesc* Sheet_LineAlgoDesc::New() const {
  return new Sheet_LineAlgoDesc;
}

void Sheet_LineAlgoDesc::Clear() {
  linealgodesc_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_LineAlgoDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.LineAlgoDesc LineAlgoDesc_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LineAlgoDesc_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_linealgodesc_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_LineAlgoDesc_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_LineAlgoDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.LineAlgoDesc LineAlgoDesc_List = 1;
  for (int i = 0; i < this->linealgodesc_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->linealgodesc_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_LineAlgoDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.LineAlgoDesc LineAlgoDesc_List = 1;
  for (int i = 0; i < this->linealgodesc_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->linealgodesc_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_LineAlgoDesc::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.LineAlgoDesc LineAlgoDesc_List = 1;
  total_size += 1 * this->linealgodesc_list_size();
  for (int i = 0; i < this->linealgodesc_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->linealgodesc_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_LineAlgoDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_LineAlgoDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_LineAlgoDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_LineAlgoDesc::MergeFrom(const Sheet_LineAlgoDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  linealgodesc_list_.MergeFrom(from.linealgodesc_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_LineAlgoDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_LineAlgoDesc::CopyFrom(const Sheet_LineAlgoDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_LineAlgoDesc::IsInitialized() const {

  return true;
}

void Sheet_LineAlgoDesc::Swap(Sheet_LineAlgoDesc* other) {
  if (other != this) {
    linealgodesc_list_.Swap(&other->linealgodesc_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_LineAlgoDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_LineAlgoDesc_descriptor_;
  metadata.reflection = Sheet_LineAlgoDesc_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
