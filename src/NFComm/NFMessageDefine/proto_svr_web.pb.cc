// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_svr_web.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto_svr_web.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* Proto_Web_CommonRspNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_Web_CommonRspNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_Web_KillServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_Web_KillServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_Web_SetBaoDi_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_Web_SetBaoDi_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_Web_SetTaxBaoDi_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_Web_SetTaxBaoDi_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_Web_ModifyAgent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_Web_ModifyAgent_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_Web_ModifyLiuShui_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_Web_ModifyLiuShui_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_Web_SetBan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_Web_SetBan_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_Web_SetTransfer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_Web_SetTransfer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_Web_SendUserMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_Web_SendUserMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_Web_ZhuangZhang_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_Web_ZhuangZhang_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_Web_GiveMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_Web_GiveMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* WhileBlackGameList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WhileBlackGameList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_Web_SetWhiteBlackReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_Web_SetWhiteBlackReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_Web_DeleteWhiteBlackReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_Web_DeleteWhiteBlackReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_Web_SetGMCtrlGiveDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_Web_SetGMCtrlGiveDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_Web_DeleteGMCtrlGiveDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_Web_DeleteGMCtrlGiveDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Web_ModifyDbData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Web_ModifyDbData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_Web_ClearJiangChiReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_Web_ClearJiangChiReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_Web_SetJiangChiReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_Web_SetJiangChiReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_Web_SetRoomStatusReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_Web_SetRoomStatusReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_Web_AddTedeemCodeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_Web_AddTedeemCodeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_Web_ModifyShowUserIdReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_Web_ModifyShowUserIdReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_Web_ModifyNickNameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_Web_ModifyNickNameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_Web_ModifyVipLevelReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_Web_ModifyVipLevelReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_Web_ModifyAccountPasswordReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_Web_ModifyAccountPasswordReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_Web_ModifyBankPasswordReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_Web_ModifyBankPasswordReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_Web_ModifyVipRechargeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_Web_ModifyVipRechargeReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Proto_WebSvrMsgID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_5fsvr_5fweb_2eproto() {
  protobuf_AddDesc_proto_5fsvr_5fweb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto_svr_web.proto");
  GOOGLE_CHECK(file != NULL);
  Proto_Web_CommonRspNotify_descriptor_ = file->message_type(0);
  static const int Proto_Web_CommonRspNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_CommonRspNotify, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_CommonRspNotify, msg_),
  };
  Proto_Web_CommonRspNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_Web_CommonRspNotify_descriptor_,
      Proto_Web_CommonRspNotify::default_instance_,
      Proto_Web_CommonRspNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_CommonRspNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_CommonRspNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_Web_CommonRspNotify));
  Proto_Web_KillServer_descriptor_ = file->message_type(1);
  static const int Proto_Web_KillServer_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_KillServer, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_KillServer, contract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_KillServer, machine_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_KillServer, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_KillServer, bus_name_),
  };
  Proto_Web_KillServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_Web_KillServer_descriptor_,
      Proto_Web_KillServer::default_instance_,
      Proto_Web_KillServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_KillServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_KillServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_Web_KillServer));
  Proto_Web_SetBaoDi_descriptor_ = file->message_type(2);
  static const int Proto_Web_SetBaoDi_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetBaoDi, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetBaoDi, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetBaoDi, new_baodi_),
  };
  Proto_Web_SetBaoDi_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_Web_SetBaoDi_descriptor_,
      Proto_Web_SetBaoDi::default_instance_,
      Proto_Web_SetBaoDi_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetBaoDi, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetBaoDi, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_Web_SetBaoDi));
  Proto_Web_SetTaxBaoDi_descriptor_ = file->message_type(3);
  static const int Proto_Web_SetTaxBaoDi_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetTaxBaoDi, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetTaxBaoDi, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetTaxBaoDi, new_tax_baodi_),
  };
  Proto_Web_SetTaxBaoDi_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_Web_SetTaxBaoDi_descriptor_,
      Proto_Web_SetTaxBaoDi::default_instance_,
      Proto_Web_SetTaxBaoDi_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetTaxBaoDi, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetTaxBaoDi, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_Web_SetTaxBaoDi));
  Proto_Web_ModifyAgent_descriptor_ = file->message_type(4);
  static const int Proto_Web_ModifyAgent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyAgent, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyAgent, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyAgent, new_agent_id_),
  };
  Proto_Web_ModifyAgent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_Web_ModifyAgent_descriptor_,
      Proto_Web_ModifyAgent::default_instance_,
      Proto_Web_ModifyAgent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyAgent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyAgent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_Web_ModifyAgent));
  Proto_Web_ModifyLiuShui_descriptor_ = file->message_type(5);
  static const int Proto_Web_ModifyLiuShui_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyLiuShui, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyLiuShui, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyLiuShui, liu_shui_),
  };
  Proto_Web_ModifyLiuShui_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_Web_ModifyLiuShui_descriptor_,
      Proto_Web_ModifyLiuShui::default_instance_,
      Proto_Web_ModifyLiuShui_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyLiuShui, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyLiuShui, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_Web_ModifyLiuShui));
  Proto_Web_SetBan_descriptor_ = file->message_type(6);
  static const int Proto_Web_SetBan_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetBan, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetBan, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetBan, is_ban_),
  };
  Proto_Web_SetBan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_Web_SetBan_descriptor_,
      Proto_Web_SetBan::default_instance_,
      Proto_Web_SetBan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetBan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetBan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_Web_SetBan));
  Proto_Web_SetTransfer_descriptor_ = file->message_type(7);
  static const int Proto_Web_SetTransfer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetTransfer, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetTransfer, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetTransfer, no_transfer_),
  };
  Proto_Web_SetTransfer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_Web_SetTransfer_descriptor_,
      Proto_Web_SetTransfer::default_instance_,
      Proto_Web_SetTransfer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetTransfer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetTransfer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_Web_SetTransfer));
  Proto_Web_SendUserMail_descriptor_ = file->message_type(8);
  static const int Proto_Web_SendUserMail_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SendUserMail, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SendUserMail, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SendUserMail, send_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SendUserMail, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SendUserMail, content_),
  };
  Proto_Web_SendUserMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_Web_SendUserMail_descriptor_,
      Proto_Web_SendUserMail::default_instance_,
      Proto_Web_SendUserMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SendUserMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SendUserMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_Web_SendUserMail));
  Proto_Web_ZhuangZhang_descriptor_ = file->message_type(9);
  static const int Proto_Web_ZhuangZhang_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ZhuangZhang, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ZhuangZhang, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ZhuangZhang, amount_),
  };
  Proto_Web_ZhuangZhang_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_Web_ZhuangZhang_descriptor_,
      Proto_Web_ZhuangZhang::default_instance_,
      Proto_Web_ZhuangZhang_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ZhuangZhang, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ZhuangZhang, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_Web_ZhuangZhang));
  Proto_Web_GiveMoney_descriptor_ = file->message_type(10);
  static const int Proto_Web_GiveMoney_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_GiveMoney, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_GiveMoney, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_GiveMoney, amount_),
  };
  Proto_Web_GiveMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_Web_GiveMoney_descriptor_,
      Proto_Web_GiveMoney::default_instance_,
      Proto_Web_GiveMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_GiveMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_GiveMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_Web_GiveMoney));
  WhileBlackGameList_descriptor_ = file->message_type(11);
  static const int WhileBlackGameList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhileBlackGameList, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhileBlackGameList, room_id_),
  };
  WhileBlackGameList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WhileBlackGameList_descriptor_,
      WhileBlackGameList::default_instance_,
      WhileBlackGameList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhileBlackGameList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhileBlackGameList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WhileBlackGameList));
  Proto_Web_SetWhiteBlackReq_descriptor_ = file->message_type(12);
  static const int Proto_Web_SetWhiteBlackReq_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetWhiteBlackReq, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetWhiteBlackReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetWhiteBlackReq, roster_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetWhiteBlackReq, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetWhiteBlackReq, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetWhiteBlackReq, control_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetWhiteBlackReq, opt_mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetWhiteBlackReq, max_win_jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetWhiteBlackReq, rate_mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetWhiteBlackReq, game_list_),
  };
  Proto_Web_SetWhiteBlackReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_Web_SetWhiteBlackReq_descriptor_,
      Proto_Web_SetWhiteBlackReq::default_instance_,
      Proto_Web_SetWhiteBlackReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetWhiteBlackReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetWhiteBlackReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_Web_SetWhiteBlackReq));
  Proto_Web_DeleteWhiteBlackReq_descriptor_ = file->message_type(13);
  static const int Proto_Web_DeleteWhiteBlackReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_DeleteWhiteBlackReq, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_DeleteWhiteBlackReq, whiteblack_id_),
  };
  Proto_Web_DeleteWhiteBlackReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_Web_DeleteWhiteBlackReq_descriptor_,
      Proto_Web_DeleteWhiteBlackReq::default_instance_,
      Proto_Web_DeleteWhiteBlackReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_DeleteWhiteBlackReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_DeleteWhiteBlackReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_Web_DeleteWhiteBlackReq));
  Proto_Web_SetGMCtrlGiveDataReq_descriptor_ = file->message_type(14);
  static const int Proto_Web_SetGMCtrlGiveDataReq_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetGMCtrlGiveDataReq, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetGMCtrlGiveDataReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetGMCtrlGiveDataReq, control_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetGMCtrlGiveDataReq, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetGMCtrlGiveDataReq, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetGMCtrlGiveDataReq, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetGMCtrlGiveDataReq, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetGMCtrlGiveDataReq, jackpot_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetGMCtrlGiveDataReq, jackpot_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetGMCtrlGiveDataReq, jackpot_jetton_),
  };
  Proto_Web_SetGMCtrlGiveDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_Web_SetGMCtrlGiveDataReq_descriptor_,
      Proto_Web_SetGMCtrlGiveDataReq::default_instance_,
      Proto_Web_SetGMCtrlGiveDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetGMCtrlGiveDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetGMCtrlGiveDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_Web_SetGMCtrlGiveDataReq));
  Proto_Web_DeleteGMCtrlGiveDataReq_descriptor_ = file->message_type(15);
  static const int Proto_Web_DeleteGMCtrlGiveDataReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_DeleteGMCtrlGiveDataReq, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_DeleteGMCtrlGiveDataReq, id_),
  };
  Proto_Web_DeleteGMCtrlGiveDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_Web_DeleteGMCtrlGiveDataReq_descriptor_,
      Proto_Web_DeleteGMCtrlGiveDataReq::default_instance_,
      Proto_Web_DeleteGMCtrlGiveDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_DeleteGMCtrlGiveDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_DeleteGMCtrlGiveDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_Web_DeleteGMCtrlGiveDataReq));
  Web_ModifyDbData_descriptor_ = file->message_type(16);
  static const int Web_ModifyDbData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Web_ModifyDbData, db_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Web_ModifyDbData, tb_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Web_ModifyDbData, db_field_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Web_ModifyDbData, db_field_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Web_ModifyDbData, db_cond_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Web_ModifyDbData, db_cond_value_),
  };
  Web_ModifyDbData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Web_ModifyDbData_descriptor_,
      Web_ModifyDbData::default_instance_,
      Web_ModifyDbData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Web_ModifyDbData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Web_ModifyDbData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Web_ModifyDbData));
  Proto_Web_ClearJiangChiReq_descriptor_ = file->message_type(17);
  static const int Proto_Web_ClearJiangChiReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ClearJiangChiReq, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ClearJiangChiReq, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ClearJiangChiReq, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ClearJiangChiReq, modify_db_),
  };
  Proto_Web_ClearJiangChiReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_Web_ClearJiangChiReq_descriptor_,
      Proto_Web_ClearJiangChiReq::default_instance_,
      Proto_Web_ClearJiangChiReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ClearJiangChiReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ClearJiangChiReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_Web_ClearJiangChiReq));
  Proto_Web_SetJiangChiReq_descriptor_ = file->message_type(18);
  static const int Proto_Web_SetJiangChiReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetJiangChiReq, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetJiangChiReq, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetJiangChiReq, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetJiangChiReq, jiang_chi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetJiangChiReq, modify_db_),
  };
  Proto_Web_SetJiangChiReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_Web_SetJiangChiReq_descriptor_,
      Proto_Web_SetJiangChiReq::default_instance_,
      Proto_Web_SetJiangChiReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetJiangChiReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetJiangChiReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_Web_SetJiangChiReq));
  Proto_Web_SetRoomStatusReq_descriptor_ = file->message_type(19);
  static const int Proto_Web_SetRoomStatusReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetRoomStatusReq, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetRoomStatusReq, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetRoomStatusReq, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetRoomStatusReq, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetRoomStatusReq, modify_db_),
  };
  Proto_Web_SetRoomStatusReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_Web_SetRoomStatusReq_descriptor_,
      Proto_Web_SetRoomStatusReq::default_instance_,
      Proto_Web_SetRoomStatusReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetRoomStatusReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_SetRoomStatusReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_Web_SetRoomStatusReq));
  Proto_Web_AddTedeemCodeReq_descriptor_ = file->message_type(20);
  static const int Proto_Web_AddTedeemCodeReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_AddTedeemCodeReq, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_AddTedeemCodeReq, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_AddTedeemCodeReq, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_AddTedeemCodeReq, code_name_),
  };
  Proto_Web_AddTedeemCodeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_Web_AddTedeemCodeReq_descriptor_,
      Proto_Web_AddTedeemCodeReq::default_instance_,
      Proto_Web_AddTedeemCodeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_AddTedeemCodeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_AddTedeemCodeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_Web_AddTedeemCodeReq));
  Proto_Web_ModifyShowUserIdReq_descriptor_ = file->message_type(21);
  static const int Proto_Web_ModifyShowUserIdReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyShowUserIdReq, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyShowUserIdReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyShowUserIdReq, show_userid_),
  };
  Proto_Web_ModifyShowUserIdReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_Web_ModifyShowUserIdReq_descriptor_,
      Proto_Web_ModifyShowUserIdReq::default_instance_,
      Proto_Web_ModifyShowUserIdReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyShowUserIdReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyShowUserIdReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_Web_ModifyShowUserIdReq));
  Proto_Web_ModifyNickNameReq_descriptor_ = file->message_type(22);
  static const int Proto_Web_ModifyNickNameReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyNickNameReq, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyNickNameReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyNickNameReq, nick_name_),
  };
  Proto_Web_ModifyNickNameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_Web_ModifyNickNameReq_descriptor_,
      Proto_Web_ModifyNickNameReq::default_instance_,
      Proto_Web_ModifyNickNameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyNickNameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyNickNameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_Web_ModifyNickNameReq));
  Proto_Web_ModifyVipLevelReq_descriptor_ = file->message_type(23);
  static const int Proto_Web_ModifyVipLevelReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyVipLevelReq, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyVipLevelReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyVipLevelReq, vip_level_),
  };
  Proto_Web_ModifyVipLevelReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_Web_ModifyVipLevelReq_descriptor_,
      Proto_Web_ModifyVipLevelReq::default_instance_,
      Proto_Web_ModifyVipLevelReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyVipLevelReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyVipLevelReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_Web_ModifyVipLevelReq));
  Proto_Web_ModifyAccountPasswordReq_descriptor_ = file->message_type(24);
  static const int Proto_Web_ModifyAccountPasswordReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyAccountPasswordReq, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyAccountPasswordReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyAccountPasswordReq, password_),
  };
  Proto_Web_ModifyAccountPasswordReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_Web_ModifyAccountPasswordReq_descriptor_,
      Proto_Web_ModifyAccountPasswordReq::default_instance_,
      Proto_Web_ModifyAccountPasswordReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyAccountPasswordReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyAccountPasswordReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_Web_ModifyAccountPasswordReq));
  Proto_Web_ModifyBankPasswordReq_descriptor_ = file->message_type(25);
  static const int Proto_Web_ModifyBankPasswordReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyBankPasswordReq, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyBankPasswordReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyBankPasswordReq, bank_password_),
  };
  Proto_Web_ModifyBankPasswordReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_Web_ModifyBankPasswordReq_descriptor_,
      Proto_Web_ModifyBankPasswordReq::default_instance_,
      Proto_Web_ModifyBankPasswordReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyBankPasswordReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyBankPasswordReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_Web_ModifyBankPasswordReq));
  Proto_Web_ModifyVipRechargeReq_descriptor_ = file->message_type(26);
  static const int Proto_Web_ModifyVipRechargeReq_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyVipRechargeReq, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyVipRechargeReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyVipRechargeReq, recharge_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyVipRechargeReq, recharge_user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyVipRechargeReq, recharge_user_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyVipRechargeReq, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyVipRechargeReq, recharge_show_userid_),
  };
  Proto_Web_ModifyVipRechargeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_Web_ModifyVipRechargeReq_descriptor_,
      Proto_Web_ModifyVipRechargeReq::default_instance_,
      Proto_Web_ModifyVipRechargeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyVipRechargeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_Web_ModifyVipRechargeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_Web_ModifyVipRechargeReq));
  Proto_WebSvrMsgID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_5fsvr_5fweb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_Web_CommonRspNotify_descriptor_, &Proto_Web_CommonRspNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_Web_KillServer_descriptor_, &Proto_Web_KillServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_Web_SetBaoDi_descriptor_, &Proto_Web_SetBaoDi::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_Web_SetTaxBaoDi_descriptor_, &Proto_Web_SetTaxBaoDi::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_Web_ModifyAgent_descriptor_, &Proto_Web_ModifyAgent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_Web_ModifyLiuShui_descriptor_, &Proto_Web_ModifyLiuShui::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_Web_SetBan_descriptor_, &Proto_Web_SetBan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_Web_SetTransfer_descriptor_, &Proto_Web_SetTransfer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_Web_SendUserMail_descriptor_, &Proto_Web_SendUserMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_Web_ZhuangZhang_descriptor_, &Proto_Web_ZhuangZhang::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_Web_GiveMoney_descriptor_, &Proto_Web_GiveMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WhileBlackGameList_descriptor_, &WhileBlackGameList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_Web_SetWhiteBlackReq_descriptor_, &Proto_Web_SetWhiteBlackReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_Web_DeleteWhiteBlackReq_descriptor_, &Proto_Web_DeleteWhiteBlackReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_Web_SetGMCtrlGiveDataReq_descriptor_, &Proto_Web_SetGMCtrlGiveDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_Web_DeleteGMCtrlGiveDataReq_descriptor_, &Proto_Web_DeleteGMCtrlGiveDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Web_ModifyDbData_descriptor_, &Web_ModifyDbData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_Web_ClearJiangChiReq_descriptor_, &Proto_Web_ClearJiangChiReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_Web_SetJiangChiReq_descriptor_, &Proto_Web_SetJiangChiReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_Web_SetRoomStatusReq_descriptor_, &Proto_Web_SetRoomStatusReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_Web_AddTedeemCodeReq_descriptor_, &Proto_Web_AddTedeemCodeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_Web_ModifyShowUserIdReq_descriptor_, &Proto_Web_ModifyShowUserIdReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_Web_ModifyNickNameReq_descriptor_, &Proto_Web_ModifyNickNameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_Web_ModifyVipLevelReq_descriptor_, &Proto_Web_ModifyVipLevelReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_Web_ModifyAccountPasswordReq_descriptor_, &Proto_Web_ModifyAccountPasswordReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_Web_ModifyBankPasswordReq_descriptor_, &Proto_Web_ModifyBankPasswordReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_Web_ModifyVipRechargeReq_descriptor_, &Proto_Web_ModifyVipRechargeReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_5fsvr_5fweb_2eproto() {
  delete Proto_Web_CommonRspNotify::default_instance_;
  delete Proto_Web_CommonRspNotify_reflection_;
  delete Proto_Web_KillServer::default_instance_;
  delete Proto_Web_KillServer_reflection_;
  delete Proto_Web_SetBaoDi::default_instance_;
  delete Proto_Web_SetBaoDi_reflection_;
  delete Proto_Web_SetTaxBaoDi::default_instance_;
  delete Proto_Web_SetTaxBaoDi_reflection_;
  delete Proto_Web_ModifyAgent::default_instance_;
  delete Proto_Web_ModifyAgent_reflection_;
  delete Proto_Web_ModifyLiuShui::default_instance_;
  delete Proto_Web_ModifyLiuShui_reflection_;
  delete Proto_Web_SetBan::default_instance_;
  delete Proto_Web_SetBan_reflection_;
  delete Proto_Web_SetTransfer::default_instance_;
  delete Proto_Web_SetTransfer_reflection_;
  delete Proto_Web_SendUserMail::default_instance_;
  delete Proto_Web_SendUserMail_reflection_;
  delete Proto_Web_ZhuangZhang::default_instance_;
  delete Proto_Web_ZhuangZhang_reflection_;
  delete Proto_Web_GiveMoney::default_instance_;
  delete Proto_Web_GiveMoney_reflection_;
  delete WhileBlackGameList::default_instance_;
  delete WhileBlackGameList_reflection_;
  delete Proto_Web_SetWhiteBlackReq::default_instance_;
  delete Proto_Web_SetWhiteBlackReq_reflection_;
  delete Proto_Web_DeleteWhiteBlackReq::default_instance_;
  delete Proto_Web_DeleteWhiteBlackReq_reflection_;
  delete Proto_Web_SetGMCtrlGiveDataReq::default_instance_;
  delete Proto_Web_SetGMCtrlGiveDataReq_reflection_;
  delete Proto_Web_DeleteGMCtrlGiveDataReq::default_instance_;
  delete Proto_Web_DeleteGMCtrlGiveDataReq_reflection_;
  delete Web_ModifyDbData::default_instance_;
  delete Web_ModifyDbData_reflection_;
  delete Proto_Web_ClearJiangChiReq::default_instance_;
  delete Proto_Web_ClearJiangChiReq_reflection_;
  delete Proto_Web_SetJiangChiReq::default_instance_;
  delete Proto_Web_SetJiangChiReq_reflection_;
  delete Proto_Web_SetRoomStatusReq::default_instance_;
  delete Proto_Web_SetRoomStatusReq_reflection_;
  delete Proto_Web_AddTedeemCodeReq::default_instance_;
  delete Proto_Web_AddTedeemCodeReq_reflection_;
  delete Proto_Web_ModifyShowUserIdReq::default_instance_;
  delete Proto_Web_ModifyShowUserIdReq_reflection_;
  delete Proto_Web_ModifyNickNameReq::default_instance_;
  delete Proto_Web_ModifyNickNameReq_reflection_;
  delete Proto_Web_ModifyVipLevelReq::default_instance_;
  delete Proto_Web_ModifyVipLevelReq_reflection_;
  delete Proto_Web_ModifyAccountPasswordReq::default_instance_;
  delete Proto_Web_ModifyAccountPasswordReq_reflection_;
  delete Proto_Web_ModifyBankPasswordReq::default_instance_;
  delete Proto_Web_ModifyBankPasswordReq_reflection_;
  delete Proto_Web_ModifyVipRechargeReq::default_instance_;
  delete Proto_Web_ModifyVipRechargeReq_reflection_;
}

void protobuf_AddDesc_proto_5fsvr_5fweb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_proto_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023proto_svr_web.proto\022\010proto_ff\032\025yd_fiel"
    "doptions.proto\032\022proto_common.proto\"8\n\031Pr"
    "oto_Web_CommonRspNotify\022\016\n\006result\030\001 \001(\005\022"
    "\013\n\003msg\030\002 \001(\t\"p\n\024Proto_Web_KillServer\022\022\n\n"
    "request_id\030\001 \001(\004\022\020\n\010contract\030\002 \001(\t\022\024\n\014ma"
    "chine_addr\030\003 \001(\t\022\n\n\002ip\030\004 \001(\t\022\020\n\010bus_name"
    "\030\005 \001(\t\"L\n\022Proto_Web_SetBaoDi\022\022\n\nrequest_"
    "id\030\001 \001(\004\022\017\n\007user_id\030\002 \001(\004\022\021\n\tnew_baodi\030\003"
    " \001(\r\"S\n\025Proto_Web_SetTaxBaoDi\022\022\n\nrequest"
    "_id\030\001 \001(\004\022\017\n\007user_id\030\002 \001(\004\022\025\n\rnew_tax_ba"
    "odi\030\003 \001(\r\"R\n\025Proto_Web_ModifyAgent\022\022\n\nre"
    "quest_id\030\001 \001(\004\022\017\n\007user_id\030\002 \001(\004\022\024\n\014new_a"
    "gent_id\030\003 \001(\004\"P\n\027Proto_Web_ModifyLiuShui"
    "\022\022\n\nrequest_id\030\001 \001(\004\022\017\n\007user_id\030\002 \001(\004\022\020\n"
    "\010liu_shui\030\003 \001(\004\"G\n\020Proto_Web_SetBan\022\022\n\nr"
    "equest_id\030\001 \001(\004\022\017\n\007user_id\030\002 \001(\004\022\016\n\006is_b"
    "an\030\003 \001(\010\"Q\n\025Proto_Web_SetTransfer\022\022\n\nreq"
    "uest_id\030\001 \001(\004\022\017\n\007user_id\030\002 \001(\004\022\023\n\013no_tra"
    "nsfer\030\003 \001(\010\"p\n\026Proto_Web_SendUserMail\022\022\n"
    "\nrequest_id\030\001 \001(\004\022\017\n\007user_id\030\002 \001(\004\022\021\n\tse"
    "nd_name\030\003 \001(\t\022\r\n\005title\030\004 \001(\t\022\017\n\007content\030"
    "\005 \001(\t\"L\n\025Proto_Web_ZhuangZhang\022\022\n\nreques"
    "t_id\030\001 \001(\004\022\017\n\007user_id\030\002 \001(\004\022\016\n\006amount\030\003 "
    "\001(\003\"J\n\023Proto_Web_GiveMoney\022\022\n\nrequest_id"
    "\030\001 \001(\004\022\017\n\007user_id\030\002 \001(\004\022\016\n\006amount\030\003 \001(\003\""
    "6\n\022WhileBlackGameList\022\017\n\007game_id\030\001 \001(\r\022\017"
    "\n\007room_id\030\002 \001(\r\"\201\002\n\032Proto_Web_SetWhiteBl"
    "ackReq\022\022\n\nrequest_id\030\001 \001(\004\022\017\n\007user_id\030\002 "
    "\001(\004\022\023\n\013roster_type\030\003 \001(\r\022\022\n\nstart_time\030\004"
    " \001(\004\022\020\n\010end_time\030\005 \001(\004\022\025\n\rcontrol_level\030"
    "\006 \001(\005\022\020\n\010opt_mark\030\007 \001(\004\022\026\n\016max_win_jetto"
    "n\030\010 \001(\004\022\021\n\trate_mark\030\t \001(\002\022/\n\tgame_list\030"
    "\n \003(\0132\034.proto_ff.WhileBlackGameList\"J\n\035P"
    "roto_Web_DeleteWhiteBlackReq\022\022\n\nrequest_"
    "id\030\001 \001(\004\022\025\n\rwhiteblack_id\030\002 \001(\004\"\345\001\n\036Prot"
    "o_Web_SetGMCtrlGiveDataReq\022\022\n\nrequest_id"
    "\030\001 \001(\004\022\017\n\007user_id\030\002 \001(\004\022\024\n\014control_type\030"
    "\003 \001(\r\022\022\n\nstart_time\030\004 \001(\004\022\020\n\010end_time\030\005 "
    "\001(\004\022\017\n\007game_id\030\006 \001(\r\022\r\n\005state\030\007 \001(\005\022\024\n\014j"
    "ackpot_type\030\010 \001(\004\022\024\n\014jackpot_rate\030\t \001(\004\022"
    "\026\n\016jackpot_jetton\030\n \001(\002\"C\n!Proto_Web_Del"
    "eteGMCtrlGiveDataReq\022\022\n\nrequest_id\030\001 \001(\004"
    "\022\n\n\002id\030\002 \001(\004\"\216\001\n\020Web_ModifyDbData\022\017\n\007db_"
    "name\030\001 \001(\t\022\017\n\007tb_name\030\002 \001(\t\022\024\n\014db_field_"
    "key\030\003 \003(\t\022\026\n\016db_field_value\030\004 \003(\t\022\023\n\013db_"
    "cond_key\030\005 \003(\t\022\025\n\rdb_cond_value\030\006 \003(\t\"\201\001"
    "\n\032Proto_Web_ClearJiangChiReq\022\022\n\nrequest_"
    "id\030\001 \001(\004\022\017\n\007game_id\030\002 \001(\r\022\017\n\007room_id\030\003 \001"
    "(\r\022-\n\tmodify_db\030\004 \001(\0132\032.proto_ff.Web_Mod"
    "ifyDbData\"\222\001\n\030Proto_Web_SetJiangChiReq\022\022"
    "\n\nrequest_id\030\001 \001(\004\022\017\n\007game_id\030\002 \001(\r\022\017\n\007r"
    "oom_id\030\003 \001(\r\022\021\n\tjiang_chi\030\004 \001(\003\022-\n\tmodif"
    "y_db\030\005 \001(\0132\032.proto_ff.Web_ModifyDbData\"\221"
    "\001\n\032Proto_Web_SetRoomStatusReq\022\022\n\nrequest"
    "_id\030\001 \001(\004\022\017\n\007game_id\030\002 \001(\r\022\017\n\007room_id\030\003 "
    "\001(\r\022\016\n\006status\030\004 \001(\r\022-\n\tmodify_db\030\005 \001(\0132\032"
    ".proto_ff.Web_ModifyDbData\"`\n\032Proto_Web_"
    "AddTedeemCodeReq\022\022\n\nrequest_id\030\001 \001(\004\022\014\n\004"
    "gold\030\002 \001(\004\022\r\n\005count\030\003 \001(\r\022\021\n\tcode_name\030\004"
    " \001(\t\"Y\n\035Proto_Web_ModifyShowUserIdReq\022\022\n"
    "\nrequest_id\030\001 \001(\004\022\017\n\007user_id\030\002 \001(\004\022\023\n\013sh"
    "ow_userid\030\003 \001(\004\"U\n\033Proto_Web_ModifyNickN"
    "ameReq\022\022\n\nrequest_id\030\001 \001(\004\022\017\n\007user_id\030\002 "
    "\001(\004\022\021\n\tnick_name\030\003 \001(\t\"U\n\033Proto_Web_Modi"
    "fyVipLevelReq\022\022\n\nrequest_id\030\001 \001(\004\022\017\n\007use"
    "r_id\030\002 \001(\004\022\021\n\tvip_level\030\003 \001(\r\"[\n\"Proto_W"
    "eb_ModifyAccountPasswordReq\022\022\n\nrequest_i"
    "d\030\001 \001(\004\022\017\n\007user_id\030\002 \001(\004\022\020\n\010password\030\003 \001"
    "(\t\"]\n\037Proto_Web_ModifyBankPasswordReq\022\022\n"
    "\nrequest_id\030\001 \001(\004\022\017\n\007user_id\030\002 \001(\004\022\025\n\rba"
    "nk_password\030\003 \001(\t\"\306\001\n\036Proto_Web_ModifyVi"
    "pRechargeReq\022\022\n\nrequest_id\030\001 \001(\004\022\017\n\007user"
    "_id\030\002 \001(\004\022\030\n\020recharge_user_id\030\003 \001(\004\022\032\n\022r"
    "echarge_user_name\030\004 \001(\t\022\033\n\023recharge_user"
    "_level\030\005 \001(\r\022\016\n\006amount\030\006 \001(\004\022\034\n\024recharge"
    "_show_userid\030\007 \001(\004*\360\006\n\021Proto_WebSvrMsgID"
    "\022\035\n\030NF_WebToSns_SetBaoDi_REQ\020\254\002\022 \n\033NF_We"
    "bToSns_SetTaxBaoDi_REQ\020\255\002\022 \n\033NF_WebToSns"
    "_ModifyAgent_REQ\020\256\002\022\"\n\035NF_WebToSns_Modif"
    "yLiuShui_REQ\020\257\002\022\035\n\030NF_WebToLogic_SetBan_"
    "REQ\020\260\002\022\"\n\035NF_WebToLogic_SetTransfer_REQ\020"
    "\261\002\022!\n\034NF_SERVER_CMD_CheckAgent_REQ\020\262\002\022!\n"
    "\034NF_WebToSns_SendUserMail_REQ\020\263\002\022!\n\034NF_W"
    "ebToLogic_ZhuanZhang_REQ\020\264\002\022 \n\033NF_WebToL"
    "ogic_GiveMoney_REQ\020\265\002\022\"\n\035NF_WebToSns_Set"
    "WhiteBlack_REQ\020\266\002\022%\n NF_WebToSns_DeleteW"
    "hiteBlack_REQ\020\267\002\022$\n\037NF_WebToWorld_ClearJ"
    "iangChi_Req\020\270\002\022\"\n\035NF_WebToWorld_SetJiang"
    "Chi_Req\020\271\002\022$\n\037NF_WebToWorld_SetRoomStatu"
    "s_Req\020\272\002\022&\n!NF_WebToSns_SetGMCtrlGiveDat"
    "a_REQ\020\273\002\022)\n$NF_WebToSns_DeleteGMCtrlGive"
    "Data_REQ\020\274\002\022\'\n\"NF_WebToLogic_ModifyShowU"
    "serId_Req\020\275\002\022%\n NF_WebToLogic_ModifyNick"
    "Name_Req\020\276\002\022%\n NF_WebToLogic_ModifyVipLe"
    "vel_Req\020\277\002\022,\n\'NF_WebToLogic_ModifyAccoun"
    "tPassword_Req\020\300\002\022)\n$NF_WebToLogic_Modify"
    "BankPassword_Req\020\301\002\022(\n#NF_WebToLogic_Mod"
    "ifyVipRecharge_Req\020\302\002", 3901);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto_svr_web.proto", &protobuf_RegisterTypes);
  Proto_Web_CommonRspNotify::default_instance_ = new Proto_Web_CommonRspNotify();
  Proto_Web_KillServer::default_instance_ = new Proto_Web_KillServer();
  Proto_Web_SetBaoDi::default_instance_ = new Proto_Web_SetBaoDi();
  Proto_Web_SetTaxBaoDi::default_instance_ = new Proto_Web_SetTaxBaoDi();
  Proto_Web_ModifyAgent::default_instance_ = new Proto_Web_ModifyAgent();
  Proto_Web_ModifyLiuShui::default_instance_ = new Proto_Web_ModifyLiuShui();
  Proto_Web_SetBan::default_instance_ = new Proto_Web_SetBan();
  Proto_Web_SetTransfer::default_instance_ = new Proto_Web_SetTransfer();
  Proto_Web_SendUserMail::default_instance_ = new Proto_Web_SendUserMail();
  Proto_Web_ZhuangZhang::default_instance_ = new Proto_Web_ZhuangZhang();
  Proto_Web_GiveMoney::default_instance_ = new Proto_Web_GiveMoney();
  WhileBlackGameList::default_instance_ = new WhileBlackGameList();
  Proto_Web_SetWhiteBlackReq::default_instance_ = new Proto_Web_SetWhiteBlackReq();
  Proto_Web_DeleteWhiteBlackReq::default_instance_ = new Proto_Web_DeleteWhiteBlackReq();
  Proto_Web_SetGMCtrlGiveDataReq::default_instance_ = new Proto_Web_SetGMCtrlGiveDataReq();
  Proto_Web_DeleteGMCtrlGiveDataReq::default_instance_ = new Proto_Web_DeleteGMCtrlGiveDataReq();
  Web_ModifyDbData::default_instance_ = new Web_ModifyDbData();
  Proto_Web_ClearJiangChiReq::default_instance_ = new Proto_Web_ClearJiangChiReq();
  Proto_Web_SetJiangChiReq::default_instance_ = new Proto_Web_SetJiangChiReq();
  Proto_Web_SetRoomStatusReq::default_instance_ = new Proto_Web_SetRoomStatusReq();
  Proto_Web_AddTedeemCodeReq::default_instance_ = new Proto_Web_AddTedeemCodeReq();
  Proto_Web_ModifyShowUserIdReq::default_instance_ = new Proto_Web_ModifyShowUserIdReq();
  Proto_Web_ModifyNickNameReq::default_instance_ = new Proto_Web_ModifyNickNameReq();
  Proto_Web_ModifyVipLevelReq::default_instance_ = new Proto_Web_ModifyVipLevelReq();
  Proto_Web_ModifyAccountPasswordReq::default_instance_ = new Proto_Web_ModifyAccountPasswordReq();
  Proto_Web_ModifyBankPasswordReq::default_instance_ = new Proto_Web_ModifyBankPasswordReq();
  Proto_Web_ModifyVipRechargeReq::default_instance_ = new Proto_Web_ModifyVipRechargeReq();
  Proto_Web_CommonRspNotify::default_instance_->InitAsDefaultInstance();
  Proto_Web_KillServer::default_instance_->InitAsDefaultInstance();
  Proto_Web_SetBaoDi::default_instance_->InitAsDefaultInstance();
  Proto_Web_SetTaxBaoDi::default_instance_->InitAsDefaultInstance();
  Proto_Web_ModifyAgent::default_instance_->InitAsDefaultInstance();
  Proto_Web_ModifyLiuShui::default_instance_->InitAsDefaultInstance();
  Proto_Web_SetBan::default_instance_->InitAsDefaultInstance();
  Proto_Web_SetTransfer::default_instance_->InitAsDefaultInstance();
  Proto_Web_SendUserMail::default_instance_->InitAsDefaultInstance();
  Proto_Web_ZhuangZhang::default_instance_->InitAsDefaultInstance();
  Proto_Web_GiveMoney::default_instance_->InitAsDefaultInstance();
  WhileBlackGameList::default_instance_->InitAsDefaultInstance();
  Proto_Web_SetWhiteBlackReq::default_instance_->InitAsDefaultInstance();
  Proto_Web_DeleteWhiteBlackReq::default_instance_->InitAsDefaultInstance();
  Proto_Web_SetGMCtrlGiveDataReq::default_instance_->InitAsDefaultInstance();
  Proto_Web_DeleteGMCtrlGiveDataReq::default_instance_->InitAsDefaultInstance();
  Web_ModifyDbData::default_instance_->InitAsDefaultInstance();
  Proto_Web_ClearJiangChiReq::default_instance_->InitAsDefaultInstance();
  Proto_Web_SetJiangChiReq::default_instance_->InitAsDefaultInstance();
  Proto_Web_SetRoomStatusReq::default_instance_->InitAsDefaultInstance();
  Proto_Web_AddTedeemCodeReq::default_instance_->InitAsDefaultInstance();
  Proto_Web_ModifyShowUserIdReq::default_instance_->InitAsDefaultInstance();
  Proto_Web_ModifyNickNameReq::default_instance_->InitAsDefaultInstance();
  Proto_Web_ModifyVipLevelReq::default_instance_->InitAsDefaultInstance();
  Proto_Web_ModifyAccountPasswordReq::default_instance_->InitAsDefaultInstance();
  Proto_Web_ModifyBankPasswordReq::default_instance_->InitAsDefaultInstance();
  Proto_Web_ModifyVipRechargeReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_5fsvr_5fweb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_5fsvr_5fweb_2eproto {
  StaticDescriptorInitializer_proto_5fsvr_5fweb_2eproto() {
    protobuf_AddDesc_proto_5fsvr_5fweb_2eproto();
  }
} static_descriptor_initializer_proto_5fsvr_5fweb_2eproto_;
const ::google::protobuf::EnumDescriptor* Proto_WebSvrMsgID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_WebSvrMsgID_descriptor_;
}
bool Proto_WebSvrMsgID_IsValid(int value) {
  switch(value) {
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 312:
    case 313:
    case 314:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
    case 322:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_Web_CommonRspNotify::kResultFieldNumber;
const int Proto_Web_CommonRspNotify::kMsgFieldNumber;
#endif  // !_MSC_VER

Proto_Web_CommonRspNotify::Proto_Web_CommonRspNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_Web_CommonRspNotify::InitAsDefaultInstance() {
}

Proto_Web_CommonRspNotify::Proto_Web_CommonRspNotify(const Proto_Web_CommonRspNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_Web_CommonRspNotify::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_Web_CommonRspNotify::~Proto_Web_CommonRspNotify() {
  SharedDtor();
}

void Proto_Web_CommonRspNotify::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void Proto_Web_CommonRspNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_Web_CommonRspNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_Web_CommonRspNotify_descriptor_;
}

const Proto_Web_CommonRspNotify& Proto_Web_CommonRspNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fweb_2eproto();
  return *default_instance_;
}

Proto_Web_CommonRspNotify* Proto_Web_CommonRspNotify::default_instance_ = NULL;

Proto_Web_CommonRspNotify* Proto_Web_CommonRspNotify::New() const {
  return new Proto_Web_CommonRspNotify;
}

void Proto_Web_CommonRspNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_Web_CommonRspNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_Web_CommonRspNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_Web_CommonRspNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_Web_CommonRspNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_Web_CommonRspNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_Web_CommonRspNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_Web_CommonRspNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_Web_CommonRspNotify::MergeFrom(const Proto_Web_CommonRspNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_Web_CommonRspNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_Web_CommonRspNotify::CopyFrom(const Proto_Web_CommonRspNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_Web_CommonRspNotify::IsInitialized() const {

  return true;
}

void Proto_Web_CommonRspNotify::Swap(Proto_Web_CommonRspNotify* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_Web_CommonRspNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_Web_CommonRspNotify_descriptor_;
  metadata.reflection = Proto_Web_CommonRspNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_Web_KillServer::kRequestIdFieldNumber;
const int Proto_Web_KillServer::kContractFieldNumber;
const int Proto_Web_KillServer::kMachineAddrFieldNumber;
const int Proto_Web_KillServer::kIpFieldNumber;
const int Proto_Web_KillServer::kBusNameFieldNumber;
#endif  // !_MSC_VER

Proto_Web_KillServer::Proto_Web_KillServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_Web_KillServer::InitAsDefaultInstance() {
}

Proto_Web_KillServer::Proto_Web_KillServer(const Proto_Web_KillServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_Web_KillServer::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = GOOGLE_ULONGLONG(0);
  contract_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  machine_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_Web_KillServer::~Proto_Web_KillServer() {
  SharedDtor();
}

void Proto_Web_KillServer::SharedDtor() {
  if (contract_ != &::google::protobuf::internal::kEmptyString) {
    delete contract_;
  }
  if (machine_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_addr_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bus_name_;
  }
  if (this != default_instance_) {
  }
}

void Proto_Web_KillServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_Web_KillServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_Web_KillServer_descriptor_;
}

const Proto_Web_KillServer& Proto_Web_KillServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fweb_2eproto();
  return *default_instance_;
}

Proto_Web_KillServer* Proto_Web_KillServer::default_instance_ = NULL;

Proto_Web_KillServer* Proto_Web_KillServer::New() const {
  return new Proto_Web_KillServer;
}

void Proto_Web_KillServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = GOOGLE_ULONGLONG(0);
    if (has_contract()) {
      if (contract_ != &::google::protobuf::internal::kEmptyString) {
        contract_->clear();
      }
    }
    if (has_machine_addr()) {
      if (machine_addr_ != &::google::protobuf::internal::kEmptyString) {
        machine_addr_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_bus_name()) {
      if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
        bus_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_Web_KillServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_contract;
        break;
      }

      // optional string contract = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contract:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contract()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contract().data(), this->contract().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_machine_addr;
        break;
      }

      // optional string machine_addr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_addr().data(), this->machine_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }

      // optional string ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bus_name;
        break;
      }

      // optional string bus_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bus_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bus_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bus_name().data(), this->bus_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_Web_KillServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->request_id(), output);
  }

  // optional string contract = 2;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->contract(), output);
  }

  // optional string machine_addr = 3;
  if (has_machine_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_addr().data(), this->machine_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->machine_addr(), output);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ip(), output);
  }

  // optional string bus_name = 5;
  if (has_bus_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bus_name().data(), this->bus_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->bus_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_Web_KillServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->request_id(), target);
  }

  // optional string contract = 2;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->contract(), target);
  }

  // optional string machine_addr = 3;
  if (has_machine_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_addr().data(), this->machine_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->machine_addr(), target);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }

  // optional string bus_name = 5;
  if (has_bus_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bus_name().data(), this->bus_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bus_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_Web_KillServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_id());
    }

    // optional string contract = 2;
    if (has_contract()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contract());
    }

    // optional string machine_addr = 3;
    if (has_machine_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_addr());
    }

    // optional string ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string bus_name = 5;
    if (has_bus_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bus_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_Web_KillServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_Web_KillServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_Web_KillServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_Web_KillServer::MergeFrom(const Proto_Web_KillServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_contract()) {
      set_contract(from.contract());
    }
    if (from.has_machine_addr()) {
      set_machine_addr(from.machine_addr());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_bus_name()) {
      set_bus_name(from.bus_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_Web_KillServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_Web_KillServer::CopyFrom(const Proto_Web_KillServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_Web_KillServer::IsInitialized() const {

  return true;
}

void Proto_Web_KillServer::Swap(Proto_Web_KillServer* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(contract_, other->contract_);
    std::swap(machine_addr_, other->machine_addr_);
    std::swap(ip_, other->ip_);
    std::swap(bus_name_, other->bus_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_Web_KillServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_Web_KillServer_descriptor_;
  metadata.reflection = Proto_Web_KillServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_Web_SetBaoDi::kRequestIdFieldNumber;
const int Proto_Web_SetBaoDi::kUserIdFieldNumber;
const int Proto_Web_SetBaoDi::kNewBaodiFieldNumber;
#endif  // !_MSC_VER

Proto_Web_SetBaoDi::Proto_Web_SetBaoDi()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_Web_SetBaoDi::InitAsDefaultInstance() {
}

Proto_Web_SetBaoDi::Proto_Web_SetBaoDi(const Proto_Web_SetBaoDi& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_Web_SetBaoDi::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = GOOGLE_ULONGLONG(0);
  user_id_ = GOOGLE_ULONGLONG(0);
  new_baodi_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_Web_SetBaoDi::~Proto_Web_SetBaoDi() {
  SharedDtor();
}

void Proto_Web_SetBaoDi::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_Web_SetBaoDi::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_Web_SetBaoDi::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_Web_SetBaoDi_descriptor_;
}

const Proto_Web_SetBaoDi& Proto_Web_SetBaoDi::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fweb_2eproto();
  return *default_instance_;
}

Proto_Web_SetBaoDi* Proto_Web_SetBaoDi::default_instance_ = NULL;

Proto_Web_SetBaoDi* Proto_Web_SetBaoDi::New() const {
  return new Proto_Web_SetBaoDi;
}

void Proto_Web_SetBaoDi::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = GOOGLE_ULONGLONG(0);
    user_id_ = GOOGLE_ULONGLONG(0);
    new_baodi_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_Web_SetBaoDi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_new_baodi;
        break;
      }

      // optional uint32 new_baodi = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_baodi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_baodi_)));
          set_has_new_baodi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_Web_SetBaoDi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->request_id(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional uint32 new_baodi = 3;
  if (has_new_baodi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->new_baodi(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_Web_SetBaoDi::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->request_id(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional uint32 new_baodi = 3;
  if (has_new_baodi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->new_baodi(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_Web_SetBaoDi::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_id());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint32 new_baodi = 3;
    if (has_new_baodi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_baodi());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_Web_SetBaoDi::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_Web_SetBaoDi* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_Web_SetBaoDi*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_Web_SetBaoDi::MergeFrom(const Proto_Web_SetBaoDi& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_new_baodi()) {
      set_new_baodi(from.new_baodi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_Web_SetBaoDi::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_Web_SetBaoDi::CopyFrom(const Proto_Web_SetBaoDi& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_Web_SetBaoDi::IsInitialized() const {

  return true;
}

void Proto_Web_SetBaoDi::Swap(Proto_Web_SetBaoDi* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(new_baodi_, other->new_baodi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_Web_SetBaoDi::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_Web_SetBaoDi_descriptor_;
  metadata.reflection = Proto_Web_SetBaoDi_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_Web_SetTaxBaoDi::kRequestIdFieldNumber;
const int Proto_Web_SetTaxBaoDi::kUserIdFieldNumber;
const int Proto_Web_SetTaxBaoDi::kNewTaxBaodiFieldNumber;
#endif  // !_MSC_VER

Proto_Web_SetTaxBaoDi::Proto_Web_SetTaxBaoDi()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_Web_SetTaxBaoDi::InitAsDefaultInstance() {
}

Proto_Web_SetTaxBaoDi::Proto_Web_SetTaxBaoDi(const Proto_Web_SetTaxBaoDi& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_Web_SetTaxBaoDi::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = GOOGLE_ULONGLONG(0);
  user_id_ = GOOGLE_ULONGLONG(0);
  new_tax_baodi_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_Web_SetTaxBaoDi::~Proto_Web_SetTaxBaoDi() {
  SharedDtor();
}

void Proto_Web_SetTaxBaoDi::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_Web_SetTaxBaoDi::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_Web_SetTaxBaoDi::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_Web_SetTaxBaoDi_descriptor_;
}

const Proto_Web_SetTaxBaoDi& Proto_Web_SetTaxBaoDi::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fweb_2eproto();
  return *default_instance_;
}

Proto_Web_SetTaxBaoDi* Proto_Web_SetTaxBaoDi::default_instance_ = NULL;

Proto_Web_SetTaxBaoDi* Proto_Web_SetTaxBaoDi::New() const {
  return new Proto_Web_SetTaxBaoDi;
}

void Proto_Web_SetTaxBaoDi::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = GOOGLE_ULONGLONG(0);
    user_id_ = GOOGLE_ULONGLONG(0);
    new_tax_baodi_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_Web_SetTaxBaoDi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_new_tax_baodi;
        break;
      }

      // optional uint32 new_tax_baodi = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_tax_baodi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_tax_baodi_)));
          set_has_new_tax_baodi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_Web_SetTaxBaoDi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->request_id(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional uint32 new_tax_baodi = 3;
  if (has_new_tax_baodi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->new_tax_baodi(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_Web_SetTaxBaoDi::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->request_id(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional uint32 new_tax_baodi = 3;
  if (has_new_tax_baodi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->new_tax_baodi(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_Web_SetTaxBaoDi::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_id());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint32 new_tax_baodi = 3;
    if (has_new_tax_baodi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_tax_baodi());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_Web_SetTaxBaoDi::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_Web_SetTaxBaoDi* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_Web_SetTaxBaoDi*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_Web_SetTaxBaoDi::MergeFrom(const Proto_Web_SetTaxBaoDi& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_new_tax_baodi()) {
      set_new_tax_baodi(from.new_tax_baodi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_Web_SetTaxBaoDi::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_Web_SetTaxBaoDi::CopyFrom(const Proto_Web_SetTaxBaoDi& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_Web_SetTaxBaoDi::IsInitialized() const {

  return true;
}

void Proto_Web_SetTaxBaoDi::Swap(Proto_Web_SetTaxBaoDi* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(new_tax_baodi_, other->new_tax_baodi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_Web_SetTaxBaoDi::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_Web_SetTaxBaoDi_descriptor_;
  metadata.reflection = Proto_Web_SetTaxBaoDi_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_Web_ModifyAgent::kRequestIdFieldNumber;
const int Proto_Web_ModifyAgent::kUserIdFieldNumber;
const int Proto_Web_ModifyAgent::kNewAgentIdFieldNumber;
#endif  // !_MSC_VER

Proto_Web_ModifyAgent::Proto_Web_ModifyAgent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_Web_ModifyAgent::InitAsDefaultInstance() {
}

Proto_Web_ModifyAgent::Proto_Web_ModifyAgent(const Proto_Web_ModifyAgent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_Web_ModifyAgent::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = GOOGLE_ULONGLONG(0);
  user_id_ = GOOGLE_ULONGLONG(0);
  new_agent_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_Web_ModifyAgent::~Proto_Web_ModifyAgent() {
  SharedDtor();
}

void Proto_Web_ModifyAgent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_Web_ModifyAgent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_Web_ModifyAgent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_Web_ModifyAgent_descriptor_;
}

const Proto_Web_ModifyAgent& Proto_Web_ModifyAgent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fweb_2eproto();
  return *default_instance_;
}

Proto_Web_ModifyAgent* Proto_Web_ModifyAgent::default_instance_ = NULL;

Proto_Web_ModifyAgent* Proto_Web_ModifyAgent::New() const {
  return new Proto_Web_ModifyAgent;
}

void Proto_Web_ModifyAgent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = GOOGLE_ULONGLONG(0);
    user_id_ = GOOGLE_ULONGLONG(0);
    new_agent_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_Web_ModifyAgent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_new_agent_id;
        break;
      }

      // optional uint64 new_agent_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_agent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_agent_id_)));
          set_has_new_agent_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_Web_ModifyAgent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->request_id(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional uint64 new_agent_id = 3;
  if (has_new_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->new_agent_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_Web_ModifyAgent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->request_id(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional uint64 new_agent_id = 3;
  if (has_new_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->new_agent_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_Web_ModifyAgent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_id());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 new_agent_id = 3;
    if (has_new_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->new_agent_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_Web_ModifyAgent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_Web_ModifyAgent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_Web_ModifyAgent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_Web_ModifyAgent::MergeFrom(const Proto_Web_ModifyAgent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_new_agent_id()) {
      set_new_agent_id(from.new_agent_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_Web_ModifyAgent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_Web_ModifyAgent::CopyFrom(const Proto_Web_ModifyAgent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_Web_ModifyAgent::IsInitialized() const {

  return true;
}

void Proto_Web_ModifyAgent::Swap(Proto_Web_ModifyAgent* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(new_agent_id_, other->new_agent_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_Web_ModifyAgent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_Web_ModifyAgent_descriptor_;
  metadata.reflection = Proto_Web_ModifyAgent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_Web_ModifyLiuShui::kRequestIdFieldNumber;
const int Proto_Web_ModifyLiuShui::kUserIdFieldNumber;
const int Proto_Web_ModifyLiuShui::kLiuShuiFieldNumber;
#endif  // !_MSC_VER

Proto_Web_ModifyLiuShui::Proto_Web_ModifyLiuShui()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_Web_ModifyLiuShui::InitAsDefaultInstance() {
}

Proto_Web_ModifyLiuShui::Proto_Web_ModifyLiuShui(const Proto_Web_ModifyLiuShui& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_Web_ModifyLiuShui::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = GOOGLE_ULONGLONG(0);
  user_id_ = GOOGLE_ULONGLONG(0);
  liu_shui_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_Web_ModifyLiuShui::~Proto_Web_ModifyLiuShui() {
  SharedDtor();
}

void Proto_Web_ModifyLiuShui::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_Web_ModifyLiuShui::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_Web_ModifyLiuShui::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_Web_ModifyLiuShui_descriptor_;
}

const Proto_Web_ModifyLiuShui& Proto_Web_ModifyLiuShui::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fweb_2eproto();
  return *default_instance_;
}

Proto_Web_ModifyLiuShui* Proto_Web_ModifyLiuShui::default_instance_ = NULL;

Proto_Web_ModifyLiuShui* Proto_Web_ModifyLiuShui::New() const {
  return new Proto_Web_ModifyLiuShui;
}

void Proto_Web_ModifyLiuShui::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = GOOGLE_ULONGLONG(0);
    user_id_ = GOOGLE_ULONGLONG(0);
    liu_shui_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_Web_ModifyLiuShui::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_liu_shui;
        break;
      }

      // optional uint64 liu_shui = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_liu_shui:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &liu_shui_)));
          set_has_liu_shui();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_Web_ModifyLiuShui::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->request_id(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional uint64 liu_shui = 3;
  if (has_liu_shui()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->liu_shui(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_Web_ModifyLiuShui::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->request_id(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional uint64 liu_shui = 3;
  if (has_liu_shui()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->liu_shui(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_Web_ModifyLiuShui::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_id());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 liu_shui = 3;
    if (has_liu_shui()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->liu_shui());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_Web_ModifyLiuShui::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_Web_ModifyLiuShui* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_Web_ModifyLiuShui*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_Web_ModifyLiuShui::MergeFrom(const Proto_Web_ModifyLiuShui& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_liu_shui()) {
      set_liu_shui(from.liu_shui());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_Web_ModifyLiuShui::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_Web_ModifyLiuShui::CopyFrom(const Proto_Web_ModifyLiuShui& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_Web_ModifyLiuShui::IsInitialized() const {

  return true;
}

void Proto_Web_ModifyLiuShui::Swap(Proto_Web_ModifyLiuShui* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(liu_shui_, other->liu_shui_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_Web_ModifyLiuShui::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_Web_ModifyLiuShui_descriptor_;
  metadata.reflection = Proto_Web_ModifyLiuShui_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_Web_SetBan::kRequestIdFieldNumber;
const int Proto_Web_SetBan::kUserIdFieldNumber;
const int Proto_Web_SetBan::kIsBanFieldNumber;
#endif  // !_MSC_VER

Proto_Web_SetBan::Proto_Web_SetBan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_Web_SetBan::InitAsDefaultInstance() {
}

Proto_Web_SetBan::Proto_Web_SetBan(const Proto_Web_SetBan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_Web_SetBan::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = GOOGLE_ULONGLONG(0);
  user_id_ = GOOGLE_ULONGLONG(0);
  is_ban_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_Web_SetBan::~Proto_Web_SetBan() {
  SharedDtor();
}

void Proto_Web_SetBan::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_Web_SetBan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_Web_SetBan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_Web_SetBan_descriptor_;
}

const Proto_Web_SetBan& Proto_Web_SetBan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fweb_2eproto();
  return *default_instance_;
}

Proto_Web_SetBan* Proto_Web_SetBan::default_instance_ = NULL;

Proto_Web_SetBan* Proto_Web_SetBan::New() const {
  return new Proto_Web_SetBan;
}

void Proto_Web_SetBan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = GOOGLE_ULONGLONG(0);
    user_id_ = GOOGLE_ULONGLONG(0);
    is_ban_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_Web_SetBan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_ban;
        break;
      }

      // optional bool is_ban = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_ban:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ban_)));
          set_has_is_ban();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_Web_SetBan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->request_id(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional bool is_ban = 3;
  if (has_is_ban()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_ban(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_Web_SetBan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->request_id(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional bool is_ban = 3;
  if (has_is_ban()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_ban(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_Web_SetBan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_id());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional bool is_ban = 3;
    if (has_is_ban()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_Web_SetBan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_Web_SetBan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_Web_SetBan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_Web_SetBan::MergeFrom(const Proto_Web_SetBan& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_is_ban()) {
      set_is_ban(from.is_ban());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_Web_SetBan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_Web_SetBan::CopyFrom(const Proto_Web_SetBan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_Web_SetBan::IsInitialized() const {

  return true;
}

void Proto_Web_SetBan::Swap(Proto_Web_SetBan* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(is_ban_, other->is_ban_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_Web_SetBan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_Web_SetBan_descriptor_;
  metadata.reflection = Proto_Web_SetBan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_Web_SetTransfer::kRequestIdFieldNumber;
const int Proto_Web_SetTransfer::kUserIdFieldNumber;
const int Proto_Web_SetTransfer::kNoTransferFieldNumber;
#endif  // !_MSC_VER

Proto_Web_SetTransfer::Proto_Web_SetTransfer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_Web_SetTransfer::InitAsDefaultInstance() {
}

Proto_Web_SetTransfer::Proto_Web_SetTransfer(const Proto_Web_SetTransfer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_Web_SetTransfer::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = GOOGLE_ULONGLONG(0);
  user_id_ = GOOGLE_ULONGLONG(0);
  no_transfer_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_Web_SetTransfer::~Proto_Web_SetTransfer() {
  SharedDtor();
}

void Proto_Web_SetTransfer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_Web_SetTransfer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_Web_SetTransfer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_Web_SetTransfer_descriptor_;
}

const Proto_Web_SetTransfer& Proto_Web_SetTransfer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fweb_2eproto();
  return *default_instance_;
}

Proto_Web_SetTransfer* Proto_Web_SetTransfer::default_instance_ = NULL;

Proto_Web_SetTransfer* Proto_Web_SetTransfer::New() const {
  return new Proto_Web_SetTransfer;
}

void Proto_Web_SetTransfer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = GOOGLE_ULONGLONG(0);
    user_id_ = GOOGLE_ULONGLONG(0);
    no_transfer_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_Web_SetTransfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_no_transfer;
        break;
      }

      // optional bool no_transfer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_no_transfer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_transfer_)));
          set_has_no_transfer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_Web_SetTransfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->request_id(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional bool no_transfer = 3;
  if (has_no_transfer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->no_transfer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_Web_SetTransfer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->request_id(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional bool no_transfer = 3;
  if (has_no_transfer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->no_transfer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_Web_SetTransfer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_id());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional bool no_transfer = 3;
    if (has_no_transfer()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_Web_SetTransfer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_Web_SetTransfer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_Web_SetTransfer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_Web_SetTransfer::MergeFrom(const Proto_Web_SetTransfer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_no_transfer()) {
      set_no_transfer(from.no_transfer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_Web_SetTransfer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_Web_SetTransfer::CopyFrom(const Proto_Web_SetTransfer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_Web_SetTransfer::IsInitialized() const {

  return true;
}

void Proto_Web_SetTransfer::Swap(Proto_Web_SetTransfer* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(no_transfer_, other->no_transfer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_Web_SetTransfer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_Web_SetTransfer_descriptor_;
  metadata.reflection = Proto_Web_SetTransfer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_Web_SendUserMail::kRequestIdFieldNumber;
const int Proto_Web_SendUserMail::kUserIdFieldNumber;
const int Proto_Web_SendUserMail::kSendNameFieldNumber;
const int Proto_Web_SendUserMail::kTitleFieldNumber;
const int Proto_Web_SendUserMail::kContentFieldNumber;
#endif  // !_MSC_VER

Proto_Web_SendUserMail::Proto_Web_SendUserMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_Web_SendUserMail::InitAsDefaultInstance() {
}

Proto_Web_SendUserMail::Proto_Web_SendUserMail(const Proto_Web_SendUserMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_Web_SendUserMail::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = GOOGLE_ULONGLONG(0);
  user_id_ = GOOGLE_ULONGLONG(0);
  send_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_Web_SendUserMail::~Proto_Web_SendUserMail() {
  SharedDtor();
}

void Proto_Web_SendUserMail::SharedDtor() {
  if (send_name_ != &::google::protobuf::internal::kEmptyString) {
    delete send_name_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void Proto_Web_SendUserMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_Web_SendUserMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_Web_SendUserMail_descriptor_;
}

const Proto_Web_SendUserMail& Proto_Web_SendUserMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fweb_2eproto();
  return *default_instance_;
}

Proto_Web_SendUserMail* Proto_Web_SendUserMail::default_instance_ = NULL;

Proto_Web_SendUserMail* Proto_Web_SendUserMail::New() const {
  return new Proto_Web_SendUserMail;
}

void Proto_Web_SendUserMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = GOOGLE_ULONGLONG(0);
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_send_name()) {
      if (send_name_ != &::google::protobuf::internal::kEmptyString) {
        send_name_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_Web_SendUserMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_send_name;
        break;
      }

      // optional string send_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_send_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_send_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->send_name().data(), this->send_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_title;
        break;
      }

      // optional string title = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }

      // optional string content = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_Web_SendUserMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->request_id(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional string send_name = 3;
  if (has_send_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->send_name().data(), this->send_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->send_name(), output);
  }

  // optional string title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->title(), output);
  }

  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_Web_SendUserMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->request_id(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional string send_name = 3;
  if (has_send_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->send_name().data(), this->send_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->send_name(), target);
  }

  // optional string title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->title(), target);
  }

  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_Web_SendUserMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_id());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string send_name = 3;
    if (has_send_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->send_name());
    }

    // optional string title = 4;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_Web_SendUserMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_Web_SendUserMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_Web_SendUserMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_Web_SendUserMail::MergeFrom(const Proto_Web_SendUserMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_send_name()) {
      set_send_name(from.send_name());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_Web_SendUserMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_Web_SendUserMail::CopyFrom(const Proto_Web_SendUserMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_Web_SendUserMail::IsInitialized() const {

  return true;
}

void Proto_Web_SendUserMail::Swap(Proto_Web_SendUserMail* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(send_name_, other->send_name_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_Web_SendUserMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_Web_SendUserMail_descriptor_;
  metadata.reflection = Proto_Web_SendUserMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_Web_ZhuangZhang::kRequestIdFieldNumber;
const int Proto_Web_ZhuangZhang::kUserIdFieldNumber;
const int Proto_Web_ZhuangZhang::kAmountFieldNumber;
#endif  // !_MSC_VER

Proto_Web_ZhuangZhang::Proto_Web_ZhuangZhang()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_Web_ZhuangZhang::InitAsDefaultInstance() {
}

Proto_Web_ZhuangZhang::Proto_Web_ZhuangZhang(const Proto_Web_ZhuangZhang& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_Web_ZhuangZhang::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = GOOGLE_ULONGLONG(0);
  user_id_ = GOOGLE_ULONGLONG(0);
  amount_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_Web_ZhuangZhang::~Proto_Web_ZhuangZhang() {
  SharedDtor();
}

void Proto_Web_ZhuangZhang::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_Web_ZhuangZhang::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_Web_ZhuangZhang::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_Web_ZhuangZhang_descriptor_;
}

const Proto_Web_ZhuangZhang& Proto_Web_ZhuangZhang::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fweb_2eproto();
  return *default_instance_;
}

Proto_Web_ZhuangZhang* Proto_Web_ZhuangZhang::default_instance_ = NULL;

Proto_Web_ZhuangZhang* Proto_Web_ZhuangZhang::New() const {
  return new Proto_Web_ZhuangZhang;
}

void Proto_Web_ZhuangZhang::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = GOOGLE_ULONGLONG(0);
    user_id_ = GOOGLE_ULONGLONG(0);
    amount_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_Web_ZhuangZhang::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_amount;
        break;
      }

      // optional int64 amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_Web_ZhuangZhang::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->request_id(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional int64 amount = 3;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_Web_ZhuangZhang::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->request_id(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional int64 amount = 3;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_Web_ZhuangZhang::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_id());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional int64 amount = 3;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_Web_ZhuangZhang::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_Web_ZhuangZhang* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_Web_ZhuangZhang*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_Web_ZhuangZhang::MergeFrom(const Proto_Web_ZhuangZhang& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_Web_ZhuangZhang::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_Web_ZhuangZhang::CopyFrom(const Proto_Web_ZhuangZhang& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_Web_ZhuangZhang::IsInitialized() const {

  return true;
}

void Proto_Web_ZhuangZhang::Swap(Proto_Web_ZhuangZhang* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(amount_, other->amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_Web_ZhuangZhang::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_Web_ZhuangZhang_descriptor_;
  metadata.reflection = Proto_Web_ZhuangZhang_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_Web_GiveMoney::kRequestIdFieldNumber;
const int Proto_Web_GiveMoney::kUserIdFieldNumber;
const int Proto_Web_GiveMoney::kAmountFieldNumber;
#endif  // !_MSC_VER

Proto_Web_GiveMoney::Proto_Web_GiveMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_Web_GiveMoney::InitAsDefaultInstance() {
}

Proto_Web_GiveMoney::Proto_Web_GiveMoney(const Proto_Web_GiveMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_Web_GiveMoney::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = GOOGLE_ULONGLONG(0);
  user_id_ = GOOGLE_ULONGLONG(0);
  amount_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_Web_GiveMoney::~Proto_Web_GiveMoney() {
  SharedDtor();
}

void Proto_Web_GiveMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_Web_GiveMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_Web_GiveMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_Web_GiveMoney_descriptor_;
}

const Proto_Web_GiveMoney& Proto_Web_GiveMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fweb_2eproto();
  return *default_instance_;
}

Proto_Web_GiveMoney* Proto_Web_GiveMoney::default_instance_ = NULL;

Proto_Web_GiveMoney* Proto_Web_GiveMoney::New() const {
  return new Proto_Web_GiveMoney;
}

void Proto_Web_GiveMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = GOOGLE_ULONGLONG(0);
    user_id_ = GOOGLE_ULONGLONG(0);
    amount_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_Web_GiveMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_amount;
        break;
      }

      // optional int64 amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_Web_GiveMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->request_id(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional int64 amount = 3;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_Web_GiveMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->request_id(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional int64 amount = 3;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_Web_GiveMoney::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_id());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional int64 amount = 3;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_Web_GiveMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_Web_GiveMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_Web_GiveMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_Web_GiveMoney::MergeFrom(const Proto_Web_GiveMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_Web_GiveMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_Web_GiveMoney::CopyFrom(const Proto_Web_GiveMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_Web_GiveMoney::IsInitialized() const {

  return true;
}

void Proto_Web_GiveMoney::Swap(Proto_Web_GiveMoney* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(amount_, other->amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_Web_GiveMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_Web_GiveMoney_descriptor_;
  metadata.reflection = Proto_Web_GiveMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WhileBlackGameList::kGameIdFieldNumber;
const int WhileBlackGameList::kRoomIdFieldNumber;
#endif  // !_MSC_VER

WhileBlackGameList::WhileBlackGameList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WhileBlackGameList::InitAsDefaultInstance() {
}

WhileBlackGameList::WhileBlackGameList(const WhileBlackGameList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WhileBlackGameList::SharedCtor() {
  _cached_size_ = 0;
  game_id_ = 0u;
  room_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WhileBlackGameList::~WhileBlackGameList() {
  SharedDtor();
}

void WhileBlackGameList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WhileBlackGameList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WhileBlackGameList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WhileBlackGameList_descriptor_;
}

const WhileBlackGameList& WhileBlackGameList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fweb_2eproto();
  return *default_instance_;
}

WhileBlackGameList* WhileBlackGameList::default_instance_ = NULL;

WhileBlackGameList* WhileBlackGameList::New() const {
  return new WhileBlackGameList;
}

void WhileBlackGameList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_id_ = 0u;
    room_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WhileBlackGameList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WhileBlackGameList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 game_id = 1;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_id(), output);
  }

  // optional uint32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WhileBlackGameList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 game_id = 1;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_id(), target);
  }

  // optional uint32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WhileBlackGameList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 game_id = 1;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WhileBlackGameList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WhileBlackGameList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WhileBlackGameList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WhileBlackGameList::MergeFrom(const WhileBlackGameList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WhileBlackGameList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhileBlackGameList::CopyFrom(const WhileBlackGameList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhileBlackGameList::IsInitialized() const {

  return true;
}

void WhileBlackGameList::Swap(WhileBlackGameList* other) {
  if (other != this) {
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WhileBlackGameList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WhileBlackGameList_descriptor_;
  metadata.reflection = WhileBlackGameList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_Web_SetWhiteBlackReq::kRequestIdFieldNumber;
const int Proto_Web_SetWhiteBlackReq::kUserIdFieldNumber;
const int Proto_Web_SetWhiteBlackReq::kRosterTypeFieldNumber;
const int Proto_Web_SetWhiteBlackReq::kStartTimeFieldNumber;
const int Proto_Web_SetWhiteBlackReq::kEndTimeFieldNumber;
const int Proto_Web_SetWhiteBlackReq::kControlLevelFieldNumber;
const int Proto_Web_SetWhiteBlackReq::kOptMarkFieldNumber;
const int Proto_Web_SetWhiteBlackReq::kMaxWinJettonFieldNumber;
const int Proto_Web_SetWhiteBlackReq::kRateMarkFieldNumber;
const int Proto_Web_SetWhiteBlackReq::kGameListFieldNumber;
#endif  // !_MSC_VER

Proto_Web_SetWhiteBlackReq::Proto_Web_SetWhiteBlackReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_Web_SetWhiteBlackReq::InitAsDefaultInstance() {
}

Proto_Web_SetWhiteBlackReq::Proto_Web_SetWhiteBlackReq(const Proto_Web_SetWhiteBlackReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_Web_SetWhiteBlackReq::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = GOOGLE_ULONGLONG(0);
  user_id_ = GOOGLE_ULONGLONG(0);
  roster_type_ = 0u;
  start_time_ = GOOGLE_ULONGLONG(0);
  end_time_ = GOOGLE_ULONGLONG(0);
  control_level_ = 0;
  opt_mark_ = GOOGLE_ULONGLONG(0);
  max_win_jetton_ = GOOGLE_ULONGLONG(0);
  rate_mark_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_Web_SetWhiteBlackReq::~Proto_Web_SetWhiteBlackReq() {
  SharedDtor();
}

void Proto_Web_SetWhiteBlackReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_Web_SetWhiteBlackReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_Web_SetWhiteBlackReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_Web_SetWhiteBlackReq_descriptor_;
}

const Proto_Web_SetWhiteBlackReq& Proto_Web_SetWhiteBlackReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fweb_2eproto();
  return *default_instance_;
}

Proto_Web_SetWhiteBlackReq* Proto_Web_SetWhiteBlackReq::default_instance_ = NULL;

Proto_Web_SetWhiteBlackReq* Proto_Web_SetWhiteBlackReq::New() const {
  return new Proto_Web_SetWhiteBlackReq;
}

void Proto_Web_SetWhiteBlackReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = GOOGLE_ULONGLONG(0);
    user_id_ = GOOGLE_ULONGLONG(0);
    roster_type_ = 0u;
    start_time_ = GOOGLE_ULONGLONG(0);
    end_time_ = GOOGLE_ULONGLONG(0);
    control_level_ = 0;
    opt_mark_ = GOOGLE_ULONGLONG(0);
    max_win_jetton_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    rate_mark_ = 0;
  }
  game_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_Web_SetWhiteBlackReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roster_type;
        break;
      }

      // optional uint32 roster_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roster_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roster_type_)));
          set_has_roster_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_start_time;
        break;
      }

      // optional uint64 start_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_end_time;
        break;
      }

      // optional uint64 end_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_control_level;
        break;
      }

      // optional int32 control_level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_control_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_level_)));
          set_has_control_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_opt_mark;
        break;
      }

      // optional uint64 opt_mark = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &opt_mark_)));
          set_has_opt_mark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_max_win_jetton;
        break;
      }

      // optional uint64 max_win_jetton = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_win_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_win_jetton_)));
          set_has_max_win_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_rate_mark;
        break;
      }

      // optional float rate_mark = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rate_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rate_mark_)));
          set_has_rate_mark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_game_list;
        break;
      }

      // repeated .proto_ff.WhileBlackGameList game_list = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_game_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_game_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_Web_SetWhiteBlackReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->request_id(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional uint32 roster_type = 3;
  if (has_roster_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->roster_type(), output);
  }

  // optional uint64 start_time = 4;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->start_time(), output);
  }

  // optional uint64 end_time = 5;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->end_time(), output);
  }

  // optional int32 control_level = 6;
  if (has_control_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->control_level(), output);
  }

  // optional uint64 opt_mark = 7;
  if (has_opt_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->opt_mark(), output);
  }

  // optional uint64 max_win_jetton = 8;
  if (has_max_win_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->max_win_jetton(), output);
  }

  // optional float rate_mark = 9;
  if (has_rate_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->rate_mark(), output);
  }

  // repeated .proto_ff.WhileBlackGameList game_list = 10;
  for (int i = 0; i < this->game_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->game_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_Web_SetWhiteBlackReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->request_id(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional uint32 roster_type = 3;
  if (has_roster_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->roster_type(), target);
  }

  // optional uint64 start_time = 4;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->start_time(), target);
  }

  // optional uint64 end_time = 5;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->end_time(), target);
  }

  // optional int32 control_level = 6;
  if (has_control_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->control_level(), target);
  }

  // optional uint64 opt_mark = 7;
  if (has_opt_mark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->opt_mark(), target);
  }

  // optional uint64 max_win_jetton = 8;
  if (has_max_win_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->max_win_jetton(), target);
  }

  // optional float rate_mark = 9;
  if (has_rate_mark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->rate_mark(), target);
  }

  // repeated .proto_ff.WhileBlackGameList game_list = 10;
  for (int i = 0; i < this->game_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->game_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_Web_SetWhiteBlackReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_id());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint32 roster_type = 3;
    if (has_roster_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roster_type());
    }

    // optional uint64 start_time = 4;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_time());
    }

    // optional uint64 end_time = 5;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

    // optional int32 control_level = 6;
    if (has_control_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_level());
    }

    // optional uint64 opt_mark = 7;
    if (has_opt_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->opt_mark());
    }

    // optional uint64 max_win_jetton = 8;
    if (has_max_win_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_win_jetton());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float rate_mark = 9;
    if (has_rate_mark()) {
      total_size += 1 + 4;
    }

  }
  // repeated .proto_ff.WhileBlackGameList game_list = 10;
  total_size += 1 * this->game_list_size();
  for (int i = 0; i < this->game_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->game_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_Web_SetWhiteBlackReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_Web_SetWhiteBlackReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_Web_SetWhiteBlackReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_Web_SetWhiteBlackReq::MergeFrom(const Proto_Web_SetWhiteBlackReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  game_list_.MergeFrom(from.game_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_roster_type()) {
      set_roster_type(from.roster_type());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_control_level()) {
      set_control_level(from.control_level());
    }
    if (from.has_opt_mark()) {
      set_opt_mark(from.opt_mark());
    }
    if (from.has_max_win_jetton()) {
      set_max_win_jetton(from.max_win_jetton());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rate_mark()) {
      set_rate_mark(from.rate_mark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_Web_SetWhiteBlackReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_Web_SetWhiteBlackReq::CopyFrom(const Proto_Web_SetWhiteBlackReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_Web_SetWhiteBlackReq::IsInitialized() const {

  return true;
}

void Proto_Web_SetWhiteBlackReq::Swap(Proto_Web_SetWhiteBlackReq* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(roster_type_, other->roster_type_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(control_level_, other->control_level_);
    std::swap(opt_mark_, other->opt_mark_);
    std::swap(max_win_jetton_, other->max_win_jetton_);
    std::swap(rate_mark_, other->rate_mark_);
    game_list_.Swap(&other->game_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_Web_SetWhiteBlackReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_Web_SetWhiteBlackReq_descriptor_;
  metadata.reflection = Proto_Web_SetWhiteBlackReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_Web_DeleteWhiteBlackReq::kRequestIdFieldNumber;
const int Proto_Web_DeleteWhiteBlackReq::kWhiteblackIdFieldNumber;
#endif  // !_MSC_VER

Proto_Web_DeleteWhiteBlackReq::Proto_Web_DeleteWhiteBlackReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_Web_DeleteWhiteBlackReq::InitAsDefaultInstance() {
}

Proto_Web_DeleteWhiteBlackReq::Proto_Web_DeleteWhiteBlackReq(const Proto_Web_DeleteWhiteBlackReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_Web_DeleteWhiteBlackReq::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = GOOGLE_ULONGLONG(0);
  whiteblack_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_Web_DeleteWhiteBlackReq::~Proto_Web_DeleteWhiteBlackReq() {
  SharedDtor();
}

void Proto_Web_DeleteWhiteBlackReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_Web_DeleteWhiteBlackReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_Web_DeleteWhiteBlackReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_Web_DeleteWhiteBlackReq_descriptor_;
}

const Proto_Web_DeleteWhiteBlackReq& Proto_Web_DeleteWhiteBlackReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fweb_2eproto();
  return *default_instance_;
}

Proto_Web_DeleteWhiteBlackReq* Proto_Web_DeleteWhiteBlackReq::default_instance_ = NULL;

Proto_Web_DeleteWhiteBlackReq* Proto_Web_DeleteWhiteBlackReq::New() const {
  return new Proto_Web_DeleteWhiteBlackReq;
}

void Proto_Web_DeleteWhiteBlackReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = GOOGLE_ULONGLONG(0);
    whiteblack_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_Web_DeleteWhiteBlackReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_whiteblack_id;
        break;
      }

      // optional uint64 whiteblack_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_whiteblack_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &whiteblack_id_)));
          set_has_whiteblack_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_Web_DeleteWhiteBlackReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->request_id(), output);
  }

  // optional uint64 whiteblack_id = 2;
  if (has_whiteblack_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->whiteblack_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_Web_DeleteWhiteBlackReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->request_id(), target);
  }

  // optional uint64 whiteblack_id = 2;
  if (has_whiteblack_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->whiteblack_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_Web_DeleteWhiteBlackReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_id());
    }

    // optional uint64 whiteblack_id = 2;
    if (has_whiteblack_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->whiteblack_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_Web_DeleteWhiteBlackReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_Web_DeleteWhiteBlackReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_Web_DeleteWhiteBlackReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_Web_DeleteWhiteBlackReq::MergeFrom(const Proto_Web_DeleteWhiteBlackReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_whiteblack_id()) {
      set_whiteblack_id(from.whiteblack_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_Web_DeleteWhiteBlackReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_Web_DeleteWhiteBlackReq::CopyFrom(const Proto_Web_DeleteWhiteBlackReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_Web_DeleteWhiteBlackReq::IsInitialized() const {

  return true;
}

void Proto_Web_DeleteWhiteBlackReq::Swap(Proto_Web_DeleteWhiteBlackReq* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(whiteblack_id_, other->whiteblack_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_Web_DeleteWhiteBlackReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_Web_DeleteWhiteBlackReq_descriptor_;
  metadata.reflection = Proto_Web_DeleteWhiteBlackReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_Web_SetGMCtrlGiveDataReq::kRequestIdFieldNumber;
const int Proto_Web_SetGMCtrlGiveDataReq::kUserIdFieldNumber;
const int Proto_Web_SetGMCtrlGiveDataReq::kControlTypeFieldNumber;
const int Proto_Web_SetGMCtrlGiveDataReq::kStartTimeFieldNumber;
const int Proto_Web_SetGMCtrlGiveDataReq::kEndTimeFieldNumber;
const int Proto_Web_SetGMCtrlGiveDataReq::kGameIdFieldNumber;
const int Proto_Web_SetGMCtrlGiveDataReq::kStateFieldNumber;
const int Proto_Web_SetGMCtrlGiveDataReq::kJackpotTypeFieldNumber;
const int Proto_Web_SetGMCtrlGiveDataReq::kJackpotRateFieldNumber;
const int Proto_Web_SetGMCtrlGiveDataReq::kJackpotJettonFieldNumber;
#endif  // !_MSC_VER

Proto_Web_SetGMCtrlGiveDataReq::Proto_Web_SetGMCtrlGiveDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_Web_SetGMCtrlGiveDataReq::InitAsDefaultInstance() {
}

Proto_Web_SetGMCtrlGiveDataReq::Proto_Web_SetGMCtrlGiveDataReq(const Proto_Web_SetGMCtrlGiveDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_Web_SetGMCtrlGiveDataReq::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = GOOGLE_ULONGLONG(0);
  user_id_ = GOOGLE_ULONGLONG(0);
  control_type_ = 0u;
  start_time_ = GOOGLE_ULONGLONG(0);
  end_time_ = GOOGLE_ULONGLONG(0);
  game_id_ = 0u;
  state_ = 0;
  jackpot_type_ = GOOGLE_ULONGLONG(0);
  jackpot_rate_ = GOOGLE_ULONGLONG(0);
  jackpot_jetton_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_Web_SetGMCtrlGiveDataReq::~Proto_Web_SetGMCtrlGiveDataReq() {
  SharedDtor();
}

void Proto_Web_SetGMCtrlGiveDataReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_Web_SetGMCtrlGiveDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_Web_SetGMCtrlGiveDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_Web_SetGMCtrlGiveDataReq_descriptor_;
}

const Proto_Web_SetGMCtrlGiveDataReq& Proto_Web_SetGMCtrlGiveDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fweb_2eproto();
  return *default_instance_;
}

Proto_Web_SetGMCtrlGiveDataReq* Proto_Web_SetGMCtrlGiveDataReq::default_instance_ = NULL;

Proto_Web_SetGMCtrlGiveDataReq* Proto_Web_SetGMCtrlGiveDataReq::New() const {
  return new Proto_Web_SetGMCtrlGiveDataReq;
}

void Proto_Web_SetGMCtrlGiveDataReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = GOOGLE_ULONGLONG(0);
    user_id_ = GOOGLE_ULONGLONG(0);
    control_type_ = 0u;
    start_time_ = GOOGLE_ULONGLONG(0);
    end_time_ = GOOGLE_ULONGLONG(0);
    game_id_ = 0u;
    state_ = 0;
    jackpot_type_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    jackpot_rate_ = GOOGLE_ULONGLONG(0);
    jackpot_jetton_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_Web_SetGMCtrlGiveDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_control_type;
        break;
      }

      // optional uint32 control_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_control_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &control_type_)));
          set_has_control_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_start_time;
        break;
      }

      // optional uint64 start_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_end_time;
        break;
      }

      // optional uint64 end_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_state;
        break;
      }

      // optional int32 state = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_jackpot_type;
        break;
      }

      // optional uint64 jackpot_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jackpot_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &jackpot_type_)));
          set_has_jackpot_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_jackpot_rate;
        break;
      }

      // optional uint64 jackpot_rate = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jackpot_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &jackpot_rate_)));
          set_has_jackpot_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_jackpot_jetton;
        break;
      }

      // optional float jackpot_jetton = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_jackpot_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &jackpot_jetton_)));
          set_has_jackpot_jetton();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_Web_SetGMCtrlGiveDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->request_id(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional uint32 control_type = 3;
  if (has_control_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->control_type(), output);
  }

  // optional uint64 start_time = 4;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->start_time(), output);
  }

  // optional uint64 end_time = 5;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->end_time(), output);
  }

  // optional uint32 game_id = 6;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->game_id(), output);
  }

  // optional int32 state = 7;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->state(), output);
  }

  // optional uint64 jackpot_type = 8;
  if (has_jackpot_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->jackpot_type(), output);
  }

  // optional uint64 jackpot_rate = 9;
  if (has_jackpot_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->jackpot_rate(), output);
  }

  // optional float jackpot_jetton = 10;
  if (has_jackpot_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->jackpot_jetton(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_Web_SetGMCtrlGiveDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->request_id(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional uint32 control_type = 3;
  if (has_control_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->control_type(), target);
  }

  // optional uint64 start_time = 4;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->start_time(), target);
  }

  // optional uint64 end_time = 5;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->end_time(), target);
  }

  // optional uint32 game_id = 6;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->game_id(), target);
  }

  // optional int32 state = 7;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->state(), target);
  }

  // optional uint64 jackpot_type = 8;
  if (has_jackpot_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->jackpot_type(), target);
  }

  // optional uint64 jackpot_rate = 9;
  if (has_jackpot_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->jackpot_rate(), target);
  }

  // optional float jackpot_jetton = 10;
  if (has_jackpot_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->jackpot_jetton(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_Web_SetGMCtrlGiveDataReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_id());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint32 control_type = 3;
    if (has_control_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->control_type());
    }

    // optional uint64 start_time = 4;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_time());
    }

    // optional uint64 end_time = 5;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

    // optional uint32 game_id = 6;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional int32 state = 7;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional uint64 jackpot_type = 8;
    if (has_jackpot_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->jackpot_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 jackpot_rate = 9;
    if (has_jackpot_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->jackpot_rate());
    }

    // optional float jackpot_jetton = 10;
    if (has_jackpot_jetton()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_Web_SetGMCtrlGiveDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_Web_SetGMCtrlGiveDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_Web_SetGMCtrlGiveDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_Web_SetGMCtrlGiveDataReq::MergeFrom(const Proto_Web_SetGMCtrlGiveDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_control_type()) {
      set_control_type(from.control_type());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_jackpot_type()) {
      set_jackpot_type(from.jackpot_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_jackpot_rate()) {
      set_jackpot_rate(from.jackpot_rate());
    }
    if (from.has_jackpot_jetton()) {
      set_jackpot_jetton(from.jackpot_jetton());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_Web_SetGMCtrlGiveDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_Web_SetGMCtrlGiveDataReq::CopyFrom(const Proto_Web_SetGMCtrlGiveDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_Web_SetGMCtrlGiveDataReq::IsInitialized() const {

  return true;
}

void Proto_Web_SetGMCtrlGiveDataReq::Swap(Proto_Web_SetGMCtrlGiveDataReq* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(control_type_, other->control_type_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(game_id_, other->game_id_);
    std::swap(state_, other->state_);
    std::swap(jackpot_type_, other->jackpot_type_);
    std::swap(jackpot_rate_, other->jackpot_rate_);
    std::swap(jackpot_jetton_, other->jackpot_jetton_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_Web_SetGMCtrlGiveDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_Web_SetGMCtrlGiveDataReq_descriptor_;
  metadata.reflection = Proto_Web_SetGMCtrlGiveDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_Web_DeleteGMCtrlGiveDataReq::kRequestIdFieldNumber;
const int Proto_Web_DeleteGMCtrlGiveDataReq::kIdFieldNumber;
#endif  // !_MSC_VER

Proto_Web_DeleteGMCtrlGiveDataReq::Proto_Web_DeleteGMCtrlGiveDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_Web_DeleteGMCtrlGiveDataReq::InitAsDefaultInstance() {
}

Proto_Web_DeleteGMCtrlGiveDataReq::Proto_Web_DeleteGMCtrlGiveDataReq(const Proto_Web_DeleteGMCtrlGiveDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_Web_DeleteGMCtrlGiveDataReq::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = GOOGLE_ULONGLONG(0);
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_Web_DeleteGMCtrlGiveDataReq::~Proto_Web_DeleteGMCtrlGiveDataReq() {
  SharedDtor();
}

void Proto_Web_DeleteGMCtrlGiveDataReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_Web_DeleteGMCtrlGiveDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_Web_DeleteGMCtrlGiveDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_Web_DeleteGMCtrlGiveDataReq_descriptor_;
}

const Proto_Web_DeleteGMCtrlGiveDataReq& Proto_Web_DeleteGMCtrlGiveDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fweb_2eproto();
  return *default_instance_;
}

Proto_Web_DeleteGMCtrlGiveDataReq* Proto_Web_DeleteGMCtrlGiveDataReq::default_instance_ = NULL;

Proto_Web_DeleteGMCtrlGiveDataReq* Proto_Web_DeleteGMCtrlGiveDataReq::New() const {
  return new Proto_Web_DeleteGMCtrlGiveDataReq;
}

void Proto_Web_DeleteGMCtrlGiveDataReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = GOOGLE_ULONGLONG(0);
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_Web_DeleteGMCtrlGiveDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_Web_DeleteGMCtrlGiveDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->request_id(), output);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_Web_DeleteGMCtrlGiveDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->request_id(), target);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_Web_DeleteGMCtrlGiveDataReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_id());
    }

    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_Web_DeleteGMCtrlGiveDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_Web_DeleteGMCtrlGiveDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_Web_DeleteGMCtrlGiveDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_Web_DeleteGMCtrlGiveDataReq::MergeFrom(const Proto_Web_DeleteGMCtrlGiveDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_Web_DeleteGMCtrlGiveDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_Web_DeleteGMCtrlGiveDataReq::CopyFrom(const Proto_Web_DeleteGMCtrlGiveDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_Web_DeleteGMCtrlGiveDataReq::IsInitialized() const {

  return true;
}

void Proto_Web_DeleteGMCtrlGiveDataReq::Swap(Proto_Web_DeleteGMCtrlGiveDataReq* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_Web_DeleteGMCtrlGiveDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_Web_DeleteGMCtrlGiveDataReq_descriptor_;
  metadata.reflection = Proto_Web_DeleteGMCtrlGiveDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Web_ModifyDbData::kDbNameFieldNumber;
const int Web_ModifyDbData::kTbNameFieldNumber;
const int Web_ModifyDbData::kDbFieldKeyFieldNumber;
const int Web_ModifyDbData::kDbFieldValueFieldNumber;
const int Web_ModifyDbData::kDbCondKeyFieldNumber;
const int Web_ModifyDbData::kDbCondValueFieldNumber;
#endif  // !_MSC_VER

Web_ModifyDbData::Web_ModifyDbData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Web_ModifyDbData::InitAsDefaultInstance() {
}

Web_ModifyDbData::Web_ModifyDbData(const Web_ModifyDbData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Web_ModifyDbData::SharedCtor() {
  _cached_size_ = 0;
  db_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tb_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Web_ModifyDbData::~Web_ModifyDbData() {
  SharedDtor();
}

void Web_ModifyDbData::SharedDtor() {
  if (db_name_ != &::google::protobuf::internal::kEmptyString) {
    delete db_name_;
  }
  if (tb_name_ != &::google::protobuf::internal::kEmptyString) {
    delete tb_name_;
  }
  if (this != default_instance_) {
  }
}

void Web_ModifyDbData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Web_ModifyDbData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Web_ModifyDbData_descriptor_;
}

const Web_ModifyDbData& Web_ModifyDbData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fweb_2eproto();
  return *default_instance_;
}

Web_ModifyDbData* Web_ModifyDbData::default_instance_ = NULL;

Web_ModifyDbData* Web_ModifyDbData::New() const {
  return new Web_ModifyDbData;
}

void Web_ModifyDbData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_db_name()) {
      if (db_name_ != &::google::protobuf::internal::kEmptyString) {
        db_name_->clear();
      }
    }
    if (has_tb_name()) {
      if (tb_name_ != &::google::protobuf::internal::kEmptyString) {
        tb_name_->clear();
      }
    }
  }
  db_field_key_.Clear();
  db_field_value_.Clear();
  db_cond_key_.Clear();
  db_cond_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Web_ModifyDbData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string db_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->db_name().data(), this->db_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tb_name;
        break;
      }

      // optional string tb_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tb_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tb_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tb_name().data(), this->tb_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_db_field_key;
        break;
      }

      // repeated string db_field_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_db_field_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_db_field_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->db_field_key(this->db_field_key_size() - 1).data(),
            this->db_field_key(this->db_field_key_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_db_field_key;
        if (input->ExpectTag(34)) goto parse_db_field_value;
        break;
      }

      // repeated string db_field_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_db_field_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_db_field_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->db_field_value(this->db_field_value_size() - 1).data(),
            this->db_field_value(this->db_field_value_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_db_field_value;
        if (input->ExpectTag(42)) goto parse_db_cond_key;
        break;
      }

      // repeated string db_cond_key = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_db_cond_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_db_cond_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->db_cond_key(this->db_cond_key_size() - 1).data(),
            this->db_cond_key(this->db_cond_key_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_db_cond_key;
        if (input->ExpectTag(50)) goto parse_db_cond_value;
        break;
      }

      // repeated string db_cond_value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_db_cond_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_db_cond_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->db_cond_value(this->db_cond_value_size() - 1).data(),
            this->db_cond_value(this->db_cond_value_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_db_cond_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Web_ModifyDbData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string db_name = 1;
  if (has_db_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->db_name().data(), this->db_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->db_name(), output);
  }

  // optional string tb_name = 2;
  if (has_tb_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tb_name().data(), this->tb_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tb_name(), output);
  }

  // repeated string db_field_key = 3;
  for (int i = 0; i < this->db_field_key_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->db_field_key(i).data(), this->db_field_key(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->db_field_key(i), output);
  }

  // repeated string db_field_value = 4;
  for (int i = 0; i < this->db_field_value_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->db_field_value(i).data(), this->db_field_value(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->db_field_value(i), output);
  }

  // repeated string db_cond_key = 5;
  for (int i = 0; i < this->db_cond_key_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->db_cond_key(i).data(), this->db_cond_key(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->db_cond_key(i), output);
  }

  // repeated string db_cond_value = 6;
  for (int i = 0; i < this->db_cond_value_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->db_cond_value(i).data(), this->db_cond_value(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->db_cond_value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Web_ModifyDbData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string db_name = 1;
  if (has_db_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->db_name().data(), this->db_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->db_name(), target);
  }

  // optional string tb_name = 2;
  if (has_tb_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tb_name().data(), this->tb_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tb_name(), target);
  }

  // repeated string db_field_key = 3;
  for (int i = 0; i < this->db_field_key_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->db_field_key(i).data(), this->db_field_key(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->db_field_key(i), target);
  }

  // repeated string db_field_value = 4;
  for (int i = 0; i < this->db_field_value_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->db_field_value(i).data(), this->db_field_value(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->db_field_value(i), target);
  }

  // repeated string db_cond_key = 5;
  for (int i = 0; i < this->db_cond_key_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->db_cond_key(i).data(), this->db_cond_key(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->db_cond_key(i), target);
  }

  // repeated string db_cond_value = 6;
  for (int i = 0; i < this->db_cond_value_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->db_cond_value(i).data(), this->db_cond_value(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->db_cond_value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Web_ModifyDbData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string db_name = 1;
    if (has_db_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->db_name());
    }

    // optional string tb_name = 2;
    if (has_tb_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tb_name());
    }

  }
  // repeated string db_field_key = 3;
  total_size += 1 * this->db_field_key_size();
  for (int i = 0; i < this->db_field_key_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->db_field_key(i));
  }

  // repeated string db_field_value = 4;
  total_size += 1 * this->db_field_value_size();
  for (int i = 0; i < this->db_field_value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->db_field_value(i));
  }

  // repeated string db_cond_key = 5;
  total_size += 1 * this->db_cond_key_size();
  for (int i = 0; i < this->db_cond_key_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->db_cond_key(i));
  }

  // repeated string db_cond_value = 6;
  total_size += 1 * this->db_cond_value_size();
  for (int i = 0; i < this->db_cond_value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->db_cond_value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Web_ModifyDbData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Web_ModifyDbData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Web_ModifyDbData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Web_ModifyDbData::MergeFrom(const Web_ModifyDbData& from) {
  GOOGLE_CHECK_NE(&from, this);
  db_field_key_.MergeFrom(from.db_field_key_);
  db_field_value_.MergeFrom(from.db_field_value_);
  db_cond_key_.MergeFrom(from.db_cond_key_);
  db_cond_value_.MergeFrom(from.db_cond_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_name()) {
      set_db_name(from.db_name());
    }
    if (from.has_tb_name()) {
      set_tb_name(from.tb_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Web_ModifyDbData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Web_ModifyDbData::CopyFrom(const Web_ModifyDbData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Web_ModifyDbData::IsInitialized() const {

  return true;
}

void Web_ModifyDbData::Swap(Web_ModifyDbData* other) {
  if (other != this) {
    std::swap(db_name_, other->db_name_);
    std::swap(tb_name_, other->tb_name_);
    db_field_key_.Swap(&other->db_field_key_);
    db_field_value_.Swap(&other->db_field_value_);
    db_cond_key_.Swap(&other->db_cond_key_);
    db_cond_value_.Swap(&other->db_cond_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Web_ModifyDbData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Web_ModifyDbData_descriptor_;
  metadata.reflection = Web_ModifyDbData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_Web_ClearJiangChiReq::kRequestIdFieldNumber;
const int Proto_Web_ClearJiangChiReq::kGameIdFieldNumber;
const int Proto_Web_ClearJiangChiReq::kRoomIdFieldNumber;
const int Proto_Web_ClearJiangChiReq::kModifyDbFieldNumber;
#endif  // !_MSC_VER

Proto_Web_ClearJiangChiReq::Proto_Web_ClearJiangChiReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_Web_ClearJiangChiReq::InitAsDefaultInstance() {
  modify_db_ = const_cast< ::proto_ff::Web_ModifyDbData*>(&::proto_ff::Web_ModifyDbData::default_instance());
}

Proto_Web_ClearJiangChiReq::Proto_Web_ClearJiangChiReq(const Proto_Web_ClearJiangChiReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_Web_ClearJiangChiReq::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = GOOGLE_ULONGLONG(0);
  game_id_ = 0u;
  room_id_ = 0u;
  modify_db_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_Web_ClearJiangChiReq::~Proto_Web_ClearJiangChiReq() {
  SharedDtor();
}

void Proto_Web_ClearJiangChiReq::SharedDtor() {
  if (this != default_instance_) {
    delete modify_db_;
  }
}

void Proto_Web_ClearJiangChiReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_Web_ClearJiangChiReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_Web_ClearJiangChiReq_descriptor_;
}

const Proto_Web_ClearJiangChiReq& Proto_Web_ClearJiangChiReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fweb_2eproto();
  return *default_instance_;
}

Proto_Web_ClearJiangChiReq* Proto_Web_ClearJiangChiReq::default_instance_ = NULL;

Proto_Web_ClearJiangChiReq* Proto_Web_ClearJiangChiReq::New() const {
  return new Proto_Web_ClearJiangChiReq;
}

void Proto_Web_ClearJiangChiReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = GOOGLE_ULONGLONG(0);
    game_id_ = 0u;
    room_id_ = 0u;
    if (has_modify_db()) {
      if (modify_db_ != NULL) modify_db_->::proto_ff::Web_ModifyDbData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_Web_ClearJiangChiReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_modify_db;
        break;
      }

      // optional .proto_ff.Web_ModifyDbData modify_db = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modify_db:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modify_db()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_Web_ClearJiangChiReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->request_id(), output);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_id(), output);
  }

  // optional uint32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->room_id(), output);
  }

  // optional .proto_ff.Web_ModifyDbData modify_db = 4;
  if (has_modify_db()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->modify_db(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_Web_ClearJiangChiReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->request_id(), target);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_id(), target);
  }

  // optional uint32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->room_id(), target);
  }

  // optional .proto_ff.Web_ModifyDbData modify_db = 4;
  if (has_modify_db()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->modify_db(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_Web_ClearJiangChiReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_id());
    }

    // optional uint32 game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional .proto_ff.Web_ModifyDbData modify_db = 4;
    if (has_modify_db()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modify_db());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_Web_ClearJiangChiReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_Web_ClearJiangChiReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_Web_ClearJiangChiReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_Web_ClearJiangChiReq::MergeFrom(const Proto_Web_ClearJiangChiReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_modify_db()) {
      mutable_modify_db()->::proto_ff::Web_ModifyDbData::MergeFrom(from.modify_db());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_Web_ClearJiangChiReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_Web_ClearJiangChiReq::CopyFrom(const Proto_Web_ClearJiangChiReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_Web_ClearJiangChiReq::IsInitialized() const {

  return true;
}

void Proto_Web_ClearJiangChiReq::Swap(Proto_Web_ClearJiangChiReq* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(modify_db_, other->modify_db_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_Web_ClearJiangChiReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_Web_ClearJiangChiReq_descriptor_;
  metadata.reflection = Proto_Web_ClearJiangChiReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_Web_SetJiangChiReq::kRequestIdFieldNumber;
const int Proto_Web_SetJiangChiReq::kGameIdFieldNumber;
const int Proto_Web_SetJiangChiReq::kRoomIdFieldNumber;
const int Proto_Web_SetJiangChiReq::kJiangChiFieldNumber;
const int Proto_Web_SetJiangChiReq::kModifyDbFieldNumber;
#endif  // !_MSC_VER

Proto_Web_SetJiangChiReq::Proto_Web_SetJiangChiReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_Web_SetJiangChiReq::InitAsDefaultInstance() {
  modify_db_ = const_cast< ::proto_ff::Web_ModifyDbData*>(&::proto_ff::Web_ModifyDbData::default_instance());
}

Proto_Web_SetJiangChiReq::Proto_Web_SetJiangChiReq(const Proto_Web_SetJiangChiReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_Web_SetJiangChiReq::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = GOOGLE_ULONGLONG(0);
  game_id_ = 0u;
  room_id_ = 0u;
  jiang_chi_ = GOOGLE_LONGLONG(0);
  modify_db_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_Web_SetJiangChiReq::~Proto_Web_SetJiangChiReq() {
  SharedDtor();
}

void Proto_Web_SetJiangChiReq::SharedDtor() {
  if (this != default_instance_) {
    delete modify_db_;
  }
}

void Proto_Web_SetJiangChiReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_Web_SetJiangChiReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_Web_SetJiangChiReq_descriptor_;
}

const Proto_Web_SetJiangChiReq& Proto_Web_SetJiangChiReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fweb_2eproto();
  return *default_instance_;
}

Proto_Web_SetJiangChiReq* Proto_Web_SetJiangChiReq::default_instance_ = NULL;

Proto_Web_SetJiangChiReq* Proto_Web_SetJiangChiReq::New() const {
  return new Proto_Web_SetJiangChiReq;
}

void Proto_Web_SetJiangChiReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = GOOGLE_ULONGLONG(0);
    game_id_ = 0u;
    room_id_ = 0u;
    jiang_chi_ = GOOGLE_LONGLONG(0);
    if (has_modify_db()) {
      if (modify_db_ != NULL) modify_db_->::proto_ff::Web_ModifyDbData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_Web_SetJiangChiReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_jiang_chi;
        break;
      }

      // optional int64 jiang_chi = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jiang_chi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &jiang_chi_)));
          set_has_jiang_chi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_modify_db;
        break;
      }

      // optional .proto_ff.Web_ModifyDbData modify_db = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modify_db:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modify_db()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_Web_SetJiangChiReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->request_id(), output);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_id(), output);
  }

  // optional uint32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->room_id(), output);
  }

  // optional int64 jiang_chi = 4;
  if (has_jiang_chi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->jiang_chi(), output);
  }

  // optional .proto_ff.Web_ModifyDbData modify_db = 5;
  if (has_modify_db()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->modify_db(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_Web_SetJiangChiReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->request_id(), target);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_id(), target);
  }

  // optional uint32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->room_id(), target);
  }

  // optional int64 jiang_chi = 4;
  if (has_jiang_chi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->jiang_chi(), target);
  }

  // optional .proto_ff.Web_ModifyDbData modify_db = 5;
  if (has_modify_db()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->modify_db(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_Web_SetJiangChiReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_id());
    }

    // optional uint32 game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional int64 jiang_chi = 4;
    if (has_jiang_chi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->jiang_chi());
    }

    // optional .proto_ff.Web_ModifyDbData modify_db = 5;
    if (has_modify_db()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modify_db());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_Web_SetJiangChiReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_Web_SetJiangChiReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_Web_SetJiangChiReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_Web_SetJiangChiReq::MergeFrom(const Proto_Web_SetJiangChiReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_jiang_chi()) {
      set_jiang_chi(from.jiang_chi());
    }
    if (from.has_modify_db()) {
      mutable_modify_db()->::proto_ff::Web_ModifyDbData::MergeFrom(from.modify_db());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_Web_SetJiangChiReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_Web_SetJiangChiReq::CopyFrom(const Proto_Web_SetJiangChiReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_Web_SetJiangChiReq::IsInitialized() const {

  return true;
}

void Proto_Web_SetJiangChiReq::Swap(Proto_Web_SetJiangChiReq* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(jiang_chi_, other->jiang_chi_);
    std::swap(modify_db_, other->modify_db_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_Web_SetJiangChiReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_Web_SetJiangChiReq_descriptor_;
  metadata.reflection = Proto_Web_SetJiangChiReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_Web_SetRoomStatusReq::kRequestIdFieldNumber;
const int Proto_Web_SetRoomStatusReq::kGameIdFieldNumber;
const int Proto_Web_SetRoomStatusReq::kRoomIdFieldNumber;
const int Proto_Web_SetRoomStatusReq::kStatusFieldNumber;
const int Proto_Web_SetRoomStatusReq::kModifyDbFieldNumber;
#endif  // !_MSC_VER

Proto_Web_SetRoomStatusReq::Proto_Web_SetRoomStatusReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_Web_SetRoomStatusReq::InitAsDefaultInstance() {
  modify_db_ = const_cast< ::proto_ff::Web_ModifyDbData*>(&::proto_ff::Web_ModifyDbData::default_instance());
}

Proto_Web_SetRoomStatusReq::Proto_Web_SetRoomStatusReq(const Proto_Web_SetRoomStatusReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_Web_SetRoomStatusReq::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = GOOGLE_ULONGLONG(0);
  game_id_ = 0u;
  room_id_ = 0u;
  status_ = 0u;
  modify_db_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_Web_SetRoomStatusReq::~Proto_Web_SetRoomStatusReq() {
  SharedDtor();
}

void Proto_Web_SetRoomStatusReq::SharedDtor() {
  if (this != default_instance_) {
    delete modify_db_;
  }
}

void Proto_Web_SetRoomStatusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_Web_SetRoomStatusReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_Web_SetRoomStatusReq_descriptor_;
}

const Proto_Web_SetRoomStatusReq& Proto_Web_SetRoomStatusReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fweb_2eproto();
  return *default_instance_;
}

Proto_Web_SetRoomStatusReq* Proto_Web_SetRoomStatusReq::default_instance_ = NULL;

Proto_Web_SetRoomStatusReq* Proto_Web_SetRoomStatusReq::New() const {
  return new Proto_Web_SetRoomStatusReq;
}

void Proto_Web_SetRoomStatusReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = GOOGLE_ULONGLONG(0);
    game_id_ = 0u;
    room_id_ = 0u;
    status_ = 0u;
    if (has_modify_db()) {
      if (modify_db_ != NULL) modify_db_->::proto_ff::Web_ModifyDbData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_Web_SetRoomStatusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional uint32 status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_modify_db;
        break;
      }

      // optional .proto_ff.Web_ModifyDbData modify_db = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modify_db:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modify_db()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_Web_SetRoomStatusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->request_id(), output);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_id(), output);
  }

  // optional uint32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->room_id(), output);
  }

  // optional uint32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }

  // optional .proto_ff.Web_ModifyDbData modify_db = 5;
  if (has_modify_db()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->modify_db(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_Web_SetRoomStatusReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->request_id(), target);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_id(), target);
  }

  // optional uint32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->room_id(), target);
  }

  // optional uint32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status(), target);
  }

  // optional .proto_ff.Web_ModifyDbData modify_db = 5;
  if (has_modify_db()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->modify_db(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_Web_SetRoomStatusReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_id());
    }

    // optional uint32 game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional uint32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional .proto_ff.Web_ModifyDbData modify_db = 5;
    if (has_modify_db()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modify_db());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_Web_SetRoomStatusReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_Web_SetRoomStatusReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_Web_SetRoomStatusReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_Web_SetRoomStatusReq::MergeFrom(const Proto_Web_SetRoomStatusReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_modify_db()) {
      mutable_modify_db()->::proto_ff::Web_ModifyDbData::MergeFrom(from.modify_db());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_Web_SetRoomStatusReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_Web_SetRoomStatusReq::CopyFrom(const Proto_Web_SetRoomStatusReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_Web_SetRoomStatusReq::IsInitialized() const {

  return true;
}

void Proto_Web_SetRoomStatusReq::Swap(Proto_Web_SetRoomStatusReq* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(status_, other->status_);
    std::swap(modify_db_, other->modify_db_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_Web_SetRoomStatusReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_Web_SetRoomStatusReq_descriptor_;
  metadata.reflection = Proto_Web_SetRoomStatusReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_Web_AddTedeemCodeReq::kRequestIdFieldNumber;
const int Proto_Web_AddTedeemCodeReq::kGoldFieldNumber;
const int Proto_Web_AddTedeemCodeReq::kCountFieldNumber;
const int Proto_Web_AddTedeemCodeReq::kCodeNameFieldNumber;
#endif  // !_MSC_VER

Proto_Web_AddTedeemCodeReq::Proto_Web_AddTedeemCodeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_Web_AddTedeemCodeReq::InitAsDefaultInstance() {
}

Proto_Web_AddTedeemCodeReq::Proto_Web_AddTedeemCodeReq(const Proto_Web_AddTedeemCodeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_Web_AddTedeemCodeReq::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = GOOGLE_ULONGLONG(0);
  gold_ = GOOGLE_ULONGLONG(0);
  count_ = 0u;
  code_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_Web_AddTedeemCodeReq::~Proto_Web_AddTedeemCodeReq() {
  SharedDtor();
}

void Proto_Web_AddTedeemCodeReq::SharedDtor() {
  if (code_name_ != &::google::protobuf::internal::kEmptyString) {
    delete code_name_;
  }
  if (this != default_instance_) {
  }
}

void Proto_Web_AddTedeemCodeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_Web_AddTedeemCodeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_Web_AddTedeemCodeReq_descriptor_;
}

const Proto_Web_AddTedeemCodeReq& Proto_Web_AddTedeemCodeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fweb_2eproto();
  return *default_instance_;
}

Proto_Web_AddTedeemCodeReq* Proto_Web_AddTedeemCodeReq::default_instance_ = NULL;

Proto_Web_AddTedeemCodeReq* Proto_Web_AddTedeemCodeReq::New() const {
  return new Proto_Web_AddTedeemCodeReq;
}

void Proto_Web_AddTedeemCodeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = GOOGLE_ULONGLONG(0);
    gold_ = GOOGLE_ULONGLONG(0);
    count_ = 0u;
    if (has_code_name()) {
      if (code_name_ != &::google::protobuf::internal::kEmptyString) {
        code_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_Web_AddTedeemCodeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // optional uint64 gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_code_name;
        break;
      }

      // optional string code_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_code_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code_name().data(), this->code_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_Web_AddTedeemCodeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->request_id(), output);
  }

  // optional uint64 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->gold(), output);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // optional string code_name = 4;
  if (has_code_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code_name().data(), this->code_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->code_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_Web_AddTedeemCodeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->request_id(), target);
  }

  // optional uint64 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->gold(), target);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // optional string code_name = 4;
  if (has_code_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code_name().data(), this->code_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->code_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_Web_AddTedeemCodeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_id());
    }

    // optional uint64 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gold());
    }

    // optional uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional string code_name = 4;
    if (has_code_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_Web_AddTedeemCodeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_Web_AddTedeemCodeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_Web_AddTedeemCodeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_Web_AddTedeemCodeReq::MergeFrom(const Proto_Web_AddTedeemCodeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_code_name()) {
      set_code_name(from.code_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_Web_AddTedeemCodeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_Web_AddTedeemCodeReq::CopyFrom(const Proto_Web_AddTedeemCodeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_Web_AddTedeemCodeReq::IsInitialized() const {

  return true;
}

void Proto_Web_AddTedeemCodeReq::Swap(Proto_Web_AddTedeemCodeReq* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(gold_, other->gold_);
    std::swap(count_, other->count_);
    std::swap(code_name_, other->code_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_Web_AddTedeemCodeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_Web_AddTedeemCodeReq_descriptor_;
  metadata.reflection = Proto_Web_AddTedeemCodeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_Web_ModifyShowUserIdReq::kRequestIdFieldNumber;
const int Proto_Web_ModifyShowUserIdReq::kUserIdFieldNumber;
const int Proto_Web_ModifyShowUserIdReq::kShowUseridFieldNumber;
#endif  // !_MSC_VER

Proto_Web_ModifyShowUserIdReq::Proto_Web_ModifyShowUserIdReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_Web_ModifyShowUserIdReq::InitAsDefaultInstance() {
}

Proto_Web_ModifyShowUserIdReq::Proto_Web_ModifyShowUserIdReq(const Proto_Web_ModifyShowUserIdReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_Web_ModifyShowUserIdReq::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = GOOGLE_ULONGLONG(0);
  user_id_ = GOOGLE_ULONGLONG(0);
  show_userid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_Web_ModifyShowUserIdReq::~Proto_Web_ModifyShowUserIdReq() {
  SharedDtor();
}

void Proto_Web_ModifyShowUserIdReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_Web_ModifyShowUserIdReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_Web_ModifyShowUserIdReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_Web_ModifyShowUserIdReq_descriptor_;
}

const Proto_Web_ModifyShowUserIdReq& Proto_Web_ModifyShowUserIdReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fweb_2eproto();
  return *default_instance_;
}

Proto_Web_ModifyShowUserIdReq* Proto_Web_ModifyShowUserIdReq::default_instance_ = NULL;

Proto_Web_ModifyShowUserIdReq* Proto_Web_ModifyShowUserIdReq::New() const {
  return new Proto_Web_ModifyShowUserIdReq;
}

void Proto_Web_ModifyShowUserIdReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = GOOGLE_ULONGLONG(0);
    user_id_ = GOOGLE_ULONGLONG(0);
    show_userid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_Web_ModifyShowUserIdReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_show_userid;
        break;
      }

      // optional uint64 show_userid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_userid_)));
          set_has_show_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_Web_ModifyShowUserIdReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->request_id(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional uint64 show_userid = 3;
  if (has_show_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->show_userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_Web_ModifyShowUserIdReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->request_id(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional uint64 show_userid = 3;
  if (has_show_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->show_userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_Web_ModifyShowUserIdReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_id());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 show_userid = 3;
    if (has_show_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_Web_ModifyShowUserIdReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_Web_ModifyShowUserIdReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_Web_ModifyShowUserIdReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_Web_ModifyShowUserIdReq::MergeFrom(const Proto_Web_ModifyShowUserIdReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_show_userid()) {
      set_show_userid(from.show_userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_Web_ModifyShowUserIdReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_Web_ModifyShowUserIdReq::CopyFrom(const Proto_Web_ModifyShowUserIdReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_Web_ModifyShowUserIdReq::IsInitialized() const {

  return true;
}

void Proto_Web_ModifyShowUserIdReq::Swap(Proto_Web_ModifyShowUserIdReq* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(show_userid_, other->show_userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_Web_ModifyShowUserIdReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_Web_ModifyShowUserIdReq_descriptor_;
  metadata.reflection = Proto_Web_ModifyShowUserIdReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_Web_ModifyNickNameReq::kRequestIdFieldNumber;
const int Proto_Web_ModifyNickNameReq::kUserIdFieldNumber;
const int Proto_Web_ModifyNickNameReq::kNickNameFieldNumber;
#endif  // !_MSC_VER

Proto_Web_ModifyNickNameReq::Proto_Web_ModifyNickNameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_Web_ModifyNickNameReq::InitAsDefaultInstance() {
}

Proto_Web_ModifyNickNameReq::Proto_Web_ModifyNickNameReq(const Proto_Web_ModifyNickNameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_Web_ModifyNickNameReq::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = GOOGLE_ULONGLONG(0);
  user_id_ = GOOGLE_ULONGLONG(0);
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_Web_ModifyNickNameReq::~Proto_Web_ModifyNickNameReq() {
  SharedDtor();
}

void Proto_Web_ModifyNickNameReq::SharedDtor() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (this != default_instance_) {
  }
}

void Proto_Web_ModifyNickNameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_Web_ModifyNickNameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_Web_ModifyNickNameReq_descriptor_;
}

const Proto_Web_ModifyNickNameReq& Proto_Web_ModifyNickNameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fweb_2eproto();
  return *default_instance_;
}

Proto_Web_ModifyNickNameReq* Proto_Web_ModifyNickNameReq::default_instance_ = NULL;

Proto_Web_ModifyNickNameReq* Proto_Web_ModifyNickNameReq::New() const {
  return new Proto_Web_ModifyNickNameReq;
}

void Proto_Web_ModifyNickNameReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = GOOGLE_ULONGLONG(0);
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_Web_ModifyNickNameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_Web_ModifyNickNameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->request_id(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional string nick_name = 3;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nick_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_Web_ModifyNickNameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->request_id(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional string nick_name = 3;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nick_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_Web_ModifyNickNameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_id());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string nick_name = 3;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_Web_ModifyNickNameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_Web_ModifyNickNameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_Web_ModifyNickNameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_Web_ModifyNickNameReq::MergeFrom(const Proto_Web_ModifyNickNameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_Web_ModifyNickNameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_Web_ModifyNickNameReq::CopyFrom(const Proto_Web_ModifyNickNameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_Web_ModifyNickNameReq::IsInitialized() const {

  return true;
}

void Proto_Web_ModifyNickNameReq::Swap(Proto_Web_ModifyNickNameReq* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_Web_ModifyNickNameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_Web_ModifyNickNameReq_descriptor_;
  metadata.reflection = Proto_Web_ModifyNickNameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_Web_ModifyVipLevelReq::kRequestIdFieldNumber;
const int Proto_Web_ModifyVipLevelReq::kUserIdFieldNumber;
const int Proto_Web_ModifyVipLevelReq::kVipLevelFieldNumber;
#endif  // !_MSC_VER

Proto_Web_ModifyVipLevelReq::Proto_Web_ModifyVipLevelReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_Web_ModifyVipLevelReq::InitAsDefaultInstance() {
}

Proto_Web_ModifyVipLevelReq::Proto_Web_ModifyVipLevelReq(const Proto_Web_ModifyVipLevelReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_Web_ModifyVipLevelReq::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = GOOGLE_ULONGLONG(0);
  user_id_ = GOOGLE_ULONGLONG(0);
  vip_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_Web_ModifyVipLevelReq::~Proto_Web_ModifyVipLevelReq() {
  SharedDtor();
}

void Proto_Web_ModifyVipLevelReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_Web_ModifyVipLevelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_Web_ModifyVipLevelReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_Web_ModifyVipLevelReq_descriptor_;
}

const Proto_Web_ModifyVipLevelReq& Proto_Web_ModifyVipLevelReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fweb_2eproto();
  return *default_instance_;
}

Proto_Web_ModifyVipLevelReq* Proto_Web_ModifyVipLevelReq::default_instance_ = NULL;

Proto_Web_ModifyVipLevelReq* Proto_Web_ModifyVipLevelReq::New() const {
  return new Proto_Web_ModifyVipLevelReq;
}

void Proto_Web_ModifyVipLevelReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = GOOGLE_ULONGLONG(0);
    user_id_ = GOOGLE_ULONGLONG(0);
    vip_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_Web_ModifyVipLevelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vip_level;
        break;
      }

      // optional uint32 vip_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_Web_ModifyVipLevelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->request_id(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional uint32 vip_level = 3;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vip_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_Web_ModifyVipLevelReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->request_id(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional uint32 vip_level = 3;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vip_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_Web_ModifyVipLevelReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_id());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint32 vip_level = 3;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_Web_ModifyVipLevelReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_Web_ModifyVipLevelReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_Web_ModifyVipLevelReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_Web_ModifyVipLevelReq::MergeFrom(const Proto_Web_ModifyVipLevelReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_Web_ModifyVipLevelReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_Web_ModifyVipLevelReq::CopyFrom(const Proto_Web_ModifyVipLevelReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_Web_ModifyVipLevelReq::IsInitialized() const {

  return true;
}

void Proto_Web_ModifyVipLevelReq::Swap(Proto_Web_ModifyVipLevelReq* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_Web_ModifyVipLevelReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_Web_ModifyVipLevelReq_descriptor_;
  metadata.reflection = Proto_Web_ModifyVipLevelReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_Web_ModifyAccountPasswordReq::kRequestIdFieldNumber;
const int Proto_Web_ModifyAccountPasswordReq::kUserIdFieldNumber;
const int Proto_Web_ModifyAccountPasswordReq::kPasswordFieldNumber;
#endif  // !_MSC_VER

Proto_Web_ModifyAccountPasswordReq::Proto_Web_ModifyAccountPasswordReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_Web_ModifyAccountPasswordReq::InitAsDefaultInstance() {
}

Proto_Web_ModifyAccountPasswordReq::Proto_Web_ModifyAccountPasswordReq(const Proto_Web_ModifyAccountPasswordReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_Web_ModifyAccountPasswordReq::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = GOOGLE_ULONGLONG(0);
  user_id_ = GOOGLE_ULONGLONG(0);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_Web_ModifyAccountPasswordReq::~Proto_Web_ModifyAccountPasswordReq() {
  SharedDtor();
}

void Proto_Web_ModifyAccountPasswordReq::SharedDtor() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void Proto_Web_ModifyAccountPasswordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_Web_ModifyAccountPasswordReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_Web_ModifyAccountPasswordReq_descriptor_;
}

const Proto_Web_ModifyAccountPasswordReq& Proto_Web_ModifyAccountPasswordReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fweb_2eproto();
  return *default_instance_;
}

Proto_Web_ModifyAccountPasswordReq* Proto_Web_ModifyAccountPasswordReq::default_instance_ = NULL;

Proto_Web_ModifyAccountPasswordReq* Proto_Web_ModifyAccountPasswordReq::New() const {
  return new Proto_Web_ModifyAccountPasswordReq;
}

void Proto_Web_ModifyAccountPasswordReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = GOOGLE_ULONGLONG(0);
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_Web_ModifyAccountPasswordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // optional string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_Web_ModifyAccountPasswordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->request_id(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_Web_ModifyAccountPasswordReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->request_id(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_Web_ModifyAccountPasswordReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_id());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_Web_ModifyAccountPasswordReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_Web_ModifyAccountPasswordReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_Web_ModifyAccountPasswordReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_Web_ModifyAccountPasswordReq::MergeFrom(const Proto_Web_ModifyAccountPasswordReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_Web_ModifyAccountPasswordReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_Web_ModifyAccountPasswordReq::CopyFrom(const Proto_Web_ModifyAccountPasswordReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_Web_ModifyAccountPasswordReq::IsInitialized() const {

  return true;
}

void Proto_Web_ModifyAccountPasswordReq::Swap(Proto_Web_ModifyAccountPasswordReq* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_Web_ModifyAccountPasswordReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_Web_ModifyAccountPasswordReq_descriptor_;
  metadata.reflection = Proto_Web_ModifyAccountPasswordReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_Web_ModifyBankPasswordReq::kRequestIdFieldNumber;
const int Proto_Web_ModifyBankPasswordReq::kUserIdFieldNumber;
const int Proto_Web_ModifyBankPasswordReq::kBankPasswordFieldNumber;
#endif  // !_MSC_VER

Proto_Web_ModifyBankPasswordReq::Proto_Web_ModifyBankPasswordReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_Web_ModifyBankPasswordReq::InitAsDefaultInstance() {
}

Proto_Web_ModifyBankPasswordReq::Proto_Web_ModifyBankPasswordReq(const Proto_Web_ModifyBankPasswordReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_Web_ModifyBankPasswordReq::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = GOOGLE_ULONGLONG(0);
  user_id_ = GOOGLE_ULONGLONG(0);
  bank_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_Web_ModifyBankPasswordReq::~Proto_Web_ModifyBankPasswordReq() {
  SharedDtor();
}

void Proto_Web_ModifyBankPasswordReq::SharedDtor() {
  if (bank_password_ != &::google::protobuf::internal::kEmptyString) {
    delete bank_password_;
  }
  if (this != default_instance_) {
  }
}

void Proto_Web_ModifyBankPasswordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_Web_ModifyBankPasswordReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_Web_ModifyBankPasswordReq_descriptor_;
}

const Proto_Web_ModifyBankPasswordReq& Proto_Web_ModifyBankPasswordReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fweb_2eproto();
  return *default_instance_;
}

Proto_Web_ModifyBankPasswordReq* Proto_Web_ModifyBankPasswordReq::default_instance_ = NULL;

Proto_Web_ModifyBankPasswordReq* Proto_Web_ModifyBankPasswordReq::New() const {
  return new Proto_Web_ModifyBankPasswordReq;
}

void Proto_Web_ModifyBankPasswordReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = GOOGLE_ULONGLONG(0);
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_bank_password()) {
      if (bank_password_ != &::google::protobuf::internal::kEmptyString) {
        bank_password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_Web_ModifyBankPasswordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bank_password;
        break;
      }

      // optional string bank_password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bank_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bank_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bank_password().data(), this->bank_password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_Web_ModifyBankPasswordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->request_id(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional string bank_password = 3;
  if (has_bank_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bank_password().data(), this->bank_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bank_password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_Web_ModifyBankPasswordReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->request_id(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional string bank_password = 3;
  if (has_bank_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bank_password().data(), this->bank_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bank_password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_Web_ModifyBankPasswordReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_id());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string bank_password = 3;
    if (has_bank_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bank_password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_Web_ModifyBankPasswordReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_Web_ModifyBankPasswordReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_Web_ModifyBankPasswordReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_Web_ModifyBankPasswordReq::MergeFrom(const Proto_Web_ModifyBankPasswordReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_bank_password()) {
      set_bank_password(from.bank_password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_Web_ModifyBankPasswordReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_Web_ModifyBankPasswordReq::CopyFrom(const Proto_Web_ModifyBankPasswordReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_Web_ModifyBankPasswordReq::IsInitialized() const {

  return true;
}

void Proto_Web_ModifyBankPasswordReq::Swap(Proto_Web_ModifyBankPasswordReq* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(bank_password_, other->bank_password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_Web_ModifyBankPasswordReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_Web_ModifyBankPasswordReq_descriptor_;
  metadata.reflection = Proto_Web_ModifyBankPasswordReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_Web_ModifyVipRechargeReq::kRequestIdFieldNumber;
const int Proto_Web_ModifyVipRechargeReq::kUserIdFieldNumber;
const int Proto_Web_ModifyVipRechargeReq::kRechargeUserIdFieldNumber;
const int Proto_Web_ModifyVipRechargeReq::kRechargeUserNameFieldNumber;
const int Proto_Web_ModifyVipRechargeReq::kRechargeUserLevelFieldNumber;
const int Proto_Web_ModifyVipRechargeReq::kAmountFieldNumber;
const int Proto_Web_ModifyVipRechargeReq::kRechargeShowUseridFieldNumber;
#endif  // !_MSC_VER

Proto_Web_ModifyVipRechargeReq::Proto_Web_ModifyVipRechargeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_Web_ModifyVipRechargeReq::InitAsDefaultInstance() {
}

Proto_Web_ModifyVipRechargeReq::Proto_Web_ModifyVipRechargeReq(const Proto_Web_ModifyVipRechargeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_Web_ModifyVipRechargeReq::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = GOOGLE_ULONGLONG(0);
  user_id_ = GOOGLE_ULONGLONG(0);
  recharge_user_id_ = GOOGLE_ULONGLONG(0);
  recharge_user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  recharge_user_level_ = 0u;
  amount_ = GOOGLE_ULONGLONG(0);
  recharge_show_userid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_Web_ModifyVipRechargeReq::~Proto_Web_ModifyVipRechargeReq() {
  SharedDtor();
}

void Proto_Web_ModifyVipRechargeReq::SharedDtor() {
  if (recharge_user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete recharge_user_name_;
  }
  if (this != default_instance_) {
  }
}

void Proto_Web_ModifyVipRechargeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_Web_ModifyVipRechargeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_Web_ModifyVipRechargeReq_descriptor_;
}

const Proto_Web_ModifyVipRechargeReq& Proto_Web_ModifyVipRechargeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fweb_2eproto();
  return *default_instance_;
}

Proto_Web_ModifyVipRechargeReq* Proto_Web_ModifyVipRechargeReq::default_instance_ = NULL;

Proto_Web_ModifyVipRechargeReq* Proto_Web_ModifyVipRechargeReq::New() const {
  return new Proto_Web_ModifyVipRechargeReq;
}

void Proto_Web_ModifyVipRechargeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_id_ = GOOGLE_ULONGLONG(0);
    user_id_ = GOOGLE_ULONGLONG(0);
    recharge_user_id_ = GOOGLE_ULONGLONG(0);
    if (has_recharge_user_name()) {
      if (recharge_user_name_ != &::google::protobuf::internal::kEmptyString) {
        recharge_user_name_->clear();
      }
    }
    recharge_user_level_ = 0u;
    amount_ = GOOGLE_ULONGLONG(0);
    recharge_show_userid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_Web_ModifyVipRechargeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 request_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_recharge_user_id;
        break;
      }

      // optional uint64 recharge_user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recharge_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recharge_user_id_)));
          set_has_recharge_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_recharge_user_name;
        break;
      }

      // optional string recharge_user_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recharge_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recharge_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recharge_user_name().data(), this->recharge_user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_recharge_user_level;
        break;
      }

      // optional uint32 recharge_user_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recharge_user_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recharge_user_level_)));
          set_has_recharge_user_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_recharge_show_userid;
        break;
      }

      // optional uint64 recharge_show_userid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recharge_show_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recharge_show_userid_)));
          set_has_recharge_show_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_Web_ModifyVipRechargeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->request_id(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional uint64 recharge_user_id = 3;
  if (has_recharge_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->recharge_user_id(), output);
  }

  // optional string recharge_user_name = 4;
  if (has_recharge_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recharge_user_name().data(), this->recharge_user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->recharge_user_name(), output);
  }

  // optional uint32 recharge_user_level = 5;
  if (has_recharge_user_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->recharge_user_level(), output);
  }

  // optional uint64 amount = 6;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->amount(), output);
  }

  // optional uint64 recharge_show_userid = 7;
  if (has_recharge_show_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->recharge_show_userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_Web_ModifyVipRechargeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->request_id(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional uint64 recharge_user_id = 3;
  if (has_recharge_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->recharge_user_id(), target);
  }

  // optional string recharge_user_name = 4;
  if (has_recharge_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recharge_user_name().data(), this->recharge_user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->recharge_user_name(), target);
  }

  // optional uint32 recharge_user_level = 5;
  if (has_recharge_user_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->recharge_user_level(), target);
  }

  // optional uint64 amount = 6;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->amount(), target);
  }

  // optional uint64 recharge_show_userid = 7;
  if (has_recharge_show_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->recharge_show_userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_Web_ModifyVipRechargeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_id());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 recharge_user_id = 3;
    if (has_recharge_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recharge_user_id());
    }

    // optional string recharge_user_name = 4;
    if (has_recharge_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recharge_user_name());
    }

    // optional uint32 recharge_user_level = 5;
    if (has_recharge_user_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recharge_user_level());
    }

    // optional uint64 amount = 6;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional uint64 recharge_show_userid = 7;
    if (has_recharge_show_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recharge_show_userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_Web_ModifyVipRechargeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_Web_ModifyVipRechargeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_Web_ModifyVipRechargeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_Web_ModifyVipRechargeReq::MergeFrom(const Proto_Web_ModifyVipRechargeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_recharge_user_id()) {
      set_recharge_user_id(from.recharge_user_id());
    }
    if (from.has_recharge_user_name()) {
      set_recharge_user_name(from.recharge_user_name());
    }
    if (from.has_recharge_user_level()) {
      set_recharge_user_level(from.recharge_user_level());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_recharge_show_userid()) {
      set_recharge_show_userid(from.recharge_show_userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_Web_ModifyVipRechargeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_Web_ModifyVipRechargeReq::CopyFrom(const Proto_Web_ModifyVipRechargeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_Web_ModifyVipRechargeReq::IsInitialized() const {

  return true;
}

void Proto_Web_ModifyVipRechargeReq::Swap(Proto_Web_ModifyVipRechargeReq* other) {
  if (other != this) {
    std::swap(request_id_, other->request_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(recharge_user_id_, other->recharge_user_id_);
    std::swap(recharge_user_name_, other->recharge_user_name_);
    std::swap(recharge_user_level_, other->recharge_user_level_);
    std::swap(amount_, other->amount_);
    std::swap(recharge_show_userid_, other->recharge_show_userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_Web_ModifyVipRechargeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_Web_ModifyVipRechargeReq_descriptor_;
  metadata.reflection = Proto_Web_ModifyVipRechargeReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
