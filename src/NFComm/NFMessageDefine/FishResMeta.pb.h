// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FishResMeta.proto

#ifndef PROTOBUF_FishResMeta_2eproto__INCLUDED
#define PROTOBUF_FishResMeta_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
#include "proto_common.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_FishResMeta_2eproto();
void protobuf_AssignDesc_FishResMeta_2eproto();
void protobuf_ShutdownFile_FishResMeta_2eproto();

class FishLevelDesc;
class Sheet_FishLevelDesc;
class FishConfigDesc;
class Sheet_FishConfigDesc;
class GunValueConfig;
class Sheet_GunValueConfig;
class FishAlgoDesc;
class Sheet_FishAlgoDesc;
class UserDeskAlgoInfo;
class DeskInfoDesc;
class Sheet_DeskInfoDesc;
class FishInitPoolData;
class FishInitPool;
class SeatDangRange_B;
class SeatAlgoSetup;
class HuanDangRange;
class DangChiRange;
class FishAlgorithmSetup;
class FishAlgorithmFileName;
class FishAlgorithmCsvItem;
class FishAlgorithmCsv;
class FishNormalSetup;
class FishPoolSaveBaseMul;
class FishPoolSaveRelaCount;
class FishPoolSaveHitCountCfg;
class FishPoolSaveConnonHitCount;
class FishPoolSave;
class FishKindFishPoolSave;
class FishKindFishPoolSaveArray;
class GMCtrlLevelDesc;
class Sheet_GMCtrlLevelDesc;
class LineGameSystemControlInfo;
class Sheet_LineGameSystemControlInfo;
class LineLevelDesc;
class Sheet_LineLevelDesc;
class LineDeskInfoDesc;
class Sheet_LineDeskInfoDesc;
class LineAlgoDesc;
class Sheet_LineAlgoDesc;

// ===================================================================

class FishLevelDesc : public ::google::protobuf::Message {
 public:
  FishLevelDesc();
  virtual ~FishLevelDesc();

  FishLevelDesc(const FishLevelDesc& from);

  inline FishLevelDesc& operator=(const FishLevelDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FishLevelDesc& default_instance();

  void Swap(FishLevelDesc* other);

  // implements Message ----------------------------------------------

  FishLevelDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FishLevelDesc& from);
  void MergeFrom(const FishLevelDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 LevelID = 1;
  inline bool has_levelid() const;
  inline void clear_levelid();
  static const int kLevelIDFieldNumber = 1;
  inline ::google::protobuf::int32 levelid() const;
  inline void set_levelid(::google::protobuf::int32 value);

  // optional string LevelName = 2;
  inline bool has_levelname() const;
  inline void clear_levelname();
  static const int kLevelNameFieldNumber = 2;
  inline const ::std::string& levelname() const;
  inline void set_levelname(const ::std::string& value);
  inline void set_levelname(const char* value);
  inline void set_levelname(const char* value, size_t size);
  inline ::std::string* mutable_levelname();
  inline ::std::string* release_levelname();
  inline void set_allocated_levelname(::std::string* levelname);

  // optional string CannonLevelVal = 3;
  inline bool has_cannonlevelval() const;
  inline void clear_cannonlevelval();
  static const int kCannonLevelValFieldNumber = 3;
  inline const ::std::string& cannonlevelval() const;
  inline void set_cannonlevelval(const ::std::string& value);
  inline void set_cannonlevelval(const char* value);
  inline void set_cannonlevelval(const char* value, size_t size);
  inline ::std::string* mutable_cannonlevelval();
  inline ::std::string* release_cannonlevelval();
  inline void set_allocated_cannonlevelval(::std::string* cannonlevelval);

  // repeated int32 VecCannonLevelVal = 4;
  inline int veccannonlevelval_size() const;
  inline void clear_veccannonlevelval();
  static const int kVecCannonLevelValFieldNumber = 4;
  inline ::google::protobuf::int32 veccannonlevelval(int index) const;
  inline void set_veccannonlevelval(int index, ::google::protobuf::int32 value);
  inline void add_veccannonlevelval(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      veccannonlevelval() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_veccannonlevelval();

  // optional string CannonShowNum = 5;
  inline bool has_cannonshownum() const;
  inline void clear_cannonshownum();
  static const int kCannonShowNumFieldNumber = 5;
  inline const ::std::string& cannonshownum() const;
  inline void set_cannonshownum(const ::std::string& value);
  inline void set_cannonshownum(const char* value);
  inline void set_cannonshownum(const char* value, size_t size);
  inline ::std::string* mutable_cannonshownum();
  inline ::std::string* release_cannonshownum();
  inline void set_allocated_cannonshownum(::std::string* cannonshownum);

  // repeated int32 VecCannonShowNum = 6;
  inline int veccannonshownum_size() const;
  inline void clear_veccannonshownum();
  static const int kVecCannonShowNumFieldNumber = 6;
  inline ::google::protobuf::int32 veccannonshownum(int index) const;
  inline void set_veccannonshownum(int index, ::google::protobuf::int32 value);
  inline void add_veccannonshownum(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      veccannonshownum() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_veccannonshownum();

  // optional int32 MinMoney = 7;
  inline bool has_minmoney() const;
  inline void clear_minmoney();
  static const int kMinMoneyFieldNumber = 7;
  inline ::google::protobuf::int32 minmoney() const;
  inline void set_minmoney(::google::protobuf::int32 value);

  // optional int32 MaxMoney = 8;
  inline bool has_maxmoney() const;
  inline void clear_maxmoney();
  static const int kMaxMoneyFieldNumber = 8;
  inline ::google::protobuf::int32 maxmoney() const;
  inline void set_maxmoney(::google::protobuf::int32 value);

  // optional int32 StartGame = 9;
  inline bool has_startgame() const;
  inline void clear_startgame();
  static const int kStartGameFieldNumber = 9;
  inline ::google::protobuf::int32 startgame() const;
  inline void set_startgame(::google::protobuf::int32 value);

  // optional int32 Flag = 10;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 10;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FishLevelDesc)
 private:
  inline void set_has_levelid();
  inline void clear_has_levelid();
  inline void set_has_levelname();
  inline void clear_has_levelname();
  inline void set_has_cannonlevelval();
  inline void clear_has_cannonlevelval();
  inline void set_has_cannonshownum();
  inline void clear_has_cannonshownum();
  inline void set_has_minmoney();
  inline void clear_has_minmoney();
  inline void set_has_maxmoney();
  inline void clear_has_maxmoney();
  inline void set_has_startgame();
  inline void clear_has_startgame();
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* levelname_;
  ::std::string* cannonlevelval_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > veccannonlevelval_;
  ::google::protobuf::int32 levelid_;
  ::google::protobuf::int32 minmoney_;
  ::std::string* cannonshownum_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > veccannonshownum_;
  ::google::protobuf::int32 maxmoney_;
  ::google::protobuf::int32 startgame_;
  ::google::protobuf::int32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static FishLevelDesc* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FishLevelDesc : public ::google::protobuf::Message {
 public:
  Sheet_FishLevelDesc();
  virtual ~Sheet_FishLevelDesc();

  Sheet_FishLevelDesc(const Sheet_FishLevelDesc& from);

  inline Sheet_FishLevelDesc& operator=(const Sheet_FishLevelDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FishLevelDesc& default_instance();

  void Swap(Sheet_FishLevelDesc* other);

  // implements Message ----------------------------------------------

  Sheet_FishLevelDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FishLevelDesc& from);
  void MergeFrom(const Sheet_FishLevelDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FishLevelDesc FishLevelDesc_List = 1;
  inline int fishleveldesc_list_size() const;
  inline void clear_fishleveldesc_list();
  static const int kFishLevelDescListFieldNumber = 1;
  inline const ::proto_ff::FishLevelDesc& fishleveldesc_list(int index) const;
  inline ::proto_ff::FishLevelDesc* mutable_fishleveldesc_list(int index);
  inline ::proto_ff::FishLevelDesc* add_fishleveldesc_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FishLevelDesc >&
      fishleveldesc_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FishLevelDesc >*
      mutable_fishleveldesc_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FishLevelDesc)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FishLevelDesc > fishleveldesc_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FishLevelDesc* default_instance_;
};
// -------------------------------------------------------------------

class FishConfigDesc : public ::google::protobuf::Message {
 public:
  FishConfigDesc();
  virtual ~FishConfigDesc();

  FishConfigDesc(const FishConfigDesc& from);

  inline FishConfigDesc& operator=(const FishConfigDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FishConfigDesc& default_instance();

  void Swap(FishConfigDesc* other);

  // implements Message ----------------------------------------------

  FishConfigDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FishConfigDesc& from);
  void MergeFrom(const FishConfigDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 fish_id = 1;
  inline bool has_fish_id() const;
  inline void clear_fish_id();
  static const int kFishIdFieldNumber = 1;
  inline ::google::protobuf::int32 fish_id() const;
  inline void set_fish_id(::google::protobuf::int32 value);

  // optional int32 fish_type = 2;
  inline bool has_fish_type() const;
  inline void clear_fish_type();
  static const int kFishTypeFieldNumber = 2;
  inline ::google::protobuf::int32 fish_type() const;
  inline void set_fish_type(::google::protobuf::int32 value);

  // optional int32 build_fish_type = 3;
  inline bool has_build_fish_type() const;
  inline void clear_build_fish_type();
  static const int kBuildFishTypeFieldNumber = 3;
  inline ::google::protobuf::int32 build_fish_type() const;
  inline void set_build_fish_type(::google::protobuf::int32 value);

  // optional int32 ratio_min = 4;
  inline bool has_ratio_min() const;
  inline void clear_ratio_min();
  static const int kRatioMinFieldNumber = 4;
  inline ::google::protobuf::int32 ratio_min() const;
  inline void set_ratio_min(::google::protobuf::int32 value);

  // optional int32 ratio_max = 5;
  inline bool has_ratio_max() const;
  inline void clear_ratio_max();
  static const int kRatioMaxFieldNumber = 5;
  inline ::google::protobuf::int32 ratio_max() const;
  inline void set_ratio_max(::google::protobuf::int32 value);

  // optional int32 double_award_min_ratio = 6;
  inline bool has_double_award_min_ratio() const;
  inline void clear_double_award_min_ratio();
  static const int kDoubleAwardMinRatioFieldNumber = 6;
  inline ::google::protobuf::int32 double_award_min_ratio() const;
  inline void set_double_award_min_ratio(::google::protobuf::int32 value);

  // optional int32 child_fish_count = 7;
  inline bool has_child_fish_count() const;
  inline void clear_child_fish_count();
  static const int kChildFishCountFieldNumber = 7;
  inline ::google::protobuf::int32 child_fish_count() const;
  inline void set_child_fish_count(::google::protobuf::int32 value);

  // repeated string child_fish_ids = 8;
  inline int child_fish_ids_size() const;
  inline void clear_child_fish_ids();
  static const int kChildFishIdsFieldNumber = 8;
  inline const ::std::string& child_fish_ids(int index) const;
  inline ::std::string* mutable_child_fish_ids(int index);
  inline void set_child_fish_ids(int index, const ::std::string& value);
  inline void set_child_fish_ids(int index, const char* value);
  inline void set_child_fish_ids(int index, const char* value, size_t size);
  inline ::std::string* add_child_fish_ids();
  inline void add_child_fish_ids(const ::std::string& value);
  inline void add_child_fish_ids(const char* value);
  inline void add_child_fish_ids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& child_fish_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_child_fish_ids();

  // optional int32 damage_radius = 9;
  inline bool has_damage_radius() const;
  inline void clear_damage_radius();
  static const int kDamageRadiusFieldNumber = 9;
  inline ::google::protobuf::int32 damage_radius() const;
  inline void set_damage_radius(::google::protobuf::int32 value);

  // optional string damage_fish_ids = 10;
  inline bool has_damage_fish_ids() const;
  inline void clear_damage_fish_ids();
  static const int kDamageFishIdsFieldNumber = 10;
  inline const ::std::string& damage_fish_ids() const;
  inline void set_damage_fish_ids(const ::std::string& value);
  inline void set_damage_fish_ids(const char* value);
  inline void set_damage_fish_ids(const char* value, size_t size);
  inline ::std::string* mutable_damage_fish_ids();
  inline ::std::string* release_damage_fish_ids();
  inline void set_allocated_damage_fish_ids(::std::string* damage_fish_ids);

  // @@protoc_insertion_point(class_scope:proto_ff.FishConfigDesc)
 private:
  inline void set_has_fish_id();
  inline void clear_has_fish_id();
  inline void set_has_fish_type();
  inline void clear_has_fish_type();
  inline void set_has_build_fish_type();
  inline void clear_has_build_fish_type();
  inline void set_has_ratio_min();
  inline void clear_has_ratio_min();
  inline void set_has_ratio_max();
  inline void clear_has_ratio_max();
  inline void set_has_double_award_min_ratio();
  inline void clear_has_double_award_min_ratio();
  inline void set_has_child_fish_count();
  inline void clear_has_child_fish_count();
  inline void set_has_damage_radius();
  inline void clear_has_damage_radius();
  inline void set_has_damage_fish_ids();
  inline void clear_has_damage_fish_ids();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 fish_id_;
  ::google::protobuf::int32 fish_type_;
  ::google::protobuf::int32 build_fish_type_;
  ::google::protobuf::int32 ratio_min_;
  ::google::protobuf::int32 ratio_max_;
  ::google::protobuf::int32 double_award_min_ratio_;
  ::google::protobuf::RepeatedPtrField< ::std::string> child_fish_ids_;
  ::google::protobuf::int32 child_fish_count_;
  ::google::protobuf::int32 damage_radius_;
  ::std::string* damage_fish_ids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static FishConfigDesc* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FishConfigDesc : public ::google::protobuf::Message {
 public:
  Sheet_FishConfigDesc();
  virtual ~Sheet_FishConfigDesc();

  Sheet_FishConfigDesc(const Sheet_FishConfigDesc& from);

  inline Sheet_FishConfigDesc& operator=(const Sheet_FishConfigDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FishConfigDesc& default_instance();

  void Swap(Sheet_FishConfigDesc* other);

  // implements Message ----------------------------------------------

  Sheet_FishConfigDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FishConfigDesc& from);
  void MergeFrom(const Sheet_FishConfigDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FishConfigDesc FishConfigDesc_List = 1;
  inline int fishconfigdesc_list_size() const;
  inline void clear_fishconfigdesc_list();
  static const int kFishConfigDescListFieldNumber = 1;
  inline const ::proto_ff::FishConfigDesc& fishconfigdesc_list(int index) const;
  inline ::proto_ff::FishConfigDesc* mutable_fishconfigdesc_list(int index);
  inline ::proto_ff::FishConfigDesc* add_fishconfigdesc_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FishConfigDesc >&
      fishconfigdesc_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FishConfigDesc >*
      mutable_fishconfigdesc_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FishConfigDesc)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FishConfigDesc > fishconfigdesc_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FishConfigDesc* default_instance_;
};
// -------------------------------------------------------------------

class GunValueConfig : public ::google::protobuf::Message {
 public:
  GunValueConfig();
  virtual ~GunValueConfig();

  GunValueConfig(const GunValueConfig& from);

  inline GunValueConfig& operator=(const GunValueConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GunValueConfig& default_instance();

  void Swap(GunValueConfig* other);

  // implements Message ----------------------------------------------

  GunValueConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GunValueConfig& from);
  void MergeFrom(const GunValueConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // optional int32 room_id = 3;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // optional int32 gun_id = 4;
  inline bool has_gun_id() const;
  inline void clear_gun_id();
  static const int kGunIdFieldNumber = 4;
  inline ::google::protobuf::int32 gun_id() const;
  inline void set_gun_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.GunValueConfig)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_gun_id();
  inline void clear_has_gun_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 value_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 gun_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static GunValueConfig* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_GunValueConfig : public ::google::protobuf::Message {
 public:
  Sheet_GunValueConfig();
  virtual ~Sheet_GunValueConfig();

  Sheet_GunValueConfig(const Sheet_GunValueConfig& from);

  inline Sheet_GunValueConfig& operator=(const Sheet_GunValueConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_GunValueConfig& default_instance();

  void Swap(Sheet_GunValueConfig* other);

  // implements Message ----------------------------------------------

  Sheet_GunValueConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_GunValueConfig& from);
  void MergeFrom(const Sheet_GunValueConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.GunValueConfig GunValueConfig_List = 1;
  inline int gunvalueconfig_list_size() const;
  inline void clear_gunvalueconfig_list();
  static const int kGunValueConfigListFieldNumber = 1;
  inline const ::proto_ff::GunValueConfig& gunvalueconfig_list(int index) const;
  inline ::proto_ff::GunValueConfig* mutable_gunvalueconfig_list(int index);
  inline ::proto_ff::GunValueConfig* add_gunvalueconfig_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GunValueConfig >&
      gunvalueconfig_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GunValueConfig >*
      mutable_gunvalueconfig_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_GunValueConfig)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::GunValueConfig > gunvalueconfig_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static Sheet_GunValueConfig* default_instance_;
};
// -------------------------------------------------------------------

class FishAlgoDesc : public ::google::protobuf::Message {
 public:
  FishAlgoDesc();
  virtual ~FishAlgoDesc();

  FishAlgoDesc(const FishAlgoDesc& from);

  inline FishAlgoDesc& operator=(const FishAlgoDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FishAlgoDesc& default_instance();

  void Swap(FishAlgoDesc* other);

  // implements Message ----------------------------------------------

  FishAlgoDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FishAlgoDesc& from);
  void MergeFrom(const FishAlgoDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 AlgoID = 1;
  inline bool has_algoid() const;
  inline void clear_algoid();
  static const int kAlgoIDFieldNumber = 1;
  inline ::google::protobuf::int32 algoid() const;
  inline void set_algoid(::google::protobuf::int32 value);

  // optional int32 GamePlatform = 2;
  inline bool has_gameplatform() const;
  inline void clear_gameplatform();
  static const int kGamePlatformFieldNumber = 2;
  inline ::google::protobuf::int32 gameplatform() const;
  inline void set_gameplatform(::google::protobuf::int32 value);

  // optional string AlgoName = 3;
  inline bool has_algoname() const;
  inline void clear_algoname();
  static const int kAlgoNameFieldNumber = 3;
  inline const ::std::string& algoname() const;
  inline void set_algoname(const ::std::string& value);
  inline void set_algoname(const char* value);
  inline void set_algoname(const char* value, size_t size);
  inline ::std::string* mutable_algoname();
  inline ::std::string* release_algoname();
  inline void set_allocated_algoname(::std::string* algoname);

  // optional string AlgoDesc = 4;
  inline bool has_algodesc() const;
  inline void clear_algodesc();
  static const int kAlgoDescFieldNumber = 4;
  inline const ::std::string& algodesc() const;
  inline void set_algodesc(const ::std::string& value);
  inline void set_algodesc(const char* value);
  inline void set_algodesc(const char* value, size_t size);
  inline ::std::string* mutable_algodesc();
  inline ::std::string* release_algodesc();
  inline void set_allocated_algodesc(::std::string* algodesc);

  // optional int64 ChangeTimes = 5;
  inline bool has_changetimes() const;
  inline void clear_changetimes();
  static const int kChangeTimesFieldNumber = 5;
  inline ::google::protobuf::int64 changetimes() const;
  inline void set_changetimes(::google::protobuf::int64 value);

  // optional int64 ChangeLiuShui = 6;
  inline bool has_changeliushui() const;
  inline void clear_changeliushui();
  static const int kChangeLiuShuiFieldNumber = 6;
  inline ::google::protobuf::int64 changeliushui() const;
  inline void set_changeliushui(::google::protobuf::int64 value);

  // optional int64 Chang1_RangeLow = 7;
  inline bool has_chang1_rangelow() const;
  inline void clear_chang1_rangelow();
  static const int kChang1RangeLowFieldNumber = 7;
  inline ::google::protobuf::int64 chang1_rangelow() const;
  inline void set_chang1_rangelow(::google::protobuf::int64 value);

  // optional int64 Chang1_RangeHigh = 8;
  inline bool has_chang1_rangehigh() const;
  inline void clear_chang1_rangehigh();
  static const int kChang1RangeHighFieldNumber = 8;
  inline ::google::protobuf::int64 chang1_rangehigh() const;
  inline void set_chang1_rangehigh(::google::protobuf::int64 value);

  // optional int64 Chang1_Chi1 = 9;
  inline bool has_chang1_chi1() const;
  inline void clear_chang1_chi1();
  static const int kChang1Chi1FieldNumber = 9;
  inline ::google::protobuf::int64 chang1_chi1() const;
  inline void set_chang1_chi1(::google::protobuf::int64 value);

  // optional int64 Chang1_Chi2 = 10;
  inline bool has_chang1_chi2() const;
  inline void clear_chang1_chi2();
  static const int kChang1Chi2FieldNumber = 10;
  inline ::google::protobuf::int64 chang1_chi2() const;
  inline void set_chang1_chi2(::google::protobuf::int64 value);

  // optional int64 Chang1_Chi3 = 11;
  inline bool has_chang1_chi3() const;
  inline void clear_chang1_chi3();
  static const int kChang1Chi3FieldNumber = 11;
  inline ::google::protobuf::int64 chang1_chi3() const;
  inline void set_chang1_chi3(::google::protobuf::int64 value);

  // optional int64 Chang1_Fang1 = 12;
  inline bool has_chang1_fang1() const;
  inline void clear_chang1_fang1();
  static const int kChang1Fang1FieldNumber = 12;
  inline ::google::protobuf::int64 chang1_fang1() const;
  inline void set_chang1_fang1(::google::protobuf::int64 value);

  // optional int64 Chang1_Fang2 = 13;
  inline bool has_chang1_fang2() const;
  inline void clear_chang1_fang2();
  static const int kChang1Fang2FieldNumber = 13;
  inline ::google::protobuf::int64 chang1_fang2() const;
  inline void set_chang1_fang2(::google::protobuf::int64 value);

  // optional int64 Chang1_Fang3 = 14;
  inline bool has_chang1_fang3() const;
  inline void clear_chang1_fang3();
  static const int kChang1Fang3FieldNumber = 14;
  inline ::google::protobuf::int64 chang1_fang3() const;
  inline void set_chang1_fang3(::google::protobuf::int64 value);

  // optional int64 Chang1_RateChi1 = 15;
  inline bool has_chang1_ratechi1() const;
  inline void clear_chang1_ratechi1();
  static const int kChang1RateChi1FieldNumber = 15;
  inline ::google::protobuf::int64 chang1_ratechi1() const;
  inline void set_chang1_ratechi1(::google::protobuf::int64 value);

  // optional int64 Chang1_RateChi2 = 16;
  inline bool has_chang1_ratechi2() const;
  inline void clear_chang1_ratechi2();
  static const int kChang1RateChi2FieldNumber = 16;
  inline ::google::protobuf::int64 chang1_ratechi2() const;
  inline void set_chang1_ratechi2(::google::protobuf::int64 value);

  // optional int64 Chang1_RateChi3 = 17;
  inline bool has_chang1_ratechi3() const;
  inline void clear_chang1_ratechi3();
  static const int kChang1RateChi3FieldNumber = 17;
  inline ::google::protobuf::int64 chang1_ratechi3() const;
  inline void set_chang1_ratechi3(::google::protobuf::int64 value);

  // optional int64 Chang1_RatePing = 18;
  inline bool has_chang1_rateping() const;
  inline void clear_chang1_rateping();
  static const int kChang1RatePingFieldNumber = 18;
  inline ::google::protobuf::int64 chang1_rateping() const;
  inline void set_chang1_rateping(::google::protobuf::int64 value);

  // optional int64 Chang1_RateFang1 = 19;
  inline bool has_chang1_ratefang1() const;
  inline void clear_chang1_ratefang1();
  static const int kChang1RateFang1FieldNumber = 19;
  inline ::google::protobuf::int64 chang1_ratefang1() const;
  inline void set_chang1_ratefang1(::google::protobuf::int64 value);

  // optional int64 Chang1_RateFang2 = 20;
  inline bool has_chang1_ratefang2() const;
  inline void clear_chang1_ratefang2();
  static const int kChang1RateFang2FieldNumber = 20;
  inline ::google::protobuf::int64 chang1_ratefang2() const;
  inline void set_chang1_ratefang2(::google::protobuf::int64 value);

  // optional int64 Chang1_RateFang3 = 21;
  inline bool has_chang1_ratefang3() const;
  inline void clear_chang1_ratefang3();
  static const int kChang1RateFang3FieldNumber = 21;
  inline ::google::protobuf::int64 chang1_ratefang3() const;
  inline void set_chang1_ratefang3(::google::protobuf::int64 value);

  // optional int64 Chang2_RangeLow = 22;
  inline bool has_chang2_rangelow() const;
  inline void clear_chang2_rangelow();
  static const int kChang2RangeLowFieldNumber = 22;
  inline ::google::protobuf::int64 chang2_rangelow() const;
  inline void set_chang2_rangelow(::google::protobuf::int64 value);

  // optional int64 Chang2_RangeHigh = 23;
  inline bool has_chang2_rangehigh() const;
  inline void clear_chang2_rangehigh();
  static const int kChang2RangeHighFieldNumber = 23;
  inline ::google::protobuf::int64 chang2_rangehigh() const;
  inline void set_chang2_rangehigh(::google::protobuf::int64 value);

  // optional int64 Chang2_Chi1 = 24;
  inline bool has_chang2_chi1() const;
  inline void clear_chang2_chi1();
  static const int kChang2Chi1FieldNumber = 24;
  inline ::google::protobuf::int64 chang2_chi1() const;
  inline void set_chang2_chi1(::google::protobuf::int64 value);

  // optional int64 Chang2_Chi2 = 25;
  inline bool has_chang2_chi2() const;
  inline void clear_chang2_chi2();
  static const int kChang2Chi2FieldNumber = 25;
  inline ::google::protobuf::int64 chang2_chi2() const;
  inline void set_chang2_chi2(::google::protobuf::int64 value);

  // optional int64 Chang2_Chi3 = 26;
  inline bool has_chang2_chi3() const;
  inline void clear_chang2_chi3();
  static const int kChang2Chi3FieldNumber = 26;
  inline ::google::protobuf::int64 chang2_chi3() const;
  inline void set_chang2_chi3(::google::protobuf::int64 value);

  // optional int64 Chang2_Fang1 = 27;
  inline bool has_chang2_fang1() const;
  inline void clear_chang2_fang1();
  static const int kChang2Fang1FieldNumber = 27;
  inline ::google::protobuf::int64 chang2_fang1() const;
  inline void set_chang2_fang1(::google::protobuf::int64 value);

  // optional int64 Chang2_Fang2 = 28;
  inline bool has_chang2_fang2() const;
  inline void clear_chang2_fang2();
  static const int kChang2Fang2FieldNumber = 28;
  inline ::google::protobuf::int64 chang2_fang2() const;
  inline void set_chang2_fang2(::google::protobuf::int64 value);

  // optional int64 Chang2_Fang3 = 29;
  inline bool has_chang2_fang3() const;
  inline void clear_chang2_fang3();
  static const int kChang2Fang3FieldNumber = 29;
  inline ::google::protobuf::int64 chang2_fang3() const;
  inline void set_chang2_fang3(::google::protobuf::int64 value);

  // optional int64 Chang2_RateChi1 = 30;
  inline bool has_chang2_ratechi1() const;
  inline void clear_chang2_ratechi1();
  static const int kChang2RateChi1FieldNumber = 30;
  inline ::google::protobuf::int64 chang2_ratechi1() const;
  inline void set_chang2_ratechi1(::google::protobuf::int64 value);

  // optional int64 Chang2_RateChi2 = 31;
  inline bool has_chang2_ratechi2() const;
  inline void clear_chang2_ratechi2();
  static const int kChang2RateChi2FieldNumber = 31;
  inline ::google::protobuf::int64 chang2_ratechi2() const;
  inline void set_chang2_ratechi2(::google::protobuf::int64 value);

  // optional int64 Chang2_RateChi3 = 32;
  inline bool has_chang2_ratechi3() const;
  inline void clear_chang2_ratechi3();
  static const int kChang2RateChi3FieldNumber = 32;
  inline ::google::protobuf::int64 chang2_ratechi3() const;
  inline void set_chang2_ratechi3(::google::protobuf::int64 value);

  // optional int64 Chang2_RatePing = 33;
  inline bool has_chang2_rateping() const;
  inline void clear_chang2_rateping();
  static const int kChang2RatePingFieldNumber = 33;
  inline ::google::protobuf::int64 chang2_rateping() const;
  inline void set_chang2_rateping(::google::protobuf::int64 value);

  // optional int64 Chang2_RateFang1 = 34;
  inline bool has_chang2_ratefang1() const;
  inline void clear_chang2_ratefang1();
  static const int kChang2RateFang1FieldNumber = 34;
  inline ::google::protobuf::int64 chang2_ratefang1() const;
  inline void set_chang2_ratefang1(::google::protobuf::int64 value);

  // optional int64 Chang2_RateFang2 = 35;
  inline bool has_chang2_ratefang2() const;
  inline void clear_chang2_ratefang2();
  static const int kChang2RateFang2FieldNumber = 35;
  inline ::google::protobuf::int64 chang2_ratefang2() const;
  inline void set_chang2_ratefang2(::google::protobuf::int64 value);

  // optional int64 Chang2_RateFang3 = 36;
  inline bool has_chang2_ratefang3() const;
  inline void clear_chang2_ratefang3();
  static const int kChang2RateFang3FieldNumber = 36;
  inline ::google::protobuf::int64 chang2_ratefang3() const;
  inline void set_chang2_ratefang3(::google::protobuf::int64 value);

  // optional int64 Chang3_RangeLow = 37;
  inline bool has_chang3_rangelow() const;
  inline void clear_chang3_rangelow();
  static const int kChang3RangeLowFieldNumber = 37;
  inline ::google::protobuf::int64 chang3_rangelow() const;
  inline void set_chang3_rangelow(::google::protobuf::int64 value);

  // optional int64 Chang3_RangeHigh = 38;
  inline bool has_chang3_rangehigh() const;
  inline void clear_chang3_rangehigh();
  static const int kChang3RangeHighFieldNumber = 38;
  inline ::google::protobuf::int64 chang3_rangehigh() const;
  inline void set_chang3_rangehigh(::google::protobuf::int64 value);

  // optional int64 Chang3_Chi1 = 39;
  inline bool has_chang3_chi1() const;
  inline void clear_chang3_chi1();
  static const int kChang3Chi1FieldNumber = 39;
  inline ::google::protobuf::int64 chang3_chi1() const;
  inline void set_chang3_chi1(::google::protobuf::int64 value);

  // optional int64 Chang3_Chi2 = 40;
  inline bool has_chang3_chi2() const;
  inline void clear_chang3_chi2();
  static const int kChang3Chi2FieldNumber = 40;
  inline ::google::protobuf::int64 chang3_chi2() const;
  inline void set_chang3_chi2(::google::protobuf::int64 value);

  // optional int64 Chang3_Chi3 = 41;
  inline bool has_chang3_chi3() const;
  inline void clear_chang3_chi3();
  static const int kChang3Chi3FieldNumber = 41;
  inline ::google::protobuf::int64 chang3_chi3() const;
  inline void set_chang3_chi3(::google::protobuf::int64 value);

  // optional int64 Chang3_Fang1 = 42;
  inline bool has_chang3_fang1() const;
  inline void clear_chang3_fang1();
  static const int kChang3Fang1FieldNumber = 42;
  inline ::google::protobuf::int64 chang3_fang1() const;
  inline void set_chang3_fang1(::google::protobuf::int64 value);

  // optional int64 Chang3_Fang2 = 43;
  inline bool has_chang3_fang2() const;
  inline void clear_chang3_fang2();
  static const int kChang3Fang2FieldNumber = 43;
  inline ::google::protobuf::int64 chang3_fang2() const;
  inline void set_chang3_fang2(::google::protobuf::int64 value);

  // optional int64 Chang3_Fang3 = 44;
  inline bool has_chang3_fang3() const;
  inline void clear_chang3_fang3();
  static const int kChang3Fang3FieldNumber = 44;
  inline ::google::protobuf::int64 chang3_fang3() const;
  inline void set_chang3_fang3(::google::protobuf::int64 value);

  // optional int64 Chang3_RateChi1 = 45;
  inline bool has_chang3_ratechi1() const;
  inline void clear_chang3_ratechi1();
  static const int kChang3RateChi1FieldNumber = 45;
  inline ::google::protobuf::int64 chang3_ratechi1() const;
  inline void set_chang3_ratechi1(::google::protobuf::int64 value);

  // optional int64 Chang3_RateChi2 = 46;
  inline bool has_chang3_ratechi2() const;
  inline void clear_chang3_ratechi2();
  static const int kChang3RateChi2FieldNumber = 46;
  inline ::google::protobuf::int64 chang3_ratechi2() const;
  inline void set_chang3_ratechi2(::google::protobuf::int64 value);

  // optional int64 Chang3_RateChi3 = 47;
  inline bool has_chang3_ratechi3() const;
  inline void clear_chang3_ratechi3();
  static const int kChang3RateChi3FieldNumber = 47;
  inline ::google::protobuf::int64 chang3_ratechi3() const;
  inline void set_chang3_ratechi3(::google::protobuf::int64 value);

  // optional int64 Chang3_RatePing = 48;
  inline bool has_chang3_rateping() const;
  inline void clear_chang3_rateping();
  static const int kChang3RatePingFieldNumber = 48;
  inline ::google::protobuf::int64 chang3_rateping() const;
  inline void set_chang3_rateping(::google::protobuf::int64 value);

  // optional int64 Chang3_RateFang1 = 49;
  inline bool has_chang3_ratefang1() const;
  inline void clear_chang3_ratefang1();
  static const int kChang3RateFang1FieldNumber = 49;
  inline ::google::protobuf::int64 chang3_ratefang1() const;
  inline void set_chang3_ratefang1(::google::protobuf::int64 value);

  // optional int64 Chang3_RateFang2 = 50;
  inline bool has_chang3_ratefang2() const;
  inline void clear_chang3_ratefang2();
  static const int kChang3RateFang2FieldNumber = 50;
  inline ::google::protobuf::int64 chang3_ratefang2() const;
  inline void set_chang3_ratefang2(::google::protobuf::int64 value);

  // optional int64 Chang3_RateFang3 = 51;
  inline bool has_chang3_ratefang3() const;
  inline void clear_chang3_ratefang3();
  static const int kChang3RateFang3FieldNumber = 51;
  inline ::google::protobuf::int64 chang3_ratefang3() const;
  inline void set_chang3_ratefang3(::google::protobuf::int64 value);

  // optional int64 Clear_MaxVal = 52;
  inline bool has_clear_maxval() const;
  inline void clear_clear_maxval();
  static const int kClearMaxValFieldNumber = 52;
  inline ::google::protobuf::int64 clear_maxval() const;
  inline void set_clear_maxval(::google::protobuf::int64 value);

  // optional int64 Clear_Fang3Mul = 53;
  inline bool has_clear_fang3mul() const;
  inline void clear_clear_fang3mul();
  static const int kClearFang3MulFieldNumber = 53;
  inline ::google::protobuf::int64 clear_fang3mul() const;
  inline void set_clear_fang3mul(::google::protobuf::int64 value);

  // optional int32 Clear_Chi3Mul = 54;
  inline bool has_clear_chi3mul() const;
  inline void clear_clear_chi3mul();
  static const int kClearChi3MulFieldNumber = 54;
  inline ::google::protobuf::int32 clear_chi3mul() const;
  inline void set_clear_chi3mul(::google::protobuf::int32 value);

  // optional int32 Clear_InitShoot = 55;
  inline bool has_clear_initshoot() const;
  inline void clear_clear_initshoot();
  static const int kClearInitShootFieldNumber = 55;
  inline ::google::protobuf::int32 clear_initshoot() const;
  inline void set_clear_initshoot(::google::protobuf::int32 value);

  // optional int32 Clear_InitCapture = 56;
  inline bool has_clear_initcapture() const;
  inline void clear_clear_initcapture();
  static const int kClearInitCaptureFieldNumber = 56;
  inline ::google::protobuf::int32 clear_initcapture() const;
  inline void set_clear_initcapture(::google::protobuf::int32 value);

  // optional int32 Clear_InitDrawRate = 57;
  inline bool has_clear_initdrawrate() const;
  inline void clear_clear_initdrawrate();
  static const int kClearInitDrawRateFieldNumber = 57;
  inline ::google::protobuf::int32 clear_initdrawrate() const;
  inline void set_clear_initdrawrate(::google::protobuf::int32 value);

  // optional int32 Clear_InitPoolRate = 58;
  inline bool has_clear_initpoolrate() const;
  inline void clear_clear_initpoolrate();
  static const int kClearInitPoolRateFieldNumber = 58;
  inline ::google::protobuf::int32 clear_initpoolrate() const;
  inline void set_clear_initpoolrate(::google::protobuf::int32 value);

  // optional int32 Is_delete = 59;
  inline bool has_is_delete() const;
  inline void clear_is_delete();
  static const int kIsDeleteFieldNumber = 59;
  inline ::google::protobuf::int32 is_delete() const;
  inline void set_is_delete(::google::protobuf::int32 value);

  // optional int32 FishAlgoType = 60;
  inline bool has_fishalgotype() const;
  inline void clear_fishalgotype();
  static const int kFishAlgoTypeFieldNumber = 60;
  inline ::google::protobuf::int32 fishalgotype() const;
  inline void set_fishalgotype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FishAlgoDesc)
 private:
  inline void set_has_algoid();
  inline void clear_has_algoid();
  inline void set_has_gameplatform();
  inline void clear_has_gameplatform();
  inline void set_has_algoname();
  inline void clear_has_algoname();
  inline void set_has_algodesc();
  inline void clear_has_algodesc();
  inline void set_has_changetimes();
  inline void clear_has_changetimes();
  inline void set_has_changeliushui();
  inline void clear_has_changeliushui();
  inline void set_has_chang1_rangelow();
  inline void clear_has_chang1_rangelow();
  inline void set_has_chang1_rangehigh();
  inline void clear_has_chang1_rangehigh();
  inline void set_has_chang1_chi1();
  inline void clear_has_chang1_chi1();
  inline void set_has_chang1_chi2();
  inline void clear_has_chang1_chi2();
  inline void set_has_chang1_chi3();
  inline void clear_has_chang1_chi3();
  inline void set_has_chang1_fang1();
  inline void clear_has_chang1_fang1();
  inline void set_has_chang1_fang2();
  inline void clear_has_chang1_fang2();
  inline void set_has_chang1_fang3();
  inline void clear_has_chang1_fang3();
  inline void set_has_chang1_ratechi1();
  inline void clear_has_chang1_ratechi1();
  inline void set_has_chang1_ratechi2();
  inline void clear_has_chang1_ratechi2();
  inline void set_has_chang1_ratechi3();
  inline void clear_has_chang1_ratechi3();
  inline void set_has_chang1_rateping();
  inline void clear_has_chang1_rateping();
  inline void set_has_chang1_ratefang1();
  inline void clear_has_chang1_ratefang1();
  inline void set_has_chang1_ratefang2();
  inline void clear_has_chang1_ratefang2();
  inline void set_has_chang1_ratefang3();
  inline void clear_has_chang1_ratefang3();
  inline void set_has_chang2_rangelow();
  inline void clear_has_chang2_rangelow();
  inline void set_has_chang2_rangehigh();
  inline void clear_has_chang2_rangehigh();
  inline void set_has_chang2_chi1();
  inline void clear_has_chang2_chi1();
  inline void set_has_chang2_chi2();
  inline void clear_has_chang2_chi2();
  inline void set_has_chang2_chi3();
  inline void clear_has_chang2_chi3();
  inline void set_has_chang2_fang1();
  inline void clear_has_chang2_fang1();
  inline void set_has_chang2_fang2();
  inline void clear_has_chang2_fang2();
  inline void set_has_chang2_fang3();
  inline void clear_has_chang2_fang3();
  inline void set_has_chang2_ratechi1();
  inline void clear_has_chang2_ratechi1();
  inline void set_has_chang2_ratechi2();
  inline void clear_has_chang2_ratechi2();
  inline void set_has_chang2_ratechi3();
  inline void clear_has_chang2_ratechi3();
  inline void set_has_chang2_rateping();
  inline void clear_has_chang2_rateping();
  inline void set_has_chang2_ratefang1();
  inline void clear_has_chang2_ratefang1();
  inline void set_has_chang2_ratefang2();
  inline void clear_has_chang2_ratefang2();
  inline void set_has_chang2_ratefang3();
  inline void clear_has_chang2_ratefang3();
  inline void set_has_chang3_rangelow();
  inline void clear_has_chang3_rangelow();
  inline void set_has_chang3_rangehigh();
  inline void clear_has_chang3_rangehigh();
  inline void set_has_chang3_chi1();
  inline void clear_has_chang3_chi1();
  inline void set_has_chang3_chi2();
  inline void clear_has_chang3_chi2();
  inline void set_has_chang3_chi3();
  inline void clear_has_chang3_chi3();
  inline void set_has_chang3_fang1();
  inline void clear_has_chang3_fang1();
  inline void set_has_chang3_fang2();
  inline void clear_has_chang3_fang2();
  inline void set_has_chang3_fang3();
  inline void clear_has_chang3_fang3();
  inline void set_has_chang3_ratechi1();
  inline void clear_has_chang3_ratechi1();
  inline void set_has_chang3_ratechi2();
  inline void clear_has_chang3_ratechi2();
  inline void set_has_chang3_ratechi3();
  inline void clear_has_chang3_ratechi3();
  inline void set_has_chang3_rateping();
  inline void clear_has_chang3_rateping();
  inline void set_has_chang3_ratefang1();
  inline void clear_has_chang3_ratefang1();
  inline void set_has_chang3_ratefang2();
  inline void clear_has_chang3_ratefang2();
  inline void set_has_chang3_ratefang3();
  inline void clear_has_chang3_ratefang3();
  inline void set_has_clear_maxval();
  inline void clear_has_clear_maxval();
  inline void set_has_clear_fang3mul();
  inline void clear_has_clear_fang3mul();
  inline void set_has_clear_chi3mul();
  inline void clear_has_clear_chi3mul();
  inline void set_has_clear_initshoot();
  inline void clear_has_clear_initshoot();
  inline void set_has_clear_initcapture();
  inline void clear_has_clear_initcapture();
  inline void set_has_clear_initdrawrate();
  inline void clear_has_clear_initdrawrate();
  inline void set_has_clear_initpoolrate();
  inline void clear_has_clear_initpoolrate();
  inline void set_has_is_delete();
  inline void clear_has_is_delete();
  inline void set_has_fishalgotype();
  inline void clear_has_fishalgotype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 algoid_;
  ::google::protobuf::int32 gameplatform_;
  ::std::string* algoname_;
  ::std::string* algodesc_;
  ::google::protobuf::int64 changetimes_;
  ::google::protobuf::int64 changeliushui_;
  ::google::protobuf::int64 chang1_rangelow_;
  ::google::protobuf::int64 chang1_rangehigh_;
  ::google::protobuf::int64 chang1_chi1_;
  ::google::protobuf::int64 chang1_chi2_;
  ::google::protobuf::int64 chang1_chi3_;
  ::google::protobuf::int64 chang1_fang1_;
  ::google::protobuf::int64 chang1_fang2_;
  ::google::protobuf::int64 chang1_fang3_;
  ::google::protobuf::int64 chang1_ratechi1_;
  ::google::protobuf::int64 chang1_ratechi2_;
  ::google::protobuf::int64 chang1_ratechi3_;
  ::google::protobuf::int64 chang1_rateping_;
  ::google::protobuf::int64 chang1_ratefang1_;
  ::google::protobuf::int64 chang1_ratefang2_;
  ::google::protobuf::int64 chang1_ratefang3_;
  ::google::protobuf::int64 chang2_rangelow_;
  ::google::protobuf::int64 chang2_rangehigh_;
  ::google::protobuf::int64 chang2_chi1_;
  ::google::protobuf::int64 chang2_chi2_;
  ::google::protobuf::int64 chang2_chi3_;
  ::google::protobuf::int64 chang2_fang1_;
  ::google::protobuf::int64 chang2_fang2_;
  ::google::protobuf::int64 chang2_fang3_;
  ::google::protobuf::int64 chang2_ratechi1_;
  ::google::protobuf::int64 chang2_ratechi2_;
  ::google::protobuf::int64 chang2_ratechi3_;
  ::google::protobuf::int64 chang2_rateping_;
  ::google::protobuf::int64 chang2_ratefang1_;
  ::google::protobuf::int64 chang2_ratefang2_;
  ::google::protobuf::int64 chang2_ratefang3_;
  ::google::protobuf::int64 chang3_rangelow_;
  ::google::protobuf::int64 chang3_rangehigh_;
  ::google::protobuf::int64 chang3_chi1_;
  ::google::protobuf::int64 chang3_chi2_;
  ::google::protobuf::int64 chang3_chi3_;
  ::google::protobuf::int64 chang3_fang1_;
  ::google::protobuf::int64 chang3_fang2_;
  ::google::protobuf::int64 chang3_fang3_;
  ::google::protobuf::int64 chang3_ratechi1_;
  ::google::protobuf::int64 chang3_ratechi2_;
  ::google::protobuf::int64 chang3_ratechi3_;
  ::google::protobuf::int64 chang3_rateping_;
  ::google::protobuf::int64 chang3_ratefang1_;
  ::google::protobuf::int64 chang3_ratefang2_;
  ::google::protobuf::int64 chang3_ratefang3_;
  ::google::protobuf::int64 clear_maxval_;
  ::google::protobuf::int64 clear_fang3mul_;
  ::google::protobuf::int32 clear_chi3mul_;
  ::google::protobuf::int32 clear_initshoot_;
  ::google::protobuf::int32 clear_initcapture_;
  ::google::protobuf::int32 clear_initdrawrate_;
  ::google::protobuf::int32 clear_initpoolrate_;
  ::google::protobuf::int32 is_delete_;
  ::google::protobuf::int32 fishalgotype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(60 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static FishAlgoDesc* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_FishAlgoDesc : public ::google::protobuf::Message {
 public:
  Sheet_FishAlgoDesc();
  virtual ~Sheet_FishAlgoDesc();

  Sheet_FishAlgoDesc(const Sheet_FishAlgoDesc& from);

  inline Sheet_FishAlgoDesc& operator=(const Sheet_FishAlgoDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_FishAlgoDesc& default_instance();

  void Swap(Sheet_FishAlgoDesc* other);

  // implements Message ----------------------------------------------

  Sheet_FishAlgoDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_FishAlgoDesc& from);
  void MergeFrom(const Sheet_FishAlgoDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FishAlgoDesc FishAlgoDesc_List = 1;
  inline int fishalgodesc_list_size() const;
  inline void clear_fishalgodesc_list();
  static const int kFishAlgoDescListFieldNumber = 1;
  inline const ::proto_ff::FishAlgoDesc& fishalgodesc_list(int index) const;
  inline ::proto_ff::FishAlgoDesc* mutable_fishalgodesc_list(int index);
  inline ::proto_ff::FishAlgoDesc* add_fishalgodesc_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FishAlgoDesc >&
      fishalgodesc_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FishAlgoDesc >*
      mutable_fishalgodesc_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_FishAlgoDesc)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FishAlgoDesc > fishalgodesc_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static Sheet_FishAlgoDesc* default_instance_;
};
// -------------------------------------------------------------------

class UserDeskAlgoInfo : public ::google::protobuf::Message {
 public:
  UserDeskAlgoInfo();
  virtual ~UserDeskAlgoInfo();

  UserDeskAlgoInfo(const UserDeskAlgoInfo& from);

  inline UserDeskAlgoInfo& operator=(const UserDeskAlgoInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserDeskAlgoInfo& default_instance();

  void Swap(UserDeskAlgoInfo* other);

  // implements Message ----------------------------------------------

  UserDeskAlgoInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserDeskAlgoInfo& from);
  void MergeFrom(const UserDeskAlgoInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 AlgoID = 1;
  inline bool has_algoid() const;
  inline void clear_algoid();
  static const int kAlgoIDFieldNumber = 1;
  inline ::google::protobuf::int32 algoid() const;
  inline void set_algoid(::google::protobuf::int32 value);

  // optional float DrawRate = 2;
  inline bool has_drawrate() const;
  inline void clear_drawrate();
  static const int kDrawRateFieldNumber = 2;
  inline float drawrate() const;
  inline void set_drawrate(float value);

  // optional double CurTotalShoot = 3;
  inline bool has_curtotalshoot() const;
  inline void clear_curtotalshoot();
  static const int kCurTotalShootFieldNumber = 3;
  inline double curtotalshoot() const;
  inline void set_curtotalshoot(double value);

  // optional double CurTotalCapture = 4;
  inline bool has_curtotalcapture() const;
  inline void clear_curtotalcapture();
  static const int kCurTotalCaptureFieldNumber = 4;
  inline double curtotalcapture() const;
  inline void set_curtotalcapture(double value);

  // optional int64 CurAlgoChang = 5;
  inline bool has_curalgochang() const;
  inline void clear_curalgochang();
  static const int kCurAlgoChangFieldNumber = 5;
  inline ::google::protobuf::int64 curalgochang() const;
  inline void set_curalgochang(::google::protobuf::int64 value);

  // optional int64 CurAlgoStatus = 6;
  inline bool has_curalgostatus() const;
  inline void clear_curalgostatus();
  static const int kCurAlgoStatusFieldNumber = 6;
  inline ::google::protobuf::int64 curalgostatus() const;
  inline void set_curalgostatus(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.UserDeskAlgoInfo)
 private:
  inline void set_has_algoid();
  inline void clear_has_algoid();
  inline void set_has_drawrate();
  inline void clear_has_drawrate();
  inline void set_has_curtotalshoot();
  inline void clear_has_curtotalshoot();
  inline void set_has_curtotalcapture();
  inline void clear_has_curtotalcapture();
  inline void set_has_curalgochang();
  inline void clear_has_curalgochang();
  inline void set_has_curalgostatus();
  inline void clear_has_curalgostatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 algoid_;
  float drawrate_;
  double curtotalshoot_;
  double curtotalcapture_;
  ::google::protobuf::int64 curalgochang_;
  ::google::protobuf::int64 curalgostatus_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static UserDeskAlgoInfo* default_instance_;
};
// -------------------------------------------------------------------

class DeskInfoDesc : public ::google::protobuf::Message {
 public:
  DeskInfoDesc();
  virtual ~DeskInfoDesc();

  DeskInfoDesc(const DeskInfoDesc& from);

  inline DeskInfoDesc& operator=(const DeskInfoDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeskInfoDesc& default_instance();

  void Swap(DeskInfoDesc* other);

  // implements Message ----------------------------------------------

  DeskInfoDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeskInfoDesc& from);
  void MergeFrom(const DeskInfoDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 RoomID = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIDFieldNumber = 2;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // optional int32 DeskID = 3;
  inline bool has_deskid() const;
  inline void clear_deskid();
  static const int kDeskIDFieldNumber = 3;
  inline ::google::protobuf::int32 deskid() const;
  inline void set_deskid(::google::protobuf::int32 value);

  // optional int32 AlgoType = 4;
  inline bool has_algotype() const;
  inline void clear_algotype();
  static const int kAlgoTypeFieldNumber = 4;
  inline ::google::protobuf::int32 algotype() const;
  inline void set_algotype(::google::protobuf::int32 value);

  // repeated .proto_ff.UserDeskAlgoInfo AlgoData = 5;
  inline int algodata_size() const;
  inline void clear_algodata();
  static const int kAlgoDataFieldNumber = 5;
  inline const ::proto_ff::UserDeskAlgoInfo& algodata(int index) const;
  inline ::proto_ff::UserDeskAlgoInfo* mutable_algodata(int index);
  inline ::proto_ff::UserDeskAlgoInfo* add_algodata();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::UserDeskAlgoInfo >&
      algodata() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::UserDeskAlgoInfo >*
      mutable_algodata();

  // optional int32 GameLevel = 6;
  inline bool has_gamelevel() const;
  inline void clear_gamelevel();
  static const int kGameLevelFieldNumber = 6;
  inline ::google::protobuf::int32 gamelevel() const;
  inline void set_gamelevel(::google::protobuf::int32 value);

  // optional int64 YValueA = 7;
  inline bool has_yvaluea() const;
  inline void clear_yvaluea();
  static const int kYValueAFieldNumber = 7;
  inline ::google::protobuf::int64 yvaluea() const;
  inline void set_yvaluea(::google::protobuf::int64 value);

  // optional int64 YValueB = 8;
  inline bool has_yvalueb() const;
  inline void clear_yvalueb();
  static const int kYValueBFieldNumber = 8;
  inline ::google::protobuf::int64 yvalueb() const;
  inline void set_yvalueb(::google::protobuf::int64 value);

  // optional int64 FreePool = 9;
  inline bool has_freepool() const;
  inline void clear_freepool();
  static const int kFreePoolFieldNumber = 9;
  inline ::google::protobuf::int64 freepool() const;
  inline void set_freepool(::google::protobuf::int64 value);

  // optional int64 YValue = 10;
  inline bool has_yvalue() const;
  inline void clear_yvalue();
  static const int kYValueFieldNumber = 10;
  inline ::google::protobuf::int64 yvalue() const;
  inline void set_yvalue(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.DeskInfoDesc)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_deskid();
  inline void clear_has_deskid();
  inline void set_has_algotype();
  inline void clear_has_algotype();
  inline void set_has_gamelevel();
  inline void clear_has_gamelevel();
  inline void set_has_yvaluea();
  inline void clear_has_yvaluea();
  inline void set_has_yvalueb();
  inline void clear_has_yvalueb();
  inline void set_has_freepool();
  inline void clear_has_freepool();
  inline void set_has_yvalue();
  inline void clear_has_yvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 deskid_;
  ::google::protobuf::int32 algotype_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::UserDeskAlgoInfo > algodata_;
  ::google::protobuf::int64 yvaluea_;
  ::google::protobuf::int64 yvalueb_;
  ::google::protobuf::int64 freepool_;
  ::google::protobuf::int64 yvalue_;
  ::google::protobuf::int32 gamelevel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static DeskInfoDesc* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_DeskInfoDesc : public ::google::protobuf::Message {
 public:
  Sheet_DeskInfoDesc();
  virtual ~Sheet_DeskInfoDesc();

  Sheet_DeskInfoDesc(const Sheet_DeskInfoDesc& from);

  inline Sheet_DeskInfoDesc& operator=(const Sheet_DeskInfoDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_DeskInfoDesc& default_instance();

  void Swap(Sheet_DeskInfoDesc* other);

  // implements Message ----------------------------------------------

  Sheet_DeskInfoDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_DeskInfoDesc& from);
  void MergeFrom(const Sheet_DeskInfoDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.DeskInfoDesc DeskInfoDesc_List = 1;
  inline int deskinfodesc_list_size() const;
  inline void clear_deskinfodesc_list();
  static const int kDeskInfoDescListFieldNumber = 1;
  inline const ::proto_ff::DeskInfoDesc& deskinfodesc_list(int index) const;
  inline ::proto_ff::DeskInfoDesc* mutable_deskinfodesc_list(int index);
  inline ::proto_ff::DeskInfoDesc* add_deskinfodesc_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::DeskInfoDesc >&
      deskinfodesc_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::DeskInfoDesc >*
      mutable_deskinfodesc_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_DeskInfoDesc)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::DeskInfoDesc > deskinfodesc_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static Sheet_DeskInfoDesc* default_instance_;
};
// -------------------------------------------------------------------

class FishInitPoolData : public ::google::protobuf::Message {
 public:
  FishInitPoolData();
  virtual ~FishInitPoolData();

  FishInitPoolData(const FishInitPoolData& from);

  inline FishInitPoolData& operator=(const FishInitPoolData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FishInitPoolData& default_instance();

  void Swap(FishInitPoolData* other);

  // implements Message ----------------------------------------------

  FishInitPoolData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FishInitPoolData& from);
  void MergeFrom(const FishInitPoolData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 fish_id = 1;
  inline bool has_fish_id() const;
  inline void clear_fish_id();
  static const int kFishIdFieldNumber = 1;
  inline ::google::protobuf::int32 fish_id() const;
  inline void set_fish_id(::google::protobuf::int32 value);

  // optional int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FishInitPoolData)
 private:
  inline void set_has_fish_id();
  inline void clear_has_fish_id();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 fish_id_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static FishInitPoolData* default_instance_;
};
// -------------------------------------------------------------------

class FishInitPool : public ::google::protobuf::Message {
 public:
  FishInitPool();
  virtual ~FishInitPool();

  FishInitPool(const FishInitPool& from);

  inline FishInitPool& operator=(const FishInitPool& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FishInitPool& default_instance();

  void Swap(FishInitPool* other);

  // implements Message ----------------------------------------------

  FishInitPool* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FishInitPool& from);
  void MergeFrom(const FishInitPool& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FishInitPoolData InitPoolCount = 1;
  inline int initpoolcount_size() const;
  inline void clear_initpoolcount();
  static const int kInitPoolCountFieldNumber = 1;
  inline const ::proto_ff::FishInitPoolData& initpoolcount(int index) const;
  inline ::proto_ff::FishInitPoolData* mutable_initpoolcount(int index);
  inline ::proto_ff::FishInitPoolData* add_initpoolcount();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FishInitPoolData >&
      initpoolcount() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FishInitPoolData >*
      mutable_initpoolcount();

  // @@protoc_insertion_point(class_scope:proto_ff.FishInitPool)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FishInitPoolData > initpoolcount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static FishInitPool* default_instance_;
};
// -------------------------------------------------------------------

class SeatDangRange_B : public ::google::protobuf::Message {
 public:
  SeatDangRange_B();
  virtual ~SeatDangRange_B();

  SeatDangRange_B(const SeatDangRange_B& from);

  inline SeatDangRange_B& operator=(const SeatDangRange_B& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SeatDangRange_B& default_instance();

  void Swap(SeatDangRange_B* other);

  // implements Message ----------------------------------------------

  SeatDangRange_B* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SeatDangRange_B& from);
  void MergeFrom(const SeatDangRange_B& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 value = 1;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int64 value(int index) const;
  inline void set_value(int index, ::google::protobuf::int64 value);
  inline void add_value(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:proto_ff.SeatDangRange_B)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static SeatDangRange_B* default_instance_;
};
// -------------------------------------------------------------------

class SeatAlgoSetup : public ::google::protobuf::Message {
 public:
  SeatAlgoSetup();
  virtual ~SeatAlgoSetup();

  SeatAlgoSetup(const SeatAlgoSetup& from);

  inline SeatAlgoSetup& operator=(const SeatAlgoSetup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SeatAlgoSetup& default_instance();

  void Swap(SeatAlgoSetup* other);

  // implements Message ----------------------------------------------

  SeatAlgoSetup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SeatAlgoSetup& from);
  void MergeFrom(const SeatAlgoSetup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 SeatCtrlIsOpen = 1;
  inline bool has_seatctrlisopen() const;
  inline void clear_seatctrlisopen();
  static const int kSeatCtrlIsOpenFieldNumber = 1;
  inline ::google::protobuf::int32 seatctrlisopen() const;
  inline void set_seatctrlisopen(::google::protobuf::int32 value);

  // repeated int64 SeatDangRange_Def_A = 2;
  inline int seatdangrange_def_a_size() const;
  inline void clear_seatdangrange_def_a();
  static const int kSeatDangRangeDefAFieldNumber = 2;
  inline ::google::protobuf::int64 seatdangrange_def_a(int index) const;
  inline void set_seatdangrange_def_a(int index, ::google::protobuf::int64 value);
  inline void add_seatdangrange_def_a(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      seatdangrange_def_a() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_seatdangrange_def_a();

  // repeated int64 SeatDangRange_Def_B = 3;
  inline int seatdangrange_def_b_size() const;
  inline void clear_seatdangrange_def_b();
  static const int kSeatDangRangeDefBFieldNumber = 3;
  inline ::google::protobuf::int64 seatdangrange_def_b(int index) const;
  inline void set_seatdangrange_def_b(int index, ::google::protobuf::int64 value);
  inline void add_seatdangrange_def_b(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      seatdangrange_def_b() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_seatdangrange_def_b();

  // repeated int64 SeatDangRange_Def_Robot = 4;
  inline int seatdangrange_def_robot_size() const;
  inline void clear_seatdangrange_def_robot();
  static const int kSeatDangRangeDefRobotFieldNumber = 4;
  inline ::google::protobuf::int64 seatdangrange_def_robot(int index) const;
  inline void set_seatdangrange_def_robot(int index, ::google::protobuf::int64 value);
  inline void add_seatdangrange_def_robot(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      seatdangrange_def_robot() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_seatdangrange_def_robot();

  // repeated .proto_ff.SeatDangRange_B SeatDangRange_B = 5;
  inline int seatdangrange_b_size() const;
  inline void clear_seatdangrange_b();
  static const int kSeatDangRangeBFieldNumber = 5;
  inline const ::proto_ff::SeatDangRange_B& seatdangrange_b(int index) const;
  inline ::proto_ff::SeatDangRange_B* mutable_seatdangrange_b(int index);
  inline ::proto_ff::SeatDangRange_B* add_seatdangrange_b();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::SeatDangRange_B >&
      seatdangrange_b() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::SeatDangRange_B >*
      mutable_seatdangrange_b();

  // optional int64 ClearDataMaxVal = 6;
  inline bool has_cleardatamaxval() const;
  inline void clear_cleardatamaxval();
  static const int kClearDataMaxValFieldNumber = 6;
  inline ::google::protobuf::int64 cleardatamaxval() const;
  inline void set_cleardatamaxval(::google::protobuf::int64 value);

  // optional double ClearDataFangCondation = 7;
  inline bool has_cleardatafangcondation() const;
  inline void clear_cleardatafangcondation();
  static const int kClearDataFangCondationFieldNumber = 7;
  inline double cleardatafangcondation() const;
  inline void set_cleardatafangcondation(double value);

  // optional double ClearDataChiCondation = 8;
  inline bool has_cleardatachicondation() const;
  inline void clear_cleardatachicondation();
  static const int kClearDataChiCondationFieldNumber = 8;
  inline double cleardatachicondation() const;
  inline void set_cleardatachicondation(double value);

  // @@protoc_insertion_point(class_scope:proto_ff.SeatAlgoSetup)
 private:
  inline void set_has_seatctrlisopen();
  inline void clear_has_seatctrlisopen();
  inline void set_has_cleardatamaxval();
  inline void clear_has_cleardatamaxval();
  inline void set_has_cleardatafangcondation();
  inline void clear_has_cleardatafangcondation();
  inline void set_has_cleardatachicondation();
  inline void clear_has_cleardatachicondation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > seatdangrange_def_a_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > seatdangrange_def_b_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > seatdangrange_def_robot_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::SeatDangRange_B > seatdangrange_b_;
  ::google::protobuf::int64 cleardatamaxval_;
  double cleardatafangcondation_;
  double cleardatachicondation_;
  ::google::protobuf::int32 seatctrlisopen_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static SeatAlgoSetup* default_instance_;
};
// -------------------------------------------------------------------

class HuanDangRange : public ::google::protobuf::Message {
 public:
  HuanDangRange();
  virtual ~HuanDangRange();

  HuanDangRange(const HuanDangRange& from);

  inline HuanDangRange& operator=(const HuanDangRange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HuanDangRange& default_instance();

  void Swap(HuanDangRange* other);

  // implements Message ----------------------------------------------

  HuanDangRange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HuanDangRange& from);
  void MergeFrom(const HuanDangRange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 value = 1;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int64 value(int index) const;
  inline void set_value(int index, ::google::protobuf::int64 value);
  inline void add_value(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:proto_ff.HuanDangRange)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static HuanDangRange* default_instance_;
};
// -------------------------------------------------------------------

class DangChiRange : public ::google::protobuf::Message {
 public:
  DangChiRange();
  virtual ~DangChiRange();

  DangChiRange(const DangChiRange& from);

  inline DangChiRange& operator=(const DangChiRange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DangChiRange& default_instance();

  void Swap(DangChiRange* other);

  // implements Message ----------------------------------------------

  DangChiRange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DangChiRange& from);
  void MergeFrom(const DangChiRange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 value = 1;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int64 value(int index) const;
  inline void set_value(int index, ::google::protobuf::int64 value);
  inline void add_value(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:proto_ff.DangChiRange)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static DangChiRange* default_instance_;
};
// -------------------------------------------------------------------

class FishAlgorithmSetup : public ::google::protobuf::Message {
 public:
  FishAlgorithmSetup();
  virtual ~FishAlgorithmSetup();

  FishAlgorithmSetup(const FishAlgorithmSetup& from);

  inline FishAlgorithmSetup& operator=(const FishAlgorithmSetup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FishAlgorithmSetup& default_instance();

  void Swap(FishAlgorithmSetup* other);

  // implements Message ----------------------------------------------

  FishAlgorithmSetup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FishAlgorithmSetup& from);
  void MergeFrom(const FishAlgorithmSetup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 HuanChangTimes = 1;
  inline bool has_huanchangtimes() const;
  inline void clear_huanchangtimes();
  static const int kHuanChangTimesFieldNumber = 1;
  inline ::google::protobuf::int64 huanchangtimes() const;
  inline void set_huanchangtimes(::google::protobuf::int64 value);

  // repeated .proto_ff.HuanDangRange HuanDangRange = 2;
  inline int huandangrange_size() const;
  inline void clear_huandangrange();
  static const int kHuanDangRangeFieldNumber = 2;
  inline const ::proto_ff::HuanDangRange& huandangrange(int index) const;
  inline ::proto_ff::HuanDangRange* mutable_huandangrange(int index);
  inline ::proto_ff::HuanDangRange* add_huandangrange();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::HuanDangRange >&
      huandangrange() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::HuanDangRange >*
      mutable_huandangrange();

  // repeated .proto_ff.DangChiRange DangChiRange = 3;
  inline int dangchirange_size() const;
  inline void clear_dangchirange();
  static const int kDangChiRangeFieldNumber = 3;
  inline const ::proto_ff::DangChiRange& dangchirange(int index) const;
  inline ::proto_ff::DangChiRange* mutable_dangchirange(int index);
  inline ::proto_ff::DangChiRange* add_dangchirange();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::DangChiRange >&
      dangchirange() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::DangChiRange >*
      mutable_dangchirange();

  // optional int64 HuanBiaoLiuShuiVal = 4;
  inline bool has_huanbiaoliushuival() const;
  inline void clear_huanbiaoliushuival();
  static const int kHuanBiaoLiuShuiValFieldNumber = 4;
  inline ::google::protobuf::int64 huanbiaoliushuival() const;
  inline void set_huanbiaoliushuival(::google::protobuf::int64 value);

  // optional int64 PoolInitBFB = 5;
  inline bool has_poolinitbfb() const;
  inline void clear_poolinitbfb();
  static const int kPoolInitBFBFieldNumber = 5;
  inline ::google::protobuf::int64 poolinitbfb() const;
  inline void set_poolinitbfb(::google::protobuf::int64 value);

  // optional int64 ClearDataMaxVal = 6;
  inline bool has_cleardatamaxval() const;
  inline void clear_cleardatamaxval();
  static const int kClearDataMaxValFieldNumber = 6;
  inline ::google::protobuf::int64 cleardatamaxval() const;
  inline void set_cleardatamaxval(::google::protobuf::int64 value);

  // optional double ClearDataFangCondation = 7;
  inline bool has_cleardatafangcondation() const;
  inline void clear_cleardatafangcondation();
  static const int kClearDataFangCondationFieldNumber = 7;
  inline double cleardatafangcondation() const;
  inline void set_cleardatafangcondation(double value);

  // optional double ClearDataChiCondation = 8;
  inline bool has_cleardatachicondation() const;
  inline void clear_cleardatachicondation();
  static const int kClearDataChiCondationFieldNumber = 8;
  inline double cleardatachicondation() const;
  inline void set_cleardatachicondation(double value);

  // optional int64 ClearDataInitShoot = 9;
  inline bool has_cleardatainitshoot() const;
  inline void clear_cleardatainitshoot();
  static const int kClearDataInitShootFieldNumber = 9;
  inline ::google::protobuf::int64 cleardatainitshoot() const;
  inline void set_cleardatainitshoot(::google::protobuf::int64 value);

  // optional int64 ClearDataInitCapture = 10;
  inline bool has_cleardatainitcapture() const;
  inline void clear_cleardatainitcapture();
  static const int kClearDataInitCaptureFieldNumber = 10;
  inline ::google::protobuf::int64 cleardatainitcapture() const;
  inline void set_cleardatainitcapture(::google::protobuf::int64 value);

  // optional double ClearDataInitDrawRate = 11;
  inline bool has_cleardatainitdrawrate() const;
  inline void clear_cleardatainitdrawrate();
  static const int kClearDataInitDrawRateFieldNumber = 11;
  inline double cleardatainitdrawrate() const;
  inline void set_cleardatainitdrawrate(double value);

  // @@protoc_insertion_point(class_scope:proto_ff.FishAlgorithmSetup)
 private:
  inline void set_has_huanchangtimes();
  inline void clear_has_huanchangtimes();
  inline void set_has_huanbiaoliushuival();
  inline void clear_has_huanbiaoliushuival();
  inline void set_has_poolinitbfb();
  inline void clear_has_poolinitbfb();
  inline void set_has_cleardatamaxval();
  inline void clear_has_cleardatamaxval();
  inline void set_has_cleardatafangcondation();
  inline void clear_has_cleardatafangcondation();
  inline void set_has_cleardatachicondation();
  inline void clear_has_cleardatachicondation();
  inline void set_has_cleardatainitshoot();
  inline void clear_has_cleardatainitshoot();
  inline void set_has_cleardatainitcapture();
  inline void clear_has_cleardatainitcapture();
  inline void set_has_cleardatainitdrawrate();
  inline void clear_has_cleardatainitdrawrate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 huanchangtimes_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::HuanDangRange > huandangrange_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::DangChiRange > dangchirange_;
  ::google::protobuf::int64 huanbiaoliushuival_;
  ::google::protobuf::int64 poolinitbfb_;
  ::google::protobuf::int64 cleardatamaxval_;
  double cleardatafangcondation_;
  double cleardatachicondation_;
  ::google::protobuf::int64 cleardatainitshoot_;
  ::google::protobuf::int64 cleardatainitcapture_;
  double cleardatainitdrawrate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static FishAlgorithmSetup* default_instance_;
};
// -------------------------------------------------------------------

class FishAlgorithmFileName : public ::google::protobuf::Message {
 public:
  FishAlgorithmFileName();
  virtual ~FishAlgorithmFileName();

  FishAlgorithmFileName(const FishAlgorithmFileName& from);

  inline FishAlgorithmFileName& operator=(const FishAlgorithmFileName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FishAlgorithmFileName& default_instance();

  void Swap(FishAlgorithmFileName* other);

  // implements Message ----------------------------------------------

  FishAlgorithmFileName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FishAlgorithmFileName& from);
  void MergeFrom(const FishAlgorithmFileName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string FileNameChi1 = 1;
  inline bool has_filenamechi1() const;
  inline void clear_filenamechi1();
  static const int kFileNameChi1FieldNumber = 1;
  inline const ::std::string& filenamechi1() const;
  inline void set_filenamechi1(const ::std::string& value);
  inline void set_filenamechi1(const char* value);
  inline void set_filenamechi1(const char* value, size_t size);
  inline ::std::string* mutable_filenamechi1();
  inline ::std::string* release_filenamechi1();
  inline void set_allocated_filenamechi1(::std::string* filenamechi1);

  // optional string FileNameChi2 = 2;
  inline bool has_filenamechi2() const;
  inline void clear_filenamechi2();
  static const int kFileNameChi2FieldNumber = 2;
  inline const ::std::string& filenamechi2() const;
  inline void set_filenamechi2(const ::std::string& value);
  inline void set_filenamechi2(const char* value);
  inline void set_filenamechi2(const char* value, size_t size);
  inline ::std::string* mutable_filenamechi2();
  inline ::std::string* release_filenamechi2();
  inline void set_allocated_filenamechi2(::std::string* filenamechi2);

  // optional string FileNameChi5 = 3;
  inline bool has_filenamechi5() const;
  inline void clear_filenamechi5();
  static const int kFileNameChi5FieldNumber = 3;
  inline const ::std::string& filenamechi5() const;
  inline void set_filenamechi5(const ::std::string& value);
  inline void set_filenamechi5(const char* value);
  inline void set_filenamechi5(const char* value, size_t size);
  inline ::std::string* mutable_filenamechi5();
  inline ::std::string* release_filenamechi5();
  inline void set_allocated_filenamechi5(::std::string* filenamechi5);

  // optional string FileNameChi10 = 4;
  inline bool has_filenamechi10() const;
  inline void clear_filenamechi10();
  static const int kFileNameChi10FieldNumber = 4;
  inline const ::std::string& filenamechi10() const;
  inline void set_filenamechi10(const ::std::string& value);
  inline void set_filenamechi10(const char* value);
  inline void set_filenamechi10(const char* value, size_t size);
  inline ::std::string* mutable_filenamechi10();
  inline ::std::string* release_filenamechi10();
  inline void set_allocated_filenamechi10(::std::string* filenamechi10);

  // optional string FileNameChi20 = 5;
  inline bool has_filenamechi20() const;
  inline void clear_filenamechi20();
  static const int kFileNameChi20FieldNumber = 5;
  inline const ::std::string& filenamechi20() const;
  inline void set_filenamechi20(const ::std::string& value);
  inline void set_filenamechi20(const char* value);
  inline void set_filenamechi20(const char* value, size_t size);
  inline ::std::string* mutable_filenamechi20();
  inline ::std::string* release_filenamechi20();
  inline void set_allocated_filenamechi20(::std::string* filenamechi20);

  // optional string FileNameChi50 = 6;
  inline bool has_filenamechi50() const;
  inline void clear_filenamechi50();
  static const int kFileNameChi50FieldNumber = 6;
  inline const ::std::string& filenamechi50() const;
  inline void set_filenamechi50(const ::std::string& value);
  inline void set_filenamechi50(const char* value);
  inline void set_filenamechi50(const char* value, size_t size);
  inline ::std::string* mutable_filenamechi50();
  inline ::std::string* release_filenamechi50();
  inline void set_allocated_filenamechi50(::std::string* filenamechi50);

  // optional string FileNameChi100 = 7;
  inline bool has_filenamechi100() const;
  inline void clear_filenamechi100();
  static const int kFileNameChi100FieldNumber = 7;
  inline const ::std::string& filenamechi100() const;
  inline void set_filenamechi100(const ::std::string& value);
  inline void set_filenamechi100(const char* value);
  inline void set_filenamechi100(const char* value, size_t size);
  inline ::std::string* mutable_filenamechi100();
  inline ::std::string* release_filenamechi100();
  inline void set_allocated_filenamechi100(::std::string* filenamechi100);

  // optional string FileNameChi200 = 8;
  inline bool has_filenamechi200() const;
  inline void clear_filenamechi200();
  static const int kFileNameChi200FieldNumber = 8;
  inline const ::std::string& filenamechi200() const;
  inline void set_filenamechi200(const ::std::string& value);
  inline void set_filenamechi200(const char* value);
  inline void set_filenamechi200(const char* value, size_t size);
  inline ::std::string* mutable_filenamechi200();
  inline ::std::string* release_filenamechi200();
  inline void set_allocated_filenamechi200(::std::string* filenamechi200);

  // optional string FileNameFang1 = 11;
  inline bool has_filenamefang1() const;
  inline void clear_filenamefang1();
  static const int kFileNameFang1FieldNumber = 11;
  inline const ::std::string& filenamefang1() const;
  inline void set_filenamefang1(const ::std::string& value);
  inline void set_filenamefang1(const char* value);
  inline void set_filenamefang1(const char* value, size_t size);
  inline ::std::string* mutable_filenamefang1();
  inline ::std::string* release_filenamefang1();
  inline void set_allocated_filenamefang1(::std::string* filenamefang1);

  // optional string FileNameFang2 = 12;
  inline bool has_filenamefang2() const;
  inline void clear_filenamefang2();
  static const int kFileNameFang2FieldNumber = 12;
  inline const ::std::string& filenamefang2() const;
  inline void set_filenamefang2(const ::std::string& value);
  inline void set_filenamefang2(const char* value);
  inline void set_filenamefang2(const char* value, size_t size);
  inline ::std::string* mutable_filenamefang2();
  inline ::std::string* release_filenamefang2();
  inline void set_allocated_filenamefang2(::std::string* filenamefang2);

  // optional string FileNameFang5 = 13;
  inline bool has_filenamefang5() const;
  inline void clear_filenamefang5();
  static const int kFileNameFang5FieldNumber = 13;
  inline const ::std::string& filenamefang5() const;
  inline void set_filenamefang5(const ::std::string& value);
  inline void set_filenamefang5(const char* value);
  inline void set_filenamefang5(const char* value, size_t size);
  inline ::std::string* mutable_filenamefang5();
  inline ::std::string* release_filenamefang5();
  inline void set_allocated_filenamefang5(::std::string* filenamefang5);

  // optional string FileNameFang10 = 14;
  inline bool has_filenamefang10() const;
  inline void clear_filenamefang10();
  static const int kFileNameFang10FieldNumber = 14;
  inline const ::std::string& filenamefang10() const;
  inline void set_filenamefang10(const ::std::string& value);
  inline void set_filenamefang10(const char* value);
  inline void set_filenamefang10(const char* value, size_t size);
  inline ::std::string* mutable_filenamefang10();
  inline ::std::string* release_filenamefang10();
  inline void set_allocated_filenamefang10(::std::string* filenamefang10);

  // optional string FileNameFang20 = 15;
  inline bool has_filenamefang20() const;
  inline void clear_filenamefang20();
  static const int kFileNameFang20FieldNumber = 15;
  inline const ::std::string& filenamefang20() const;
  inline void set_filenamefang20(const ::std::string& value);
  inline void set_filenamefang20(const char* value);
  inline void set_filenamefang20(const char* value, size_t size);
  inline ::std::string* mutable_filenamefang20();
  inline ::std::string* release_filenamefang20();
  inline void set_allocated_filenamefang20(::std::string* filenamefang20);

  // optional string FileNameFang50 = 16;
  inline bool has_filenamefang50() const;
  inline void clear_filenamefang50();
  static const int kFileNameFang50FieldNumber = 16;
  inline const ::std::string& filenamefang50() const;
  inline void set_filenamefang50(const ::std::string& value);
  inline void set_filenamefang50(const char* value);
  inline void set_filenamefang50(const char* value, size_t size);
  inline ::std::string* mutable_filenamefang50();
  inline ::std::string* release_filenamefang50();
  inline void set_allocated_filenamefang50(::std::string* filenamefang50);

  // optional string FileNameFang100 = 17;
  inline bool has_filenamefang100() const;
  inline void clear_filenamefang100();
  static const int kFileNameFang100FieldNumber = 17;
  inline const ::std::string& filenamefang100() const;
  inline void set_filenamefang100(const ::std::string& value);
  inline void set_filenamefang100(const char* value);
  inline void set_filenamefang100(const char* value, size_t size);
  inline ::std::string* mutable_filenamefang100();
  inline ::std::string* release_filenamefang100();
  inline void set_allocated_filenamefang100(::std::string* filenamefang100);

  // optional string FileNameFang200 = 18;
  inline bool has_filenamefang200() const;
  inline void clear_filenamefang200();
  static const int kFileNameFang200FieldNumber = 18;
  inline const ::std::string& filenamefang200() const;
  inline void set_filenamefang200(const ::std::string& value);
  inline void set_filenamefang200(const char* value);
  inline void set_filenamefang200(const char* value, size_t size);
  inline ::std::string* mutable_filenamefang200();
  inline ::std::string* release_filenamefang200();
  inline void set_allocated_filenamefang200(::std::string* filenamefang200);

  // @@protoc_insertion_point(class_scope:proto_ff.FishAlgorithmFileName)
 private:
  inline void set_has_filenamechi1();
  inline void clear_has_filenamechi1();
  inline void set_has_filenamechi2();
  inline void clear_has_filenamechi2();
  inline void set_has_filenamechi5();
  inline void clear_has_filenamechi5();
  inline void set_has_filenamechi10();
  inline void clear_has_filenamechi10();
  inline void set_has_filenamechi20();
  inline void clear_has_filenamechi20();
  inline void set_has_filenamechi50();
  inline void clear_has_filenamechi50();
  inline void set_has_filenamechi100();
  inline void clear_has_filenamechi100();
  inline void set_has_filenamechi200();
  inline void clear_has_filenamechi200();
  inline void set_has_filenamefang1();
  inline void clear_has_filenamefang1();
  inline void set_has_filenamefang2();
  inline void clear_has_filenamefang2();
  inline void set_has_filenamefang5();
  inline void clear_has_filenamefang5();
  inline void set_has_filenamefang10();
  inline void clear_has_filenamefang10();
  inline void set_has_filenamefang20();
  inline void clear_has_filenamefang20();
  inline void set_has_filenamefang50();
  inline void clear_has_filenamefang50();
  inline void set_has_filenamefang100();
  inline void clear_has_filenamefang100();
  inline void set_has_filenamefang200();
  inline void clear_has_filenamefang200();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* filenamechi1_;
  ::std::string* filenamechi2_;
  ::std::string* filenamechi5_;
  ::std::string* filenamechi10_;
  ::std::string* filenamechi20_;
  ::std::string* filenamechi50_;
  ::std::string* filenamechi100_;
  ::std::string* filenamechi200_;
  ::std::string* filenamefang1_;
  ::std::string* filenamefang2_;
  ::std::string* filenamefang5_;
  ::std::string* filenamefang10_;
  ::std::string* filenamefang20_;
  ::std::string* filenamefang50_;
  ::std::string* filenamefang100_;
  ::std::string* filenamefang200_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static FishAlgorithmFileName* default_instance_;
};
// -------------------------------------------------------------------

class FishAlgorithmCsvItem : public ::google::protobuf::Message {
 public:
  FishAlgorithmCsvItem();
  virtual ~FishAlgorithmCsvItem();

  FishAlgorithmCsvItem(const FishAlgorithmCsvItem& from);

  inline FishAlgorithmCsvItem& operator=(const FishAlgorithmCsvItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FishAlgorithmCsvItem& default_instance();

  void Swap(FishAlgorithmCsvItem* other);

  // implements Message ----------------------------------------------

  FishAlgorithmCsvItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FishAlgorithmCsvItem& from);
  void MergeFrom(const FishAlgorithmCsvItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 value = 1;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int32 value(int index) const;
  inline void set_value(int index, ::google::protobuf::int32 value);
  inline void add_value(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:proto_ff.FishAlgorithmCsvItem)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static FishAlgorithmCsvItem* default_instance_;
};
// -------------------------------------------------------------------

class FishAlgorithmCsv : public ::google::protobuf::Message {
 public:
  FishAlgorithmCsv();
  virtual ~FishAlgorithmCsv();

  FishAlgorithmCsv(const FishAlgorithmCsv& from);

  inline FishAlgorithmCsv& operator=(const FishAlgorithmCsv& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FishAlgorithmCsv& default_instance();

  void Swap(FishAlgorithmCsv* other);

  // implements Message ----------------------------------------------

  FishAlgorithmCsv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FishAlgorithmCsv& from);
  void MergeFrom(const FishAlgorithmCsv& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FishAlgorithmCsvItem item = 1;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 1;
  inline const ::proto_ff::FishAlgorithmCsvItem& item(int index) const;
  inline ::proto_ff::FishAlgorithmCsvItem* mutable_item(int index);
  inline ::proto_ff::FishAlgorithmCsvItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FishAlgorithmCsvItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FishAlgorithmCsvItem >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:proto_ff.FishAlgorithmCsv)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FishAlgorithmCsvItem > item_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static FishAlgorithmCsv* default_instance_;
};
// -------------------------------------------------------------------

class FishNormalSetup : public ::google::protobuf::Message {
 public:
  FishNormalSetup();
  virtual ~FishNormalSetup();

  FishNormalSetup(const FishNormalSetup& from);

  inline FishNormalSetup& operator=(const FishNormalSetup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FishNormalSetup& default_instance();

  void Swap(FishNormalSetup* other);

  // implements Message ----------------------------------------------

  FishNormalSetup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FishNormalSetup& from);
  void MergeFrom(const FishNormalSetup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 SwitchBossTime = 1;
  inline bool has_switchbosstime() const;
  inline void clear_switchbosstime();
  static const int kSwitchBossTimeFieldNumber = 1;
  inline ::google::protobuf::int32 switchbosstime() const;
  inline void set_switchbosstime(::google::protobuf::int32 value);

  // optional int32 SwitchSceneTime = 2;
  inline bool has_switchscenetime() const;
  inline void clear_switchscenetime();
  static const int kSwitchSceneTimeFieldNumber = 2;
  inline ::google::protobuf::int32 switchscenetime() const;
  inline void set_switchscenetime(::google::protobuf::int32 value);

  // optional int32 InitSceneIndex = 3;
  inline bool has_initsceneindex() const;
  inline void clear_initsceneindex();
  static const int kInitSceneIndexFieldNumber = 3;
  inline ::google::protobuf::int32 initsceneindex() const;
  inline void set_initsceneindex(::google::protobuf::int32 value);

  // optional int32 AwardPoolSaveToDBTime = 4;
  inline bool has_awardpoolsavetodbtime() const;
  inline void clear_awardpoolsavetodbtime();
  static const int kAwardPoolSaveToDBTimeFieldNumber = 4;
  inline ::google::protobuf::int32 awardpoolsavetodbtime() const;
  inline void set_awardpoolsavetodbtime(::google::protobuf::int32 value);

  // optional int32 ClearTraceTime = 5;
  inline bool has_cleartracetime() const;
  inline void clear_cleartracetime();
  static const int kClearTraceTimeFieldNumber = 5;
  inline ::google::protobuf::int32 cleartracetime() const;
  inline void set_cleartracetime(::google::protobuf::int32 value);

  // repeated int32 CannonLevelVal = 6;
  inline int cannonlevelval_size() const;
  inline void clear_cannonlevelval();
  static const int kCannonLevelValFieldNumber = 6;
  inline ::google::protobuf::int32 cannonlevelval(int index) const;
  inline void set_cannonlevelval(int index, ::google::protobuf::int32 value);
  inline void add_cannonlevelval(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cannonlevelval() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cannonlevelval();

  // repeated int32 CannonShowNum = 7;
  inline int cannonshownum_size() const;
  inline void clear_cannonshownum();
  static const int kCannonShowNumFieldNumber = 7;
  inline ::google::protobuf::int32 cannonshownum(int index) const;
  inline void set_cannonshownum(int index, ::google::protobuf::int32 value);
  inline void add_cannonshownum(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cannonshownum() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cannonshownum();

  // repeated double BulletHarmAddBFB = 8;
  inline int bulletharmaddbfb_size() const;
  inline void clear_bulletharmaddbfb();
  static const int kBulletHarmAddBFBFieldNumber = 8;
  inline double bulletharmaddbfb(int index) const;
  inline void set_bulletharmaddbfb(int index, double value);
  inline void add_bulletharmaddbfb(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      bulletharmaddbfb() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_bulletharmaddbfb();

  // optional int32 BulletCountInScreen = 9;
  inline bool has_bulletcountinscreen() const;
  inline void clear_bulletcountinscreen();
  static const int kBulletCountInScreenFieldNumber = 9;
  inline ::google::protobuf::int32 bulletcountinscreen() const;
  inline void set_bulletcountinscreen(::google::protobuf::int32 value);

  // optional int32 TotalSceneCount = 10;
  inline bool has_totalscenecount() const;
  inline void clear_totalscenecount();
  static const int kTotalSceneCountFieldNumber = 10;
  inline ::google::protobuf::int32 totalscenecount() const;
  inline void set_totalscenecount(::google::protobuf::int32 value);

  // optional int32 ScreenFishMaxCount = 11;
  inline bool has_screenfishmaxcount() const;
  inline void clear_screenfishmaxcount();
  static const int kScreenFishMaxCountFieldNumber = 11;
  inline ::google::protobuf::int32 screenfishmaxcount() const;
  inline void set_screenfishmaxcount(::google::protobuf::int32 value);

  // optional int32 ClientNotOperateTipTimes = 12;
  inline bool has_clientnotoperatetiptimes() const;
  inline void clear_clientnotoperatetiptimes();
  static const int kClientNotOperateTipTimesFieldNumber = 12;
  inline ::google::protobuf::int32 clientnotoperatetiptimes() const;
  inline void set_clientnotoperatetiptimes(::google::protobuf::int32 value);

  // optional int32 ClientExitTimes = 13;
  inline bool has_clientexittimes() const;
  inline void clear_clientexittimes();
  static const int kClientExitTimesFieldNumber = 13;
  inline ::google::protobuf::int32 clientexittimes() const;
  inline void set_clientexittimes(::google::protobuf::int32 value);

  // optional int32 TestFishMustKilled = 14;
  inline bool has_testfishmustkilled() const;
  inline void clear_testfishmustkilled();
  static const int kTestFishMustKilledFieldNumber = 14;
  inline ::google::protobuf::int32 testfishmustkilled() const;
  inline void set_testfishmustkilled(::google::protobuf::int32 value);

  // optional int32 ClientLessMoneyTip = 15;
  inline bool has_clientlessmoneytip() const;
  inline void clear_clientlessmoneytip();
  static const int kClientLessMoneyTipFieldNumber = 15;
  inline ::google::protobuf::int32 clientlessmoneytip() const;
  inline void set_clientlessmoneytip(::google::protobuf::int32 value);

  // optional int32 TurnTableCalcMinByOneJu = 16;
  inline bool has_turntablecalcminbyoneju() const;
  inline void clear_turntablecalcminbyoneju();
  static const int kTurnTableCalcMinByOneJuFieldNumber = 16;
  inline ::google::protobuf::int32 turntablecalcminbyoneju() const;
  inline void set_turntablecalcminbyoneju(::google::protobuf::int32 value);

  // optional int32 UserSettlementTimes = 17;
  inline bool has_usersettlementtimes() const;
  inline void clear_usersettlementtimes();
  static const int kUserSettlementTimesFieldNumber = 17;
  inline ::google::protobuf::int32 usersettlementtimes() const;
  inline void set_usersettlementtimes(::google::protobuf::int32 value);

  // optional int32 TipBaoJiMoney = 18;
  inline bool has_tipbaojimoney() const;
  inline void clear_tipbaojimoney();
  static const int kTipBaoJiMoneyFieldNumber = 18;
  inline ::google::protobuf::int32 tipbaojimoney() const;
  inline void set_tipbaojimoney(::google::protobuf::int32 value);

  // optional int32 BatchSendFishesInterval = 19;
  inline bool has_batchsendfishesinterval() const;
  inline void clear_batchsendfishesinterval();
  static const int kBatchSendFishesIntervalFieldNumber = 19;
  inline ::google::protobuf::int32 batchsendfishesinterval() const;
  inline void set_batchsendfishesinterval(::google::protobuf::int32 value);

  // optional int32 BatchSendFishesCount = 20;
  inline bool has_batchsendfishescount() const;
  inline void clear_batchsendfishescount();
  static const int kBatchSendFishesCountFieldNumber = 20;
  inline ::google::protobuf::int32 batchsendfishescount() const;
  inline void set_batchsendfishescount(::google::protobuf::int32 value);

  // optional int32 SwitchScenePrepareTime = 21;
  inline bool has_switchscenepreparetime() const;
  inline void clear_switchscenepreparetime();
  static const int kSwitchScenePrepareTimeFieldNumber = 21;
  inline ::google::protobuf::int32 switchscenepreparetime() const;
  inline void set_switchscenepreparetime(::google::protobuf::int32 value);

  // optional int32 SwitchSceneFishGoAwayTime = 22;
  inline bool has_switchscenefishgoawaytime() const;
  inline void clear_switchscenefishgoawaytime();
  static const int kSwitchSceneFishGoAwayTimeFieldNumber = 22;
  inline ::google::protobuf::int32 switchscenefishgoawaytime() const;
  inline void set_switchscenefishgoawaytime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FishNormalSetup)
 private:
  inline void set_has_switchbosstime();
  inline void clear_has_switchbosstime();
  inline void set_has_switchscenetime();
  inline void clear_has_switchscenetime();
  inline void set_has_initsceneindex();
  inline void clear_has_initsceneindex();
  inline void set_has_awardpoolsavetodbtime();
  inline void clear_has_awardpoolsavetodbtime();
  inline void set_has_cleartracetime();
  inline void clear_has_cleartracetime();
  inline void set_has_bulletcountinscreen();
  inline void clear_has_bulletcountinscreen();
  inline void set_has_totalscenecount();
  inline void clear_has_totalscenecount();
  inline void set_has_screenfishmaxcount();
  inline void clear_has_screenfishmaxcount();
  inline void set_has_clientnotoperatetiptimes();
  inline void clear_has_clientnotoperatetiptimes();
  inline void set_has_clientexittimes();
  inline void clear_has_clientexittimes();
  inline void set_has_testfishmustkilled();
  inline void clear_has_testfishmustkilled();
  inline void set_has_clientlessmoneytip();
  inline void clear_has_clientlessmoneytip();
  inline void set_has_turntablecalcminbyoneju();
  inline void clear_has_turntablecalcminbyoneju();
  inline void set_has_usersettlementtimes();
  inline void clear_has_usersettlementtimes();
  inline void set_has_tipbaojimoney();
  inline void clear_has_tipbaojimoney();
  inline void set_has_batchsendfishesinterval();
  inline void clear_has_batchsendfishesinterval();
  inline void set_has_batchsendfishescount();
  inline void clear_has_batchsendfishescount();
  inline void set_has_switchscenepreparetime();
  inline void clear_has_switchscenepreparetime();
  inline void set_has_switchscenefishgoawaytime();
  inline void clear_has_switchscenefishgoawaytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 switchbosstime_;
  ::google::protobuf::int32 switchscenetime_;
  ::google::protobuf::int32 initsceneindex_;
  ::google::protobuf::int32 awardpoolsavetodbtime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cannonlevelval_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cannonshownum_;
  ::google::protobuf::int32 cleartracetime_;
  ::google::protobuf::int32 bulletcountinscreen_;
  ::google::protobuf::RepeatedField< double > bulletharmaddbfb_;
  ::google::protobuf::int32 totalscenecount_;
  ::google::protobuf::int32 screenfishmaxcount_;
  ::google::protobuf::int32 clientnotoperatetiptimes_;
  ::google::protobuf::int32 clientexittimes_;
  ::google::protobuf::int32 testfishmustkilled_;
  ::google::protobuf::int32 clientlessmoneytip_;
  ::google::protobuf::int32 turntablecalcminbyoneju_;
  ::google::protobuf::int32 usersettlementtimes_;
  ::google::protobuf::int32 tipbaojimoney_;
  ::google::protobuf::int32 batchsendfishesinterval_;
  ::google::protobuf::int32 batchsendfishescount_;
  ::google::protobuf::int32 switchscenepreparetime_;
  ::google::protobuf::int32 switchscenefishgoawaytime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static FishNormalSetup* default_instance_;
};
// -------------------------------------------------------------------

class FishPoolSaveBaseMul : public ::google::protobuf::Message {
 public:
  FishPoolSaveBaseMul();
  virtual ~FishPoolSaveBaseMul();

  FishPoolSaveBaseMul(const FishPoolSaveBaseMul& from);

  inline FishPoolSaveBaseMul& operator=(const FishPoolSaveBaseMul& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FishPoolSaveBaseMul& default_instance();

  void Swap(FishPoolSaveBaseMul* other);

  // implements Message ----------------------------------------------

  FishPoolSaveBaseMul* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FishPoolSaveBaseMul& from);
  void MergeFrom(const FishPoolSaveBaseMul& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 value = 1;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int32 value(int index) const;
  inline void set_value(int index, ::google::protobuf::int32 value);
  inline void add_value(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:proto_ff.FishPoolSaveBaseMul)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static FishPoolSaveBaseMul* default_instance_;
};
// -------------------------------------------------------------------

class FishPoolSaveRelaCount : public ::google::protobuf::Message {
 public:
  FishPoolSaveRelaCount();
  virtual ~FishPoolSaveRelaCount();

  FishPoolSaveRelaCount(const FishPoolSaveRelaCount& from);

  inline FishPoolSaveRelaCount& operator=(const FishPoolSaveRelaCount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FishPoolSaveRelaCount& default_instance();

  void Swap(FishPoolSaveRelaCount* other);

  // implements Message ----------------------------------------------

  FishPoolSaveRelaCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FishPoolSaveRelaCount& from);
  void MergeFrom(const FishPoolSaveRelaCount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 value = 1;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int32 value(int index) const;
  inline void set_value(int index, ::google::protobuf::int32 value);
  inline void add_value(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:proto_ff.FishPoolSaveRelaCount)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static FishPoolSaveRelaCount* default_instance_;
};
// -------------------------------------------------------------------

class FishPoolSaveHitCountCfg : public ::google::protobuf::Message {
 public:
  FishPoolSaveHitCountCfg();
  virtual ~FishPoolSaveHitCountCfg();

  FishPoolSaveHitCountCfg(const FishPoolSaveHitCountCfg& from);

  inline FishPoolSaveHitCountCfg& operator=(const FishPoolSaveHitCountCfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FishPoolSaveHitCountCfg& default_instance();

  void Swap(FishPoolSaveHitCountCfg* other);

  // implements Message ----------------------------------------------

  FishPoolSaveHitCountCfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FishPoolSaveHitCountCfg& from);
  void MergeFrom(const FishPoolSaveHitCountCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 value = 1;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int32 value(int index) const;
  inline void set_value(int index, ::google::protobuf::int32 value);
  inline void add_value(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:proto_ff.FishPoolSaveHitCountCfg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static FishPoolSaveHitCountCfg* default_instance_;
};
// -------------------------------------------------------------------

class FishPoolSaveConnonHitCount : public ::google::protobuf::Message {
 public:
  FishPoolSaveConnonHitCount();
  virtual ~FishPoolSaveConnonHitCount();

  FishPoolSaveConnonHitCount(const FishPoolSaveConnonHitCount& from);

  inline FishPoolSaveConnonHitCount& operator=(const FishPoolSaveConnonHitCount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FishPoolSaveConnonHitCount& default_instance();

  void Swap(FishPoolSaveConnonHitCount* other);

  // implements Message ----------------------------------------------

  FishPoolSaveConnonHitCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FishPoolSaveConnonHitCount& from);
  void MergeFrom(const FishPoolSaveConnonHitCount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double value = 1;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline double value(int index) const;
  inline void set_value(int index, double value);
  inline void add_value(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      value() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:proto_ff.FishPoolSaveConnonHitCount)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< double > value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static FishPoolSaveConnonHitCount* default_instance_;
};
// -------------------------------------------------------------------

class FishPoolSave : public ::google::protobuf::Message {
 public:
  FishPoolSave();
  virtual ~FishPoolSave();

  FishPoolSave(const FishPoolSave& from);

  inline FishPoolSave& operator=(const FishPoolSave& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FishPoolSave& default_instance();

  void Swap(FishPoolSave* other);

  // implements Message ----------------------------------------------

  FishPoolSave* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FishPoolSave& from);
  void MergeFrom(const FishPoolSave& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 dwFishID = 1;
  inline bool has_dwfishid() const;
  inline void clear_dwfishid();
  static const int kDwFishIDFieldNumber = 1;
  inline ::google::protobuf::int32 dwfishid() const;
  inline void set_dwfishid(::google::protobuf::int32 value);

  // optional int32 btFishKind = 2;
  inline bool has_btfishkind() const;
  inline void clear_btfishkind();
  static const int kBtFishKindFieldNumber = 2;
  inline ::google::protobuf::int32 btfishkind() const;
  inline void set_btfishkind(::google::protobuf::int32 value);

  // optional int32 btFishKindGroup1 = 3;
  inline bool has_btfishkindgroup1() const;
  inline void clear_btfishkindgroup1();
  static const int kBtFishKindGroup1FieldNumber = 3;
  inline ::google::protobuf::int32 btfishkindgroup1() const;
  inline void set_btfishkindgroup1(::google::protobuf::int32 value);

  // optional int32 btFishKindGroup2 = 4;
  inline bool has_btfishkindgroup2() const;
  inline void clear_btfishkindgroup2();
  static const int kBtFishKindGroup2FieldNumber = 4;
  inline ::google::protobuf::int32 btfishkindgroup2() const;
  inline void set_btfishkindgroup2(::google::protobuf::int32 value);

  // optional int32 btFishKindGroup3 = 5;
  inline bool has_btfishkindgroup3() const;
  inline void clear_btfishkindgroup3();
  static const int kBtFishKindGroup3FieldNumber = 5;
  inline ::google::protobuf::int32 btfishkindgroup3() const;
  inline void set_btfishkindgroup3(::google::protobuf::int32 value);

  // optional int32 btFishKindGroup4 = 6;
  inline bool has_btfishkindgroup4() const;
  inline void clear_btfishkindgroup4();
  static const int kBtFishKindGroup4FieldNumber = 6;
  inline ::google::protobuf::int32 btfishkindgroup4() const;
  inline void set_btfishkindgroup4(::google::protobuf::int32 value);

  // optional bool bKilled = 7;
  inline bool has_bkilled() const;
  inline void clear_bkilled();
  static const int kBKilledFieldNumber = 7;
  inline bool bkilled() const;
  inline void set_bkilled(bool value);

  // optional bool bRobotKilled = 8;
  inline bool has_brobotkilled() const;
  inline void clear_brobotkilled();
  static const int kBRobotKilledFieldNumber = 8;
  inline bool brobotkilled() const;
  inline void set_brobotkilled(bool value);

  // optional bool bKilledByOtherRela = 9;
  inline bool has_bkilledbyotherrela() const;
  inline void clear_bkilledbyotherrela();
  static const int kBKilledByOtherRelaFieldNumber = 9;
  inline bool bkilledbyotherrela() const;
  inline void set_bkilledbyotherrela(bool value);

  // optional bool bKilledByAlgoA = 10;
  inline bool has_bkilledbyalgoa() const;
  inline void clear_bkilledbyalgoa();
  static const int kBKilledByAlgoAFieldNumber = 10;
  inline bool bkilledbyalgoa() const;
  inline void set_bkilledbyalgoa(bool value);

  // optional int32 btKilledCannonIndex = 11;
  inline bool has_btkilledcannonindex() const;
  inline void clear_btkilledcannonindex();
  static const int kBtKilledCannonIndexFieldNumber = 11;
  inline ::google::protobuf::int32 btkilledcannonindex() const;
  inline void set_btkilledcannonindex(::google::protobuf::int32 value);

  // optional bool bFloatMul = 12;
  inline bool has_bfloatmul() const;
  inline void clear_bfloatmul();
  static const int kBFloatMulFieldNumber = 12;
  inline bool bfloatmul() const;
  inline void set_bfloatmul(bool value);

  // repeated .proto_ff.FishPoolSaveBaseMul arBaseMul = 13;
  inline int arbasemul_size() const;
  inline void clear_arbasemul();
  static const int kArBaseMulFieldNumber = 13;
  inline const ::proto_ff::FishPoolSaveBaseMul& arbasemul(int index) const;
  inline ::proto_ff::FishPoolSaveBaseMul* mutable_arbasemul(int index);
  inline ::proto_ff::FishPoolSaveBaseMul* add_arbasemul();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FishPoolSaveBaseMul >&
      arbasemul() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FishPoolSaveBaseMul >*
      mutable_arbasemul();

  // repeated .proto_ff.FishPoolSaveRelaCount arRelaCount = 14;
  inline int arrelacount_size() const;
  inline void clear_arrelacount();
  static const int kArRelaCountFieldNumber = 14;
  inline const ::proto_ff::FishPoolSaveRelaCount& arrelacount(int index) const;
  inline ::proto_ff::FishPoolSaveRelaCount* mutable_arrelacount(int index);
  inline ::proto_ff::FishPoolSaveRelaCount* add_arrelacount();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FishPoolSaveRelaCount >&
      arrelacount() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FishPoolSaveRelaCount >*
      mutable_arrelacount();

  // repeated .proto_ff.FishPoolSaveHitCountCfg arHitCountCfg = 15;
  inline int arhitcountcfg_size() const;
  inline void clear_arhitcountcfg();
  static const int kArHitCountCfgFieldNumber = 15;
  inline const ::proto_ff::FishPoolSaveHitCountCfg& arhitcountcfg(int index) const;
  inline ::proto_ff::FishPoolSaveHitCountCfg* mutable_arhitcountcfg(int index);
  inline ::proto_ff::FishPoolSaveHitCountCfg* add_arhitcountcfg();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FishPoolSaveHitCountCfg >&
      arhitcountcfg() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FishPoolSaveHitCountCfg >*
      mutable_arhitcountcfg();

  // repeated .proto_ff.FishPoolSaveConnonHitCount arConnonHitCount = 16;
  inline int arconnonhitcount_size() const;
  inline void clear_arconnonhitcount();
  static const int kArConnonHitCountFieldNumber = 16;
  inline const ::proto_ff::FishPoolSaveConnonHitCount& arconnonhitcount(int index) const;
  inline ::proto_ff::FishPoolSaveConnonHitCount* mutable_arconnonhitcount(int index);
  inline ::proto_ff::FishPoolSaveConnonHitCount* add_arconnonhitcount();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FishPoolSaveConnonHitCount >&
      arconnonhitcount() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FishPoolSaveConnonHitCount >*
      mutable_arconnonhitcount();

  // @@protoc_insertion_point(class_scope:proto_ff.FishPoolSave)
 private:
  inline void set_has_dwfishid();
  inline void clear_has_dwfishid();
  inline void set_has_btfishkind();
  inline void clear_has_btfishkind();
  inline void set_has_btfishkindgroup1();
  inline void clear_has_btfishkindgroup1();
  inline void set_has_btfishkindgroup2();
  inline void clear_has_btfishkindgroup2();
  inline void set_has_btfishkindgroup3();
  inline void clear_has_btfishkindgroup3();
  inline void set_has_btfishkindgroup4();
  inline void clear_has_btfishkindgroup4();
  inline void set_has_bkilled();
  inline void clear_has_bkilled();
  inline void set_has_brobotkilled();
  inline void clear_has_brobotkilled();
  inline void set_has_bkilledbyotherrela();
  inline void clear_has_bkilledbyotherrela();
  inline void set_has_bkilledbyalgoa();
  inline void clear_has_bkilledbyalgoa();
  inline void set_has_btkilledcannonindex();
  inline void clear_has_btkilledcannonindex();
  inline void set_has_bfloatmul();
  inline void clear_has_bfloatmul();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 dwfishid_;
  ::google::protobuf::int32 btfishkind_;
  ::google::protobuf::int32 btfishkindgroup1_;
  ::google::protobuf::int32 btfishkindgroup2_;
  ::google::protobuf::int32 btfishkindgroup3_;
  ::google::protobuf::int32 btfishkindgroup4_;
  bool bkilled_;
  bool brobotkilled_;
  bool bkilledbyotherrela_;
  bool bkilledbyalgoa_;
  ::google::protobuf::int32 btkilledcannonindex_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::FishPoolSaveBaseMul > arbasemul_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::FishPoolSaveRelaCount > arrelacount_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::FishPoolSaveHitCountCfg > arhitcountcfg_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::FishPoolSaveConnonHitCount > arconnonhitcount_;
  bool bfloatmul_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static FishPoolSave* default_instance_;
};
// -------------------------------------------------------------------

class FishKindFishPoolSave : public ::google::protobuf::Message {
 public:
  FishKindFishPoolSave();
  virtual ~FishKindFishPoolSave();

  FishKindFishPoolSave(const FishKindFishPoolSave& from);

  inline FishKindFishPoolSave& operator=(const FishKindFishPoolSave& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FishKindFishPoolSave& default_instance();

  void Swap(FishKindFishPoolSave* other);

  // implements Message ----------------------------------------------

  FishKindFishPoolSave* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FishKindFishPoolSave& from);
  void MergeFrom(const FishKindFishPoolSave& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FishPoolSave fish_pool = 1;
  inline int fish_pool_size() const;
  inline void clear_fish_pool();
  static const int kFishPoolFieldNumber = 1;
  inline const ::proto_ff::FishPoolSave& fish_pool(int index) const;
  inline ::proto_ff::FishPoolSave* mutable_fish_pool(int index);
  inline ::proto_ff::FishPoolSave* add_fish_pool();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FishPoolSave >&
      fish_pool() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FishPoolSave >*
      mutable_fish_pool();

  // @@protoc_insertion_point(class_scope:proto_ff.FishKindFishPoolSave)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FishPoolSave > fish_pool_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static FishKindFishPoolSave* default_instance_;
};
// -------------------------------------------------------------------

class FishKindFishPoolSaveArray : public ::google::protobuf::Message {
 public:
  FishKindFishPoolSaveArray();
  virtual ~FishKindFishPoolSaveArray();

  FishKindFishPoolSaveArray(const FishKindFishPoolSaveArray& from);

  inline FishKindFishPoolSaveArray& operator=(const FishKindFishPoolSaveArray& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FishKindFishPoolSaveArray& default_instance();

  void Swap(FishKindFishPoolSaveArray* other);

  // implements Message ----------------------------------------------

  FishKindFishPoolSaveArray* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FishKindFishPoolSaveArray& from);
  void MergeFrom(const FishKindFishPoolSaveArray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FishKindFishPoolSave fish_kind = 1;
  inline int fish_kind_size() const;
  inline void clear_fish_kind();
  static const int kFishKindFieldNumber = 1;
  inline const ::proto_ff::FishKindFishPoolSave& fish_kind(int index) const;
  inline ::proto_ff::FishKindFishPoolSave* mutable_fish_kind(int index);
  inline ::proto_ff::FishKindFishPoolSave* add_fish_kind();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FishKindFishPoolSave >&
      fish_kind() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FishKindFishPoolSave >*
      mutable_fish_kind();

  // @@protoc_insertion_point(class_scope:proto_ff.FishKindFishPoolSaveArray)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FishKindFishPoolSave > fish_kind_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static FishKindFishPoolSaveArray* default_instance_;
};
// -------------------------------------------------------------------

class GMCtrlLevelDesc : public ::google::protobuf::Message {
 public:
  GMCtrlLevelDesc();
  virtual ~GMCtrlLevelDesc();

  GMCtrlLevelDesc(const GMCtrlLevelDesc& from);

  inline GMCtrlLevelDesc& operator=(const GMCtrlLevelDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMCtrlLevelDesc& default_instance();

  void Swap(GMCtrlLevelDesc* other);

  // implements Message ----------------------------------------------

  GMCtrlLevelDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMCtrlLevelDesc& from);
  void MergeFrom(const GMCtrlLevelDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ControlLevel = 1;
  inline bool has_controllevel() const;
  inline void clear_controllevel();
  static const int kControlLevelFieldNumber = 1;
  inline ::google::protobuf::int32 controllevel() const;
  inline void set_controllevel(::google::protobuf::int32 value);

  // optional string Name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 ControlRate = 3;
  inline bool has_controlrate() const;
  inline void clear_controlrate();
  static const int kControlRateFieldNumber = 3;
  inline ::google::protobuf::int32 controlrate() const;
  inline void set_controlrate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.GMCtrlLevelDesc)
 private:
  inline void set_has_controllevel();
  inline void clear_has_controllevel();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_controlrate();
  inline void clear_has_controlrate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 controllevel_;
  ::google::protobuf::int32 controlrate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static GMCtrlLevelDesc* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_GMCtrlLevelDesc : public ::google::protobuf::Message {
 public:
  Sheet_GMCtrlLevelDesc();
  virtual ~Sheet_GMCtrlLevelDesc();

  Sheet_GMCtrlLevelDesc(const Sheet_GMCtrlLevelDesc& from);

  inline Sheet_GMCtrlLevelDesc& operator=(const Sheet_GMCtrlLevelDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_GMCtrlLevelDesc& default_instance();

  void Swap(Sheet_GMCtrlLevelDesc* other);

  // implements Message ----------------------------------------------

  Sheet_GMCtrlLevelDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_GMCtrlLevelDesc& from);
  void MergeFrom(const Sheet_GMCtrlLevelDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.GMCtrlLevelDesc GMCtrlLevelDesc_List = 1;
  inline int gmctrlleveldesc_list_size() const;
  inline void clear_gmctrlleveldesc_list();
  static const int kGMCtrlLevelDescListFieldNumber = 1;
  inline const ::proto_ff::GMCtrlLevelDesc& gmctrlleveldesc_list(int index) const;
  inline ::proto_ff::GMCtrlLevelDesc* mutable_gmctrlleveldesc_list(int index);
  inline ::proto_ff::GMCtrlLevelDesc* add_gmctrlleveldesc_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GMCtrlLevelDesc >&
      gmctrlleveldesc_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GMCtrlLevelDesc >*
      mutable_gmctrlleveldesc_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_GMCtrlLevelDesc)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::GMCtrlLevelDesc > gmctrlleveldesc_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static Sheet_GMCtrlLevelDesc* default_instance_;
};
// -------------------------------------------------------------------

class LineGameSystemControlInfo : public ::google::protobuf::Message {
 public:
  LineGameSystemControlInfo();
  virtual ~LineGameSystemControlInfo();

  LineGameSystemControlInfo(const LineGameSystemControlInfo& from);

  inline LineGameSystemControlInfo& operator=(const LineGameSystemControlInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LineGameSystemControlInfo& default_instance();

  void Swap(LineGameSystemControlInfo* other);

  // implements Message ----------------------------------------------

  LineGameSystemControlInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LineGameSystemControlInfo& from);
  void MergeFrom(const LineGameSystemControlInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 RoomID = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIDFieldNumber = 1;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // optional int32 AreaID = 2;
  inline bool has_areaid() const;
  inline void clear_areaid();
  static const int kAreaIDFieldNumber = 2;
  inline ::google::protobuf::int32 areaid() const;
  inline void set_areaid(::google::protobuf::int32 value);

  // optional int64 TotalProfit = 3;
  inline bool has_totalprofit() const;
  inline void clear_totalprofit();
  static const int kTotalProfitFieldNumber = 3;
  inline ::google::protobuf::int64 totalprofit() const;
  inline void set_totalprofit(::google::protobuf::int64 value);

  // optional int32 CurrentSystemControl = 4;
  inline bool has_currentsystemcontrol() const;
  inline void clear_currentsystemcontrol();
  static const int kCurrentSystemControlFieldNumber = 4;
  inline ::google::protobuf::int32 currentsystemcontrol() const;
  inline void set_currentsystemcontrol(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.LineGameSystemControlInfo)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_areaid();
  inline void clear_has_areaid();
  inline void set_has_totalprofit();
  inline void clear_has_totalprofit();
  inline void set_has_currentsystemcontrol();
  inline void clear_has_currentsystemcontrol();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 areaid_;
  ::google::protobuf::int64 totalprofit_;
  ::google::protobuf::int32 currentsystemcontrol_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static LineGameSystemControlInfo* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_LineGameSystemControlInfo : public ::google::protobuf::Message {
 public:
  Sheet_LineGameSystemControlInfo();
  virtual ~Sheet_LineGameSystemControlInfo();

  Sheet_LineGameSystemControlInfo(const Sheet_LineGameSystemControlInfo& from);

  inline Sheet_LineGameSystemControlInfo& operator=(const Sheet_LineGameSystemControlInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_LineGameSystemControlInfo& default_instance();

  void Swap(Sheet_LineGameSystemControlInfo* other);

  // implements Message ----------------------------------------------

  Sheet_LineGameSystemControlInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_LineGameSystemControlInfo& from);
  void MergeFrom(const Sheet_LineGameSystemControlInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.LineGameSystemControlInfo LineGameSystemControlInfo_List = 1;
  inline int linegamesystemcontrolinfo_list_size() const;
  inline void clear_linegamesystemcontrolinfo_list();
  static const int kLineGameSystemControlInfoListFieldNumber = 1;
  inline const ::proto_ff::LineGameSystemControlInfo& linegamesystemcontrolinfo_list(int index) const;
  inline ::proto_ff::LineGameSystemControlInfo* mutable_linegamesystemcontrolinfo_list(int index);
  inline ::proto_ff::LineGameSystemControlInfo* add_linegamesystemcontrolinfo_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::LineGameSystemControlInfo >&
      linegamesystemcontrolinfo_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::LineGameSystemControlInfo >*
      mutable_linegamesystemcontrolinfo_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_LineGameSystemControlInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::LineGameSystemControlInfo > linegamesystemcontrolinfo_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static Sheet_LineGameSystemControlInfo* default_instance_;
};
// -------------------------------------------------------------------

class LineLevelDesc : public ::google::protobuf::Message {
 public:
  LineLevelDesc();
  virtual ~LineLevelDesc();

  LineLevelDesc(const LineLevelDesc& from);

  inline LineLevelDesc& operator=(const LineLevelDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LineLevelDesc& default_instance();

  void Swap(LineLevelDesc* other);

  // implements Message ----------------------------------------------

  LineLevelDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LineLevelDesc& from);
  void MergeFrom(const LineLevelDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 LevelID = 1;
  inline bool has_levelid() const;
  inline void clear_levelid();
  static const int kLevelIDFieldNumber = 1;
  inline ::google::protobuf::int32 levelid() const;
  inline void set_levelid(::google::protobuf::int32 value);

  // optional string LevelName = 2;
  inline bool has_levelname() const;
  inline void clear_levelname();
  static const int kLevelNameFieldNumber = 2;
  inline const ::std::string& levelname() const;
  inline void set_levelname(const ::std::string& value);
  inline void set_levelname(const char* value);
  inline void set_levelname(const char* value, size_t size);
  inline ::std::string* mutable_levelname();
  inline ::std::string* release_levelname();
  inline void set_allocated_levelname(::std::string* levelname);

  // optional string CannonLevelVal = 3;
  inline bool has_cannonlevelval() const;
  inline void clear_cannonlevelval();
  static const int kCannonLevelValFieldNumber = 3;
  inline const ::std::string& cannonlevelval() const;
  inline void set_cannonlevelval(const ::std::string& value);
  inline void set_cannonlevelval(const char* value);
  inline void set_cannonlevelval(const char* value, size_t size);
  inline ::std::string* mutable_cannonlevelval();
  inline ::std::string* release_cannonlevelval();
  inline void set_allocated_cannonlevelval(::std::string* cannonlevelval);

  // repeated int32 VecCannonLevelVal = 4;
  inline int veccannonlevelval_size() const;
  inline void clear_veccannonlevelval();
  static const int kVecCannonLevelValFieldNumber = 4;
  inline ::google::protobuf::int32 veccannonlevelval(int index) const;
  inline void set_veccannonlevelval(int index, ::google::protobuf::int32 value);
  inline void add_veccannonlevelval(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      veccannonlevelval() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_veccannonlevelval();

  // optional string CannonShowNum = 5;
  inline bool has_cannonshownum() const;
  inline void clear_cannonshownum();
  static const int kCannonShowNumFieldNumber = 5;
  inline const ::std::string& cannonshownum() const;
  inline void set_cannonshownum(const ::std::string& value);
  inline void set_cannonshownum(const char* value);
  inline void set_cannonshownum(const char* value, size_t size);
  inline ::std::string* mutable_cannonshownum();
  inline ::std::string* release_cannonshownum();
  inline void set_allocated_cannonshownum(::std::string* cannonshownum);

  // repeated int32 VecCannonShowNum = 6;
  inline int veccannonshownum_size() const;
  inline void clear_veccannonshownum();
  static const int kVecCannonShowNumFieldNumber = 6;
  inline ::google::protobuf::int32 veccannonshownum(int index) const;
  inline void set_veccannonshownum(int index, ::google::protobuf::int32 value);
  inline void add_veccannonshownum(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      veccannonshownum() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_veccannonshownum();

  // optional int32 MinMoney = 7;
  inline bool has_minmoney() const;
  inline void clear_minmoney();
  static const int kMinMoneyFieldNumber = 7;
  inline ::google::protobuf::int32 minmoney() const;
  inline void set_minmoney(::google::protobuf::int32 value);

  // optional int32 MaxMoney = 8;
  inline bool has_maxmoney() const;
  inline void clear_maxmoney();
  static const int kMaxMoneyFieldNumber = 8;
  inline ::google::protobuf::int32 maxmoney() const;
  inline void set_maxmoney(::google::protobuf::int32 value);

  // optional int32 StartGame = 9;
  inline bool has_startgame() const;
  inline void clear_startgame();
  static const int kStartGameFieldNumber = 9;
  inline ::google::protobuf::int32 startgame() const;
  inline void set_startgame(::google::protobuf::int32 value);

  // optional int32 Flag = 10;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 10;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // optional int32 MaxWinTimes = 11;
  inline bool has_maxwintimes() const;
  inline void clear_maxwintimes();
  static const int kMaxWinTimesFieldNumber = 11;
  inline ::google::protobuf::int32 maxwintimes() const;
  inline void set_maxwintimes(::google::protobuf::int32 value);

  // optional string Chip = 12;
  inline bool has_chip() const;
  inline void clear_chip();
  static const int kChipFieldNumber = 12;
  inline const ::std::string& chip() const;
  inline void set_chip(const ::std::string& value);
  inline void set_chip(const char* value);
  inline void set_chip(const char* value, size_t size);
  inline ::std::string* mutable_chip();
  inline ::std::string* release_chip();
  inline void set_allocated_chip(::std::string* chip);

  // repeated int64 VecChips = 13;
  inline int vecchips_size() const;
  inline void clear_vecchips();
  static const int kVecChipsFieldNumber = 13;
  inline ::google::protobuf::int64 vecchips(int index) const;
  inline void set_vecchips(int index, ::google::protobuf::int64 value);
  inline void add_vecchips(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      vecchips() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_vecchips();

  // optional string GMLevelRate = 14;
  inline bool has_gmlevelrate() const;
  inline void clear_gmlevelrate();
  static const int kGMLevelRateFieldNumber = 14;
  inline const ::std::string& gmlevelrate() const;
  inline void set_gmlevelrate(const ::std::string& value);
  inline void set_gmlevelrate(const char* value);
  inline void set_gmlevelrate(const char* value, size_t size);
  inline ::std::string* mutable_gmlevelrate();
  inline ::std::string* release_gmlevelrate();
  inline void set_allocated_gmlevelrate(::std::string* gmlevelrate);

  // repeated int32 VecGMLevelRate = 15;
  inline int vecgmlevelrate_size() const;
  inline void clear_vecgmlevelrate();
  static const int kVecGMLevelRateFieldNumber = 15;
  inline ::google::protobuf::int32 vecgmlevelrate(int index) const;
  inline void set_vecgmlevelrate(int index, ::google::protobuf::int32 value);
  inline void add_vecgmlevelrate(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      vecgmlevelrate() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_vecgmlevelrate();

  // @@protoc_insertion_point(class_scope:proto_ff.LineLevelDesc)
 private:
  inline void set_has_levelid();
  inline void clear_has_levelid();
  inline void set_has_levelname();
  inline void clear_has_levelname();
  inline void set_has_cannonlevelval();
  inline void clear_has_cannonlevelval();
  inline void set_has_cannonshownum();
  inline void clear_has_cannonshownum();
  inline void set_has_minmoney();
  inline void clear_has_minmoney();
  inline void set_has_maxmoney();
  inline void clear_has_maxmoney();
  inline void set_has_startgame();
  inline void clear_has_startgame();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_maxwintimes();
  inline void clear_has_maxwintimes();
  inline void set_has_chip();
  inline void clear_has_chip();
  inline void set_has_gmlevelrate();
  inline void clear_has_gmlevelrate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* levelname_;
  ::std::string* cannonlevelval_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > veccannonlevelval_;
  ::google::protobuf::int32 levelid_;
  ::google::protobuf::int32 minmoney_;
  ::std::string* cannonshownum_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > veccannonshownum_;
  ::google::protobuf::int32 maxmoney_;
  ::google::protobuf::int32 startgame_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int32 maxwintimes_;
  ::std::string* chip_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > vecchips_;
  ::std::string* gmlevelrate_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > vecgmlevelrate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static LineLevelDesc* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_LineLevelDesc : public ::google::protobuf::Message {
 public:
  Sheet_LineLevelDesc();
  virtual ~Sheet_LineLevelDesc();

  Sheet_LineLevelDesc(const Sheet_LineLevelDesc& from);

  inline Sheet_LineLevelDesc& operator=(const Sheet_LineLevelDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_LineLevelDesc& default_instance();

  void Swap(Sheet_LineLevelDesc* other);

  // implements Message ----------------------------------------------

  Sheet_LineLevelDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_LineLevelDesc& from);
  void MergeFrom(const Sheet_LineLevelDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.LineLevelDesc LineLevelDesc_List = 1;
  inline int lineleveldesc_list_size() const;
  inline void clear_lineleveldesc_list();
  static const int kLineLevelDescListFieldNumber = 1;
  inline const ::proto_ff::LineLevelDesc& lineleveldesc_list(int index) const;
  inline ::proto_ff::LineLevelDesc* mutable_lineleveldesc_list(int index);
  inline ::proto_ff::LineLevelDesc* add_lineleveldesc_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::LineLevelDesc >&
      lineleveldesc_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::LineLevelDesc >*
      mutable_lineleveldesc_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_LineLevelDesc)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::LineLevelDesc > lineleveldesc_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static Sheet_LineLevelDesc* default_instance_;
};
// -------------------------------------------------------------------

class LineDeskInfoDesc : public ::google::protobuf::Message {
 public:
  LineDeskInfoDesc();
  virtual ~LineDeskInfoDesc();

  LineDeskInfoDesc(const LineDeskInfoDesc& from);

  inline LineDeskInfoDesc& operator=(const LineDeskInfoDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LineDeskInfoDesc& default_instance();

  void Swap(LineDeskInfoDesc* other);

  // implements Message ----------------------------------------------

  LineDeskInfoDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LineDeskInfoDesc& from);
  void MergeFrom(const LineDeskInfoDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 RoomID = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIDFieldNumber = 2;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // optional int32 DeskID = 3;
  inline bool has_deskid() const;
  inline void clear_deskid();
  static const int kDeskIDFieldNumber = 3;
  inline ::google::protobuf::int32 deskid() const;
  inline void set_deskid(::google::protobuf::int32 value);

  // optional int32 AlgoID = 4;
  inline bool has_algoid() const;
  inline void clear_algoid();
  static const int kAlgoIDFieldNumber = 4;
  inline ::google::protobuf::int32 algoid() const;
  inline void set_algoid(::google::protobuf::int32 value);

  // optional int32 DrawRate = 5;
  inline bool has_drawrate() const;
  inline void clear_drawrate();
  static const int kDrawRateFieldNumber = 5;
  inline ::google::protobuf::int32 drawrate() const;
  inline void set_drawrate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.LineDeskInfoDesc)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_deskid();
  inline void clear_has_deskid();
  inline void set_has_algoid();
  inline void clear_has_algoid();
  inline void set_has_drawrate();
  inline void clear_has_drawrate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 deskid_;
  ::google::protobuf::int32 algoid_;
  ::google::protobuf::int32 drawrate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static LineDeskInfoDesc* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_LineDeskInfoDesc : public ::google::protobuf::Message {
 public:
  Sheet_LineDeskInfoDesc();
  virtual ~Sheet_LineDeskInfoDesc();

  Sheet_LineDeskInfoDesc(const Sheet_LineDeskInfoDesc& from);

  inline Sheet_LineDeskInfoDesc& operator=(const Sheet_LineDeskInfoDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_LineDeskInfoDesc& default_instance();

  void Swap(Sheet_LineDeskInfoDesc* other);

  // implements Message ----------------------------------------------

  Sheet_LineDeskInfoDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_LineDeskInfoDesc& from);
  void MergeFrom(const Sheet_LineDeskInfoDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.LineDeskInfoDesc LineDeskInfoDesc_List = 1;
  inline int linedeskinfodesc_list_size() const;
  inline void clear_linedeskinfodesc_list();
  static const int kLineDeskInfoDescListFieldNumber = 1;
  inline const ::proto_ff::LineDeskInfoDesc& linedeskinfodesc_list(int index) const;
  inline ::proto_ff::LineDeskInfoDesc* mutable_linedeskinfodesc_list(int index);
  inline ::proto_ff::LineDeskInfoDesc* add_linedeskinfodesc_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::LineDeskInfoDesc >&
      linedeskinfodesc_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::LineDeskInfoDesc >*
      mutable_linedeskinfodesc_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_LineDeskInfoDesc)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::LineDeskInfoDesc > linedeskinfodesc_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static Sheet_LineDeskInfoDesc* default_instance_;
};
// -------------------------------------------------------------------

class LineAlgoDesc : public ::google::protobuf::Message {
 public:
  LineAlgoDesc();
  virtual ~LineAlgoDesc();

  LineAlgoDesc(const LineAlgoDesc& from);

  inline LineAlgoDesc& operator=(const LineAlgoDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LineAlgoDesc& default_instance();

  void Swap(LineAlgoDesc* other);

  // implements Message ----------------------------------------------

  LineAlgoDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LineAlgoDesc& from);
  void MergeFrom(const LineAlgoDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 AlgoID = 1;
  inline bool has_algoid() const;
  inline void clear_algoid();
  static const int kAlgoIDFieldNumber = 1;
  inline ::google::protobuf::int32 algoid() const;
  inline void set_algoid(::google::protobuf::int32 value);

  // optional string AlgoName = 2;
  inline bool has_algoname() const;
  inline void clear_algoname();
  static const int kAlgoNameFieldNumber = 2;
  inline const ::std::string& algoname() const;
  inline void set_algoname(const ::std::string& value);
  inline void set_algoname(const char* value);
  inline void set_algoname(const char* value, size_t size);
  inline ::std::string* mutable_algoname();
  inline ::std::string* release_algoname();
  inline void set_allocated_algoname(::std::string* algoname);

  // optional string AlgoDesc = 3;
  inline bool has_algodesc() const;
  inline void clear_algodesc();
  static const int kAlgoDescFieldNumber = 3;
  inline const ::std::string& algodesc() const;
  inline void set_algodesc(const ::std::string& value);
  inline void set_algodesc(const char* value);
  inline void set_algodesc(const char* value, size_t size);
  inline ::std::string* mutable_algodesc();
  inline ::std::string* release_algodesc();
  inline void set_allocated_algodesc(::std::string* algodesc);

  // optional int64 Level_Chi5 = 4;
  inline bool has_level_chi5() const;
  inline void clear_level_chi5();
  static const int kLevelChi5FieldNumber = 4;
  inline ::google::protobuf::int64 level_chi5() const;
  inline void set_level_chi5(::google::protobuf::int64 value);

  // optional int64 Level_Chi4 = 5;
  inline bool has_level_chi4() const;
  inline void clear_level_chi4();
  static const int kLevelChi4FieldNumber = 5;
  inline ::google::protobuf::int64 level_chi4() const;
  inline void set_level_chi4(::google::protobuf::int64 value);

  // optional int64 Level_Chi3 = 6;
  inline bool has_level_chi3() const;
  inline void clear_level_chi3();
  static const int kLevelChi3FieldNumber = 6;
  inline ::google::protobuf::int64 level_chi3() const;
  inline void set_level_chi3(::google::protobuf::int64 value);

  // optional int64 Level_Chi2 = 7;
  inline bool has_level_chi2() const;
  inline void clear_level_chi2();
  static const int kLevelChi2FieldNumber = 7;
  inline ::google::protobuf::int64 level_chi2() const;
  inline void set_level_chi2(::google::protobuf::int64 value);

  // optional int64 Level_Chi1 = 8;
  inline bool has_level_chi1() const;
  inline void clear_level_chi1();
  static const int kLevelChi1FieldNumber = 8;
  inline ::google::protobuf::int64 level_chi1() const;
  inline void set_level_chi1(::google::protobuf::int64 value);

  // optional int64 Level_Fang1 = 9;
  inline bool has_level_fang1() const;
  inline void clear_level_fang1();
  static const int kLevelFang1FieldNumber = 9;
  inline ::google::protobuf::int64 level_fang1() const;
  inline void set_level_fang1(::google::protobuf::int64 value);

  // optional int64 Level_Fang2 = 10;
  inline bool has_level_fang2() const;
  inline void clear_level_fang2();
  static const int kLevelFang2FieldNumber = 10;
  inline ::google::protobuf::int64 level_fang2() const;
  inline void set_level_fang2(::google::protobuf::int64 value);

  // optional int64 Level_Fang3 = 11;
  inline bool has_level_fang3() const;
  inline void clear_level_fang3();
  static const int kLevelFang3FieldNumber = 11;
  inline ::google::protobuf::int64 level_fang3() const;
  inline void set_level_fang3(::google::protobuf::int64 value);

  // optional int64 Level_Fang4 = 12;
  inline bool has_level_fang4() const;
  inline void clear_level_fang4();
  static const int kLevelFang4FieldNumber = 12;
  inline ::google::protobuf::int64 level_fang4() const;
  inline void set_level_fang4(::google::protobuf::int64 value);

  // optional int64 Level_Fang5 = 13;
  inline bool has_level_fang5() const;
  inline void clear_level_fang5();
  static const int kLevelFang5FieldNumber = 13;
  inline ::google::protobuf::int64 level_fang5() const;
  inline void set_level_fang5(::google::protobuf::int64 value);

  // optional string UserLuckSection = 14;
  inline bool has_userlucksection() const;
  inline void clear_userlucksection();
  static const int kUserLuckSectionFieldNumber = 14;
  inline const ::std::string& userlucksection() const;
  inline void set_userlucksection(const ::std::string& value);
  inline void set_userlucksection(const char* value);
  inline void set_userlucksection(const char* value, size_t size);
  inline ::std::string* mutable_userlucksection();
  inline ::std::string* release_userlucksection();
  inline void set_allocated_userlucksection(::std::string* userlucksection);

  // repeated int32 VecUserLuckSection = 15;
  inline int vecuserlucksection_size() const;
  inline void clear_vecuserlucksection();
  static const int kVecUserLuckSectionFieldNumber = 15;
  inline ::google::protobuf::int32 vecuserlucksection(int index) const;
  inline void set_vecuserlucksection(int index, ::google::protobuf::int32 value);
  inline void add_vecuserlucksection(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      vecuserlucksection() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_vecuserlucksection();

  // optional string UserNewSection = 16;
  inline bool has_usernewsection() const;
  inline void clear_usernewsection();
  static const int kUserNewSectionFieldNumber = 16;
  inline const ::std::string& usernewsection() const;
  inline void set_usernewsection(const ::std::string& value);
  inline void set_usernewsection(const char* value);
  inline void set_usernewsection(const char* value, size_t size);
  inline ::std::string* mutable_usernewsection();
  inline ::std::string* release_usernewsection();
  inline void set_allocated_usernewsection(::std::string* usernewsection);

  // repeated int32 VecUserNewSection = 17;
  inline int vecusernewsection_size() const;
  inline void clear_vecusernewsection();
  static const int kVecUserNewSectionFieldNumber = 17;
  inline ::google::protobuf::int32 vecusernewsection(int index) const;
  inline void set_vecusernewsection(int index, ::google::protobuf::int32 value);
  inline void add_vecusernewsection(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      vecusernewsection() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_vecusernewsection();

  // optional string UserNewLuckVal = 18;
  inline bool has_usernewluckval() const;
  inline void clear_usernewluckval();
  static const int kUserNewLuckValFieldNumber = 18;
  inline const ::std::string& usernewluckval() const;
  inline void set_usernewluckval(const ::std::string& value);
  inline void set_usernewluckval(const char* value);
  inline void set_usernewluckval(const char* value, size_t size);
  inline ::std::string* mutable_usernewluckval();
  inline ::std::string* release_usernewluckval();
  inline void set_allocated_usernewluckval(::std::string* usernewluckval);

  // repeated int32 VecUserNewLuckVal = 19;
  inline int vecusernewluckval_size() const;
  inline void clear_vecusernewluckval();
  static const int kVecUserNewLuckValFieldNumber = 19;
  inline ::google::protobuf::int32 vecusernewluckval(int index) const;
  inline void set_vecusernewluckval(int index, ::google::protobuf::int32 value);
  inline void add_vecusernewluckval(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      vecusernewluckval() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_vecusernewluckval();

  // optional string UserRechargeSection = 20;
  inline bool has_userrechargesection() const;
  inline void clear_userrechargesection();
  static const int kUserRechargeSectionFieldNumber = 20;
  inline const ::std::string& userrechargesection() const;
  inline void set_userrechargesection(const ::std::string& value);
  inline void set_userrechargesection(const char* value);
  inline void set_userrechargesection(const char* value, size_t size);
  inline ::std::string* mutable_userrechargesection();
  inline ::std::string* release_userrechargesection();
  inline void set_allocated_userrechargesection(::std::string* userrechargesection);

  // repeated int32 VecUserRechargeSection = 21;
  inline int vecuserrechargesection_size() const;
  inline void clear_vecuserrechargesection();
  static const int kVecUserRechargeSectionFieldNumber = 21;
  inline ::google::protobuf::int32 vecuserrechargesection(int index) const;
  inline void set_vecuserrechargesection(int index, ::google::protobuf::int32 value);
  inline void add_vecuserrechargesection(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      vecuserrechargesection() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_vecuserrechargesection();

  // optional string UserRechargeLuckyVal = 22;
  inline bool has_userrechargeluckyval() const;
  inline void clear_userrechargeluckyval();
  static const int kUserRechargeLuckyValFieldNumber = 22;
  inline const ::std::string& userrechargeluckyval() const;
  inline void set_userrechargeluckyval(const ::std::string& value);
  inline void set_userrechargeluckyval(const char* value);
  inline void set_userrechargeluckyval(const char* value, size_t size);
  inline ::std::string* mutable_userrechargeluckyval();
  inline ::std::string* release_userrechargeluckyval();
  inline void set_allocated_userrechargeluckyval(::std::string* userrechargeluckyval);

  // repeated int32 VecUserRechargeLuckyVal = 23;
  inline int vecuserrechargeluckyval_size() const;
  inline void clear_vecuserrechargeluckyval();
  static const int kVecUserRechargeLuckyValFieldNumber = 23;
  inline ::google::protobuf::int32 vecuserrechargeluckyval(int index) const;
  inline void set_vecuserrechargeluckyval(int index, ::google::protobuf::int32 value);
  inline void add_vecuserrechargeluckyval(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      vecuserrechargeluckyval() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_vecuserrechargeluckyval();

  // optional int32 UserLuceFlag = 24;
  inline bool has_userluceflag() const;
  inline void clear_userluceflag();
  static const int kUserLuceFlagFieldNumber = 24;
  inline ::google::protobuf::int32 userluceflag() const;
  inline void set_userluceflag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.LineAlgoDesc)
 private:
  inline void set_has_algoid();
  inline void clear_has_algoid();
  inline void set_has_algoname();
  inline void clear_has_algoname();
  inline void set_has_algodesc();
  inline void clear_has_algodesc();
  inline void set_has_level_chi5();
  inline void clear_has_level_chi5();
  inline void set_has_level_chi4();
  inline void clear_has_level_chi4();
  inline void set_has_level_chi3();
  inline void clear_has_level_chi3();
  inline void set_has_level_chi2();
  inline void clear_has_level_chi2();
  inline void set_has_level_chi1();
  inline void clear_has_level_chi1();
  inline void set_has_level_fang1();
  inline void clear_has_level_fang1();
  inline void set_has_level_fang2();
  inline void clear_has_level_fang2();
  inline void set_has_level_fang3();
  inline void clear_has_level_fang3();
  inline void set_has_level_fang4();
  inline void clear_has_level_fang4();
  inline void set_has_level_fang5();
  inline void clear_has_level_fang5();
  inline void set_has_userlucksection();
  inline void clear_has_userlucksection();
  inline void set_has_usernewsection();
  inline void clear_has_usernewsection();
  inline void set_has_usernewluckval();
  inline void clear_has_usernewluckval();
  inline void set_has_userrechargesection();
  inline void clear_has_userrechargesection();
  inline void set_has_userrechargeluckyval();
  inline void clear_has_userrechargeluckyval();
  inline void set_has_userluceflag();
  inline void clear_has_userluceflag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* algoname_;
  ::std::string* algodesc_;
  ::google::protobuf::int64 level_chi5_;
  ::google::protobuf::int64 level_chi4_;
  ::google::protobuf::int64 level_chi3_;
  ::google::protobuf::int64 level_chi2_;
  ::google::protobuf::int64 level_chi1_;
  ::google::protobuf::int64 level_fang1_;
  ::google::protobuf::int64 level_fang2_;
  ::google::protobuf::int64 level_fang3_;
  ::google::protobuf::int64 level_fang4_;
  ::google::protobuf::int32 algoid_;
  ::google::protobuf::int32 userluceflag_;
  ::google::protobuf::int64 level_fang5_;
  ::std::string* userlucksection_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > vecuserlucksection_;
  ::std::string* usernewsection_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > vecusernewsection_;
  ::std::string* usernewluckval_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > vecusernewluckval_;
  ::std::string* userrechargesection_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > vecuserrechargesection_;
  ::std::string* userrechargeluckyval_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > vecuserrechargeluckyval_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(24 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static LineAlgoDesc* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_LineAlgoDesc : public ::google::protobuf::Message {
 public:
  Sheet_LineAlgoDesc();
  virtual ~Sheet_LineAlgoDesc();

  Sheet_LineAlgoDesc(const Sheet_LineAlgoDesc& from);

  inline Sheet_LineAlgoDesc& operator=(const Sheet_LineAlgoDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_LineAlgoDesc& default_instance();

  void Swap(Sheet_LineAlgoDesc* other);

  // implements Message ----------------------------------------------

  Sheet_LineAlgoDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_LineAlgoDesc& from);
  void MergeFrom(const Sheet_LineAlgoDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.LineAlgoDesc LineAlgoDesc_List = 1;
  inline int linealgodesc_list_size() const;
  inline void clear_linealgodesc_list();
  static const int kLineAlgoDescListFieldNumber = 1;
  inline const ::proto_ff::LineAlgoDesc& linealgodesc_list(int index) const;
  inline ::proto_ff::LineAlgoDesc* mutable_linealgodesc_list(int index);
  inline ::proto_ff::LineAlgoDesc* add_linealgodesc_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::LineAlgoDesc >&
      linealgodesc_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::LineAlgoDesc >*
      mutable_linealgodesc_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_LineAlgoDesc)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::LineAlgoDesc > linealgodesc_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FishResMeta_2eproto();
  friend void protobuf_AssignDesc_FishResMeta_2eproto();
  friend void protobuf_ShutdownFile_FishResMeta_2eproto();

  void InitAsDefaultInstance();
  static Sheet_LineAlgoDesc* default_instance_;
};
// ===================================================================


// ===================================================================

// FishLevelDesc

// optional int32 LevelID = 1;
inline bool FishLevelDesc::has_levelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FishLevelDesc::set_has_levelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FishLevelDesc::clear_has_levelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FishLevelDesc::clear_levelid() {
  levelid_ = 0;
  clear_has_levelid();
}
inline ::google::protobuf::int32 FishLevelDesc::levelid() const {
  return levelid_;
}
inline void FishLevelDesc::set_levelid(::google::protobuf::int32 value) {
  set_has_levelid();
  levelid_ = value;
}

// optional string LevelName = 2;
inline bool FishLevelDesc::has_levelname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FishLevelDesc::set_has_levelname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FishLevelDesc::clear_has_levelname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FishLevelDesc::clear_levelname() {
  if (levelname_ != &::google::protobuf::internal::kEmptyString) {
    levelname_->clear();
  }
  clear_has_levelname();
}
inline const ::std::string& FishLevelDesc::levelname() const {
  return *levelname_;
}
inline void FishLevelDesc::set_levelname(const ::std::string& value) {
  set_has_levelname();
  if (levelname_ == &::google::protobuf::internal::kEmptyString) {
    levelname_ = new ::std::string;
  }
  levelname_->assign(value);
}
inline void FishLevelDesc::set_levelname(const char* value) {
  set_has_levelname();
  if (levelname_ == &::google::protobuf::internal::kEmptyString) {
    levelname_ = new ::std::string;
  }
  levelname_->assign(value);
}
inline void FishLevelDesc::set_levelname(const char* value, size_t size) {
  set_has_levelname();
  if (levelname_ == &::google::protobuf::internal::kEmptyString) {
    levelname_ = new ::std::string;
  }
  levelname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FishLevelDesc::mutable_levelname() {
  set_has_levelname();
  if (levelname_ == &::google::protobuf::internal::kEmptyString) {
    levelname_ = new ::std::string;
  }
  return levelname_;
}
inline ::std::string* FishLevelDesc::release_levelname() {
  clear_has_levelname();
  if (levelname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = levelname_;
    levelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FishLevelDesc::set_allocated_levelname(::std::string* levelname) {
  if (levelname_ != &::google::protobuf::internal::kEmptyString) {
    delete levelname_;
  }
  if (levelname) {
    set_has_levelname();
    levelname_ = levelname;
  } else {
    clear_has_levelname();
    levelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string CannonLevelVal = 3;
inline bool FishLevelDesc::has_cannonlevelval() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FishLevelDesc::set_has_cannonlevelval() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FishLevelDesc::clear_has_cannonlevelval() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FishLevelDesc::clear_cannonlevelval() {
  if (cannonlevelval_ != &::google::protobuf::internal::kEmptyString) {
    cannonlevelval_->clear();
  }
  clear_has_cannonlevelval();
}
inline const ::std::string& FishLevelDesc::cannonlevelval() const {
  return *cannonlevelval_;
}
inline void FishLevelDesc::set_cannonlevelval(const ::std::string& value) {
  set_has_cannonlevelval();
  if (cannonlevelval_ == &::google::protobuf::internal::kEmptyString) {
    cannonlevelval_ = new ::std::string;
  }
  cannonlevelval_->assign(value);
}
inline void FishLevelDesc::set_cannonlevelval(const char* value) {
  set_has_cannonlevelval();
  if (cannonlevelval_ == &::google::protobuf::internal::kEmptyString) {
    cannonlevelval_ = new ::std::string;
  }
  cannonlevelval_->assign(value);
}
inline void FishLevelDesc::set_cannonlevelval(const char* value, size_t size) {
  set_has_cannonlevelval();
  if (cannonlevelval_ == &::google::protobuf::internal::kEmptyString) {
    cannonlevelval_ = new ::std::string;
  }
  cannonlevelval_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FishLevelDesc::mutable_cannonlevelval() {
  set_has_cannonlevelval();
  if (cannonlevelval_ == &::google::protobuf::internal::kEmptyString) {
    cannonlevelval_ = new ::std::string;
  }
  return cannonlevelval_;
}
inline ::std::string* FishLevelDesc::release_cannonlevelval() {
  clear_has_cannonlevelval();
  if (cannonlevelval_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cannonlevelval_;
    cannonlevelval_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FishLevelDesc::set_allocated_cannonlevelval(::std::string* cannonlevelval) {
  if (cannonlevelval_ != &::google::protobuf::internal::kEmptyString) {
    delete cannonlevelval_;
  }
  if (cannonlevelval) {
    set_has_cannonlevelval();
    cannonlevelval_ = cannonlevelval;
  } else {
    clear_has_cannonlevelval();
    cannonlevelval_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 VecCannonLevelVal = 4;
inline int FishLevelDesc::veccannonlevelval_size() const {
  return veccannonlevelval_.size();
}
inline void FishLevelDesc::clear_veccannonlevelval() {
  veccannonlevelval_.Clear();
}
inline ::google::protobuf::int32 FishLevelDesc::veccannonlevelval(int index) const {
  return veccannonlevelval_.Get(index);
}
inline void FishLevelDesc::set_veccannonlevelval(int index, ::google::protobuf::int32 value) {
  veccannonlevelval_.Set(index, value);
}
inline void FishLevelDesc::add_veccannonlevelval(::google::protobuf::int32 value) {
  veccannonlevelval_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FishLevelDesc::veccannonlevelval() const {
  return veccannonlevelval_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FishLevelDesc::mutable_veccannonlevelval() {
  return &veccannonlevelval_;
}

// optional string CannonShowNum = 5;
inline bool FishLevelDesc::has_cannonshownum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FishLevelDesc::set_has_cannonshownum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FishLevelDesc::clear_has_cannonshownum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FishLevelDesc::clear_cannonshownum() {
  if (cannonshownum_ != &::google::protobuf::internal::kEmptyString) {
    cannonshownum_->clear();
  }
  clear_has_cannonshownum();
}
inline const ::std::string& FishLevelDesc::cannonshownum() const {
  return *cannonshownum_;
}
inline void FishLevelDesc::set_cannonshownum(const ::std::string& value) {
  set_has_cannonshownum();
  if (cannonshownum_ == &::google::protobuf::internal::kEmptyString) {
    cannonshownum_ = new ::std::string;
  }
  cannonshownum_->assign(value);
}
inline void FishLevelDesc::set_cannonshownum(const char* value) {
  set_has_cannonshownum();
  if (cannonshownum_ == &::google::protobuf::internal::kEmptyString) {
    cannonshownum_ = new ::std::string;
  }
  cannonshownum_->assign(value);
}
inline void FishLevelDesc::set_cannonshownum(const char* value, size_t size) {
  set_has_cannonshownum();
  if (cannonshownum_ == &::google::protobuf::internal::kEmptyString) {
    cannonshownum_ = new ::std::string;
  }
  cannonshownum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FishLevelDesc::mutable_cannonshownum() {
  set_has_cannonshownum();
  if (cannonshownum_ == &::google::protobuf::internal::kEmptyString) {
    cannonshownum_ = new ::std::string;
  }
  return cannonshownum_;
}
inline ::std::string* FishLevelDesc::release_cannonshownum() {
  clear_has_cannonshownum();
  if (cannonshownum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cannonshownum_;
    cannonshownum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FishLevelDesc::set_allocated_cannonshownum(::std::string* cannonshownum) {
  if (cannonshownum_ != &::google::protobuf::internal::kEmptyString) {
    delete cannonshownum_;
  }
  if (cannonshownum) {
    set_has_cannonshownum();
    cannonshownum_ = cannonshownum;
  } else {
    clear_has_cannonshownum();
    cannonshownum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 VecCannonShowNum = 6;
inline int FishLevelDesc::veccannonshownum_size() const {
  return veccannonshownum_.size();
}
inline void FishLevelDesc::clear_veccannonshownum() {
  veccannonshownum_.Clear();
}
inline ::google::protobuf::int32 FishLevelDesc::veccannonshownum(int index) const {
  return veccannonshownum_.Get(index);
}
inline void FishLevelDesc::set_veccannonshownum(int index, ::google::protobuf::int32 value) {
  veccannonshownum_.Set(index, value);
}
inline void FishLevelDesc::add_veccannonshownum(::google::protobuf::int32 value) {
  veccannonshownum_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FishLevelDesc::veccannonshownum() const {
  return veccannonshownum_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FishLevelDesc::mutable_veccannonshownum() {
  return &veccannonshownum_;
}

// optional int32 MinMoney = 7;
inline bool FishLevelDesc::has_minmoney() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FishLevelDesc::set_has_minmoney() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FishLevelDesc::clear_has_minmoney() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FishLevelDesc::clear_minmoney() {
  minmoney_ = 0;
  clear_has_minmoney();
}
inline ::google::protobuf::int32 FishLevelDesc::minmoney() const {
  return minmoney_;
}
inline void FishLevelDesc::set_minmoney(::google::protobuf::int32 value) {
  set_has_minmoney();
  minmoney_ = value;
}

// optional int32 MaxMoney = 8;
inline bool FishLevelDesc::has_maxmoney() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FishLevelDesc::set_has_maxmoney() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FishLevelDesc::clear_has_maxmoney() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FishLevelDesc::clear_maxmoney() {
  maxmoney_ = 0;
  clear_has_maxmoney();
}
inline ::google::protobuf::int32 FishLevelDesc::maxmoney() const {
  return maxmoney_;
}
inline void FishLevelDesc::set_maxmoney(::google::protobuf::int32 value) {
  set_has_maxmoney();
  maxmoney_ = value;
}

// optional int32 StartGame = 9;
inline bool FishLevelDesc::has_startgame() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FishLevelDesc::set_has_startgame() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FishLevelDesc::clear_has_startgame() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FishLevelDesc::clear_startgame() {
  startgame_ = 0;
  clear_has_startgame();
}
inline ::google::protobuf::int32 FishLevelDesc::startgame() const {
  return startgame_;
}
inline void FishLevelDesc::set_startgame(::google::protobuf::int32 value) {
  set_has_startgame();
  startgame_ = value;
}

// optional int32 Flag = 10;
inline bool FishLevelDesc::has_flag() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FishLevelDesc::set_has_flag() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FishLevelDesc::clear_has_flag() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FishLevelDesc::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 FishLevelDesc::flag() const {
  return flag_;
}
inline void FishLevelDesc::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// Sheet_FishLevelDesc

// repeated .proto_ff.FishLevelDesc FishLevelDesc_List = 1;
inline int Sheet_FishLevelDesc::fishleveldesc_list_size() const {
  return fishleveldesc_list_.size();
}
inline void Sheet_FishLevelDesc::clear_fishleveldesc_list() {
  fishleveldesc_list_.Clear();
}
inline const ::proto_ff::FishLevelDesc& Sheet_FishLevelDesc::fishleveldesc_list(int index) const {
  return fishleveldesc_list_.Get(index);
}
inline ::proto_ff::FishLevelDesc* Sheet_FishLevelDesc::mutable_fishleveldesc_list(int index) {
  return fishleveldesc_list_.Mutable(index);
}
inline ::proto_ff::FishLevelDesc* Sheet_FishLevelDesc::add_fishleveldesc_list() {
  return fishleveldesc_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FishLevelDesc >&
Sheet_FishLevelDesc::fishleveldesc_list() const {
  return fishleveldesc_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FishLevelDesc >*
Sheet_FishLevelDesc::mutable_fishleveldesc_list() {
  return &fishleveldesc_list_;
}

// -------------------------------------------------------------------

// FishConfigDesc

// optional int32 fish_id = 1;
inline bool FishConfigDesc::has_fish_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FishConfigDesc::set_has_fish_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FishConfigDesc::clear_has_fish_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FishConfigDesc::clear_fish_id() {
  fish_id_ = 0;
  clear_has_fish_id();
}
inline ::google::protobuf::int32 FishConfigDesc::fish_id() const {
  return fish_id_;
}
inline void FishConfigDesc::set_fish_id(::google::protobuf::int32 value) {
  set_has_fish_id();
  fish_id_ = value;
}

// optional int32 fish_type = 2;
inline bool FishConfigDesc::has_fish_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FishConfigDesc::set_has_fish_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FishConfigDesc::clear_has_fish_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FishConfigDesc::clear_fish_type() {
  fish_type_ = 0;
  clear_has_fish_type();
}
inline ::google::protobuf::int32 FishConfigDesc::fish_type() const {
  return fish_type_;
}
inline void FishConfigDesc::set_fish_type(::google::protobuf::int32 value) {
  set_has_fish_type();
  fish_type_ = value;
}

// optional int32 build_fish_type = 3;
inline bool FishConfigDesc::has_build_fish_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FishConfigDesc::set_has_build_fish_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FishConfigDesc::clear_has_build_fish_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FishConfigDesc::clear_build_fish_type() {
  build_fish_type_ = 0;
  clear_has_build_fish_type();
}
inline ::google::protobuf::int32 FishConfigDesc::build_fish_type() const {
  return build_fish_type_;
}
inline void FishConfigDesc::set_build_fish_type(::google::protobuf::int32 value) {
  set_has_build_fish_type();
  build_fish_type_ = value;
}

// optional int32 ratio_min = 4;
inline bool FishConfigDesc::has_ratio_min() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FishConfigDesc::set_has_ratio_min() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FishConfigDesc::clear_has_ratio_min() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FishConfigDesc::clear_ratio_min() {
  ratio_min_ = 0;
  clear_has_ratio_min();
}
inline ::google::protobuf::int32 FishConfigDesc::ratio_min() const {
  return ratio_min_;
}
inline void FishConfigDesc::set_ratio_min(::google::protobuf::int32 value) {
  set_has_ratio_min();
  ratio_min_ = value;
}

// optional int32 ratio_max = 5;
inline bool FishConfigDesc::has_ratio_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FishConfigDesc::set_has_ratio_max() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FishConfigDesc::clear_has_ratio_max() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FishConfigDesc::clear_ratio_max() {
  ratio_max_ = 0;
  clear_has_ratio_max();
}
inline ::google::protobuf::int32 FishConfigDesc::ratio_max() const {
  return ratio_max_;
}
inline void FishConfigDesc::set_ratio_max(::google::protobuf::int32 value) {
  set_has_ratio_max();
  ratio_max_ = value;
}

// optional int32 double_award_min_ratio = 6;
inline bool FishConfigDesc::has_double_award_min_ratio() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FishConfigDesc::set_has_double_award_min_ratio() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FishConfigDesc::clear_has_double_award_min_ratio() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FishConfigDesc::clear_double_award_min_ratio() {
  double_award_min_ratio_ = 0;
  clear_has_double_award_min_ratio();
}
inline ::google::protobuf::int32 FishConfigDesc::double_award_min_ratio() const {
  return double_award_min_ratio_;
}
inline void FishConfigDesc::set_double_award_min_ratio(::google::protobuf::int32 value) {
  set_has_double_award_min_ratio();
  double_award_min_ratio_ = value;
}

// optional int32 child_fish_count = 7;
inline bool FishConfigDesc::has_child_fish_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FishConfigDesc::set_has_child_fish_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FishConfigDesc::clear_has_child_fish_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FishConfigDesc::clear_child_fish_count() {
  child_fish_count_ = 0;
  clear_has_child_fish_count();
}
inline ::google::protobuf::int32 FishConfigDesc::child_fish_count() const {
  return child_fish_count_;
}
inline void FishConfigDesc::set_child_fish_count(::google::protobuf::int32 value) {
  set_has_child_fish_count();
  child_fish_count_ = value;
}

// repeated string child_fish_ids = 8;
inline int FishConfigDesc::child_fish_ids_size() const {
  return child_fish_ids_.size();
}
inline void FishConfigDesc::clear_child_fish_ids() {
  child_fish_ids_.Clear();
}
inline const ::std::string& FishConfigDesc::child_fish_ids(int index) const {
  return child_fish_ids_.Get(index);
}
inline ::std::string* FishConfigDesc::mutable_child_fish_ids(int index) {
  return child_fish_ids_.Mutable(index);
}
inline void FishConfigDesc::set_child_fish_ids(int index, const ::std::string& value) {
  child_fish_ids_.Mutable(index)->assign(value);
}
inline void FishConfigDesc::set_child_fish_ids(int index, const char* value) {
  child_fish_ids_.Mutable(index)->assign(value);
}
inline void FishConfigDesc::set_child_fish_ids(int index, const char* value, size_t size) {
  child_fish_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FishConfigDesc::add_child_fish_ids() {
  return child_fish_ids_.Add();
}
inline void FishConfigDesc::add_child_fish_ids(const ::std::string& value) {
  child_fish_ids_.Add()->assign(value);
}
inline void FishConfigDesc::add_child_fish_ids(const char* value) {
  child_fish_ids_.Add()->assign(value);
}
inline void FishConfigDesc::add_child_fish_ids(const char* value, size_t size) {
  child_fish_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FishConfigDesc::child_fish_ids() const {
  return child_fish_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FishConfigDesc::mutable_child_fish_ids() {
  return &child_fish_ids_;
}

// optional int32 damage_radius = 9;
inline bool FishConfigDesc::has_damage_radius() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FishConfigDesc::set_has_damage_radius() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FishConfigDesc::clear_has_damage_radius() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FishConfigDesc::clear_damage_radius() {
  damage_radius_ = 0;
  clear_has_damage_radius();
}
inline ::google::protobuf::int32 FishConfigDesc::damage_radius() const {
  return damage_radius_;
}
inline void FishConfigDesc::set_damage_radius(::google::protobuf::int32 value) {
  set_has_damage_radius();
  damage_radius_ = value;
}

// optional string damage_fish_ids = 10;
inline bool FishConfigDesc::has_damage_fish_ids() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FishConfigDesc::set_has_damage_fish_ids() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FishConfigDesc::clear_has_damage_fish_ids() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FishConfigDesc::clear_damage_fish_ids() {
  if (damage_fish_ids_ != &::google::protobuf::internal::kEmptyString) {
    damage_fish_ids_->clear();
  }
  clear_has_damage_fish_ids();
}
inline const ::std::string& FishConfigDesc::damage_fish_ids() const {
  return *damage_fish_ids_;
}
inline void FishConfigDesc::set_damage_fish_ids(const ::std::string& value) {
  set_has_damage_fish_ids();
  if (damage_fish_ids_ == &::google::protobuf::internal::kEmptyString) {
    damage_fish_ids_ = new ::std::string;
  }
  damage_fish_ids_->assign(value);
}
inline void FishConfigDesc::set_damage_fish_ids(const char* value) {
  set_has_damage_fish_ids();
  if (damage_fish_ids_ == &::google::protobuf::internal::kEmptyString) {
    damage_fish_ids_ = new ::std::string;
  }
  damage_fish_ids_->assign(value);
}
inline void FishConfigDesc::set_damage_fish_ids(const char* value, size_t size) {
  set_has_damage_fish_ids();
  if (damage_fish_ids_ == &::google::protobuf::internal::kEmptyString) {
    damage_fish_ids_ = new ::std::string;
  }
  damage_fish_ids_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FishConfigDesc::mutable_damage_fish_ids() {
  set_has_damage_fish_ids();
  if (damage_fish_ids_ == &::google::protobuf::internal::kEmptyString) {
    damage_fish_ids_ = new ::std::string;
  }
  return damage_fish_ids_;
}
inline ::std::string* FishConfigDesc::release_damage_fish_ids() {
  clear_has_damage_fish_ids();
  if (damage_fish_ids_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = damage_fish_ids_;
    damage_fish_ids_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FishConfigDesc::set_allocated_damage_fish_ids(::std::string* damage_fish_ids) {
  if (damage_fish_ids_ != &::google::protobuf::internal::kEmptyString) {
    delete damage_fish_ids_;
  }
  if (damage_fish_ids) {
    set_has_damage_fish_ids();
    damage_fish_ids_ = damage_fish_ids;
  } else {
    clear_has_damage_fish_ids();
    damage_fish_ids_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Sheet_FishConfigDesc

// repeated .proto_ff.FishConfigDesc FishConfigDesc_List = 1;
inline int Sheet_FishConfigDesc::fishconfigdesc_list_size() const {
  return fishconfigdesc_list_.size();
}
inline void Sheet_FishConfigDesc::clear_fishconfigdesc_list() {
  fishconfigdesc_list_.Clear();
}
inline const ::proto_ff::FishConfigDesc& Sheet_FishConfigDesc::fishconfigdesc_list(int index) const {
  return fishconfigdesc_list_.Get(index);
}
inline ::proto_ff::FishConfigDesc* Sheet_FishConfigDesc::mutable_fishconfigdesc_list(int index) {
  return fishconfigdesc_list_.Mutable(index);
}
inline ::proto_ff::FishConfigDesc* Sheet_FishConfigDesc::add_fishconfigdesc_list() {
  return fishconfigdesc_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FishConfigDesc >&
Sheet_FishConfigDesc::fishconfigdesc_list() const {
  return fishconfigdesc_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FishConfigDesc >*
Sheet_FishConfigDesc::mutable_fishconfigdesc_list() {
  return &fishconfigdesc_list_;
}

// -------------------------------------------------------------------

// GunValueConfig

// optional int32 id = 1;
inline bool GunValueConfig::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GunValueConfig::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GunValueConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GunValueConfig::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 GunValueConfig::id() const {
  return id_;
}
inline void GunValueConfig::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 value = 2;
inline bool GunValueConfig::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GunValueConfig::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GunValueConfig::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GunValueConfig::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 GunValueConfig::value() const {
  return value_;
}
inline void GunValueConfig::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// optional int32 room_id = 3;
inline bool GunValueConfig::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GunValueConfig::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GunValueConfig::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GunValueConfig::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 GunValueConfig::room_id() const {
  return room_id_;
}
inline void GunValueConfig::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional int32 gun_id = 4;
inline bool GunValueConfig::has_gun_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GunValueConfig::set_has_gun_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GunValueConfig::clear_has_gun_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GunValueConfig::clear_gun_id() {
  gun_id_ = 0;
  clear_has_gun_id();
}
inline ::google::protobuf::int32 GunValueConfig::gun_id() const {
  return gun_id_;
}
inline void GunValueConfig::set_gun_id(::google::protobuf::int32 value) {
  set_has_gun_id();
  gun_id_ = value;
}

// -------------------------------------------------------------------

// Sheet_GunValueConfig

// repeated .proto_ff.GunValueConfig GunValueConfig_List = 1;
inline int Sheet_GunValueConfig::gunvalueconfig_list_size() const {
  return gunvalueconfig_list_.size();
}
inline void Sheet_GunValueConfig::clear_gunvalueconfig_list() {
  gunvalueconfig_list_.Clear();
}
inline const ::proto_ff::GunValueConfig& Sheet_GunValueConfig::gunvalueconfig_list(int index) const {
  return gunvalueconfig_list_.Get(index);
}
inline ::proto_ff::GunValueConfig* Sheet_GunValueConfig::mutable_gunvalueconfig_list(int index) {
  return gunvalueconfig_list_.Mutable(index);
}
inline ::proto_ff::GunValueConfig* Sheet_GunValueConfig::add_gunvalueconfig_list() {
  return gunvalueconfig_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GunValueConfig >&
Sheet_GunValueConfig::gunvalueconfig_list() const {
  return gunvalueconfig_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GunValueConfig >*
Sheet_GunValueConfig::mutable_gunvalueconfig_list() {
  return &gunvalueconfig_list_;
}

// -------------------------------------------------------------------

// FishAlgoDesc

// optional int32 AlgoID = 1;
inline bool FishAlgoDesc::has_algoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FishAlgoDesc::set_has_algoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FishAlgoDesc::clear_has_algoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FishAlgoDesc::clear_algoid() {
  algoid_ = 0;
  clear_has_algoid();
}
inline ::google::protobuf::int32 FishAlgoDesc::algoid() const {
  return algoid_;
}
inline void FishAlgoDesc::set_algoid(::google::protobuf::int32 value) {
  set_has_algoid();
  algoid_ = value;
}

// optional int32 GamePlatform = 2;
inline bool FishAlgoDesc::has_gameplatform() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FishAlgoDesc::set_has_gameplatform() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FishAlgoDesc::clear_has_gameplatform() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FishAlgoDesc::clear_gameplatform() {
  gameplatform_ = 0;
  clear_has_gameplatform();
}
inline ::google::protobuf::int32 FishAlgoDesc::gameplatform() const {
  return gameplatform_;
}
inline void FishAlgoDesc::set_gameplatform(::google::protobuf::int32 value) {
  set_has_gameplatform();
  gameplatform_ = value;
}

// optional string AlgoName = 3;
inline bool FishAlgoDesc::has_algoname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FishAlgoDesc::set_has_algoname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FishAlgoDesc::clear_has_algoname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FishAlgoDesc::clear_algoname() {
  if (algoname_ != &::google::protobuf::internal::kEmptyString) {
    algoname_->clear();
  }
  clear_has_algoname();
}
inline const ::std::string& FishAlgoDesc::algoname() const {
  return *algoname_;
}
inline void FishAlgoDesc::set_algoname(const ::std::string& value) {
  set_has_algoname();
  if (algoname_ == &::google::protobuf::internal::kEmptyString) {
    algoname_ = new ::std::string;
  }
  algoname_->assign(value);
}
inline void FishAlgoDesc::set_algoname(const char* value) {
  set_has_algoname();
  if (algoname_ == &::google::protobuf::internal::kEmptyString) {
    algoname_ = new ::std::string;
  }
  algoname_->assign(value);
}
inline void FishAlgoDesc::set_algoname(const char* value, size_t size) {
  set_has_algoname();
  if (algoname_ == &::google::protobuf::internal::kEmptyString) {
    algoname_ = new ::std::string;
  }
  algoname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FishAlgoDesc::mutable_algoname() {
  set_has_algoname();
  if (algoname_ == &::google::protobuf::internal::kEmptyString) {
    algoname_ = new ::std::string;
  }
  return algoname_;
}
inline ::std::string* FishAlgoDesc::release_algoname() {
  clear_has_algoname();
  if (algoname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = algoname_;
    algoname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FishAlgoDesc::set_allocated_algoname(::std::string* algoname) {
  if (algoname_ != &::google::protobuf::internal::kEmptyString) {
    delete algoname_;
  }
  if (algoname) {
    set_has_algoname();
    algoname_ = algoname;
  } else {
    clear_has_algoname();
    algoname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string AlgoDesc = 4;
inline bool FishAlgoDesc::has_algodesc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FishAlgoDesc::set_has_algodesc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FishAlgoDesc::clear_has_algodesc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FishAlgoDesc::clear_algodesc() {
  if (algodesc_ != &::google::protobuf::internal::kEmptyString) {
    algodesc_->clear();
  }
  clear_has_algodesc();
}
inline const ::std::string& FishAlgoDesc::algodesc() const {
  return *algodesc_;
}
inline void FishAlgoDesc::set_algodesc(const ::std::string& value) {
  set_has_algodesc();
  if (algodesc_ == &::google::protobuf::internal::kEmptyString) {
    algodesc_ = new ::std::string;
  }
  algodesc_->assign(value);
}
inline void FishAlgoDesc::set_algodesc(const char* value) {
  set_has_algodesc();
  if (algodesc_ == &::google::protobuf::internal::kEmptyString) {
    algodesc_ = new ::std::string;
  }
  algodesc_->assign(value);
}
inline void FishAlgoDesc::set_algodesc(const char* value, size_t size) {
  set_has_algodesc();
  if (algodesc_ == &::google::protobuf::internal::kEmptyString) {
    algodesc_ = new ::std::string;
  }
  algodesc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FishAlgoDesc::mutable_algodesc() {
  set_has_algodesc();
  if (algodesc_ == &::google::protobuf::internal::kEmptyString) {
    algodesc_ = new ::std::string;
  }
  return algodesc_;
}
inline ::std::string* FishAlgoDesc::release_algodesc() {
  clear_has_algodesc();
  if (algodesc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = algodesc_;
    algodesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FishAlgoDesc::set_allocated_algodesc(::std::string* algodesc) {
  if (algodesc_ != &::google::protobuf::internal::kEmptyString) {
    delete algodesc_;
  }
  if (algodesc) {
    set_has_algodesc();
    algodesc_ = algodesc;
  } else {
    clear_has_algodesc();
    algodesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 ChangeTimes = 5;
inline bool FishAlgoDesc::has_changetimes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FishAlgoDesc::set_has_changetimes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FishAlgoDesc::clear_has_changetimes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FishAlgoDesc::clear_changetimes() {
  changetimes_ = GOOGLE_LONGLONG(0);
  clear_has_changetimes();
}
inline ::google::protobuf::int64 FishAlgoDesc::changetimes() const {
  return changetimes_;
}
inline void FishAlgoDesc::set_changetimes(::google::protobuf::int64 value) {
  set_has_changetimes();
  changetimes_ = value;
}

// optional int64 ChangeLiuShui = 6;
inline bool FishAlgoDesc::has_changeliushui() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FishAlgoDesc::set_has_changeliushui() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FishAlgoDesc::clear_has_changeliushui() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FishAlgoDesc::clear_changeliushui() {
  changeliushui_ = GOOGLE_LONGLONG(0);
  clear_has_changeliushui();
}
inline ::google::protobuf::int64 FishAlgoDesc::changeliushui() const {
  return changeliushui_;
}
inline void FishAlgoDesc::set_changeliushui(::google::protobuf::int64 value) {
  set_has_changeliushui();
  changeliushui_ = value;
}

// optional int64 Chang1_RangeLow = 7;
inline bool FishAlgoDesc::has_chang1_rangelow() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FishAlgoDesc::set_has_chang1_rangelow() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FishAlgoDesc::clear_has_chang1_rangelow() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FishAlgoDesc::clear_chang1_rangelow() {
  chang1_rangelow_ = GOOGLE_LONGLONG(0);
  clear_has_chang1_rangelow();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang1_rangelow() const {
  return chang1_rangelow_;
}
inline void FishAlgoDesc::set_chang1_rangelow(::google::protobuf::int64 value) {
  set_has_chang1_rangelow();
  chang1_rangelow_ = value;
}

// optional int64 Chang1_RangeHigh = 8;
inline bool FishAlgoDesc::has_chang1_rangehigh() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FishAlgoDesc::set_has_chang1_rangehigh() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FishAlgoDesc::clear_has_chang1_rangehigh() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FishAlgoDesc::clear_chang1_rangehigh() {
  chang1_rangehigh_ = GOOGLE_LONGLONG(0);
  clear_has_chang1_rangehigh();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang1_rangehigh() const {
  return chang1_rangehigh_;
}
inline void FishAlgoDesc::set_chang1_rangehigh(::google::protobuf::int64 value) {
  set_has_chang1_rangehigh();
  chang1_rangehigh_ = value;
}

// optional int64 Chang1_Chi1 = 9;
inline bool FishAlgoDesc::has_chang1_chi1() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FishAlgoDesc::set_has_chang1_chi1() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FishAlgoDesc::clear_has_chang1_chi1() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FishAlgoDesc::clear_chang1_chi1() {
  chang1_chi1_ = GOOGLE_LONGLONG(0);
  clear_has_chang1_chi1();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang1_chi1() const {
  return chang1_chi1_;
}
inline void FishAlgoDesc::set_chang1_chi1(::google::protobuf::int64 value) {
  set_has_chang1_chi1();
  chang1_chi1_ = value;
}

// optional int64 Chang1_Chi2 = 10;
inline bool FishAlgoDesc::has_chang1_chi2() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FishAlgoDesc::set_has_chang1_chi2() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FishAlgoDesc::clear_has_chang1_chi2() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FishAlgoDesc::clear_chang1_chi2() {
  chang1_chi2_ = GOOGLE_LONGLONG(0);
  clear_has_chang1_chi2();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang1_chi2() const {
  return chang1_chi2_;
}
inline void FishAlgoDesc::set_chang1_chi2(::google::protobuf::int64 value) {
  set_has_chang1_chi2();
  chang1_chi2_ = value;
}

// optional int64 Chang1_Chi3 = 11;
inline bool FishAlgoDesc::has_chang1_chi3() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FishAlgoDesc::set_has_chang1_chi3() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FishAlgoDesc::clear_has_chang1_chi3() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FishAlgoDesc::clear_chang1_chi3() {
  chang1_chi3_ = GOOGLE_LONGLONG(0);
  clear_has_chang1_chi3();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang1_chi3() const {
  return chang1_chi3_;
}
inline void FishAlgoDesc::set_chang1_chi3(::google::protobuf::int64 value) {
  set_has_chang1_chi3();
  chang1_chi3_ = value;
}

// optional int64 Chang1_Fang1 = 12;
inline bool FishAlgoDesc::has_chang1_fang1() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FishAlgoDesc::set_has_chang1_fang1() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FishAlgoDesc::clear_has_chang1_fang1() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FishAlgoDesc::clear_chang1_fang1() {
  chang1_fang1_ = GOOGLE_LONGLONG(0);
  clear_has_chang1_fang1();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang1_fang1() const {
  return chang1_fang1_;
}
inline void FishAlgoDesc::set_chang1_fang1(::google::protobuf::int64 value) {
  set_has_chang1_fang1();
  chang1_fang1_ = value;
}

// optional int64 Chang1_Fang2 = 13;
inline bool FishAlgoDesc::has_chang1_fang2() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FishAlgoDesc::set_has_chang1_fang2() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FishAlgoDesc::clear_has_chang1_fang2() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FishAlgoDesc::clear_chang1_fang2() {
  chang1_fang2_ = GOOGLE_LONGLONG(0);
  clear_has_chang1_fang2();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang1_fang2() const {
  return chang1_fang2_;
}
inline void FishAlgoDesc::set_chang1_fang2(::google::protobuf::int64 value) {
  set_has_chang1_fang2();
  chang1_fang2_ = value;
}

// optional int64 Chang1_Fang3 = 14;
inline bool FishAlgoDesc::has_chang1_fang3() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FishAlgoDesc::set_has_chang1_fang3() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FishAlgoDesc::clear_has_chang1_fang3() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FishAlgoDesc::clear_chang1_fang3() {
  chang1_fang3_ = GOOGLE_LONGLONG(0);
  clear_has_chang1_fang3();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang1_fang3() const {
  return chang1_fang3_;
}
inline void FishAlgoDesc::set_chang1_fang3(::google::protobuf::int64 value) {
  set_has_chang1_fang3();
  chang1_fang3_ = value;
}

// optional int64 Chang1_RateChi1 = 15;
inline bool FishAlgoDesc::has_chang1_ratechi1() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FishAlgoDesc::set_has_chang1_ratechi1() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FishAlgoDesc::clear_has_chang1_ratechi1() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FishAlgoDesc::clear_chang1_ratechi1() {
  chang1_ratechi1_ = GOOGLE_LONGLONG(0);
  clear_has_chang1_ratechi1();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang1_ratechi1() const {
  return chang1_ratechi1_;
}
inline void FishAlgoDesc::set_chang1_ratechi1(::google::protobuf::int64 value) {
  set_has_chang1_ratechi1();
  chang1_ratechi1_ = value;
}

// optional int64 Chang1_RateChi2 = 16;
inline bool FishAlgoDesc::has_chang1_ratechi2() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FishAlgoDesc::set_has_chang1_ratechi2() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FishAlgoDesc::clear_has_chang1_ratechi2() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FishAlgoDesc::clear_chang1_ratechi2() {
  chang1_ratechi2_ = GOOGLE_LONGLONG(0);
  clear_has_chang1_ratechi2();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang1_ratechi2() const {
  return chang1_ratechi2_;
}
inline void FishAlgoDesc::set_chang1_ratechi2(::google::protobuf::int64 value) {
  set_has_chang1_ratechi2();
  chang1_ratechi2_ = value;
}

// optional int64 Chang1_RateChi3 = 17;
inline bool FishAlgoDesc::has_chang1_ratechi3() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void FishAlgoDesc::set_has_chang1_ratechi3() {
  _has_bits_[0] |= 0x00010000u;
}
inline void FishAlgoDesc::clear_has_chang1_ratechi3() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void FishAlgoDesc::clear_chang1_ratechi3() {
  chang1_ratechi3_ = GOOGLE_LONGLONG(0);
  clear_has_chang1_ratechi3();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang1_ratechi3() const {
  return chang1_ratechi3_;
}
inline void FishAlgoDesc::set_chang1_ratechi3(::google::protobuf::int64 value) {
  set_has_chang1_ratechi3();
  chang1_ratechi3_ = value;
}

// optional int64 Chang1_RatePing = 18;
inline bool FishAlgoDesc::has_chang1_rateping() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void FishAlgoDesc::set_has_chang1_rateping() {
  _has_bits_[0] |= 0x00020000u;
}
inline void FishAlgoDesc::clear_has_chang1_rateping() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void FishAlgoDesc::clear_chang1_rateping() {
  chang1_rateping_ = GOOGLE_LONGLONG(0);
  clear_has_chang1_rateping();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang1_rateping() const {
  return chang1_rateping_;
}
inline void FishAlgoDesc::set_chang1_rateping(::google::protobuf::int64 value) {
  set_has_chang1_rateping();
  chang1_rateping_ = value;
}

// optional int64 Chang1_RateFang1 = 19;
inline bool FishAlgoDesc::has_chang1_ratefang1() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void FishAlgoDesc::set_has_chang1_ratefang1() {
  _has_bits_[0] |= 0x00040000u;
}
inline void FishAlgoDesc::clear_has_chang1_ratefang1() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void FishAlgoDesc::clear_chang1_ratefang1() {
  chang1_ratefang1_ = GOOGLE_LONGLONG(0);
  clear_has_chang1_ratefang1();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang1_ratefang1() const {
  return chang1_ratefang1_;
}
inline void FishAlgoDesc::set_chang1_ratefang1(::google::protobuf::int64 value) {
  set_has_chang1_ratefang1();
  chang1_ratefang1_ = value;
}

// optional int64 Chang1_RateFang2 = 20;
inline bool FishAlgoDesc::has_chang1_ratefang2() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void FishAlgoDesc::set_has_chang1_ratefang2() {
  _has_bits_[0] |= 0x00080000u;
}
inline void FishAlgoDesc::clear_has_chang1_ratefang2() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void FishAlgoDesc::clear_chang1_ratefang2() {
  chang1_ratefang2_ = GOOGLE_LONGLONG(0);
  clear_has_chang1_ratefang2();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang1_ratefang2() const {
  return chang1_ratefang2_;
}
inline void FishAlgoDesc::set_chang1_ratefang2(::google::protobuf::int64 value) {
  set_has_chang1_ratefang2();
  chang1_ratefang2_ = value;
}

// optional int64 Chang1_RateFang3 = 21;
inline bool FishAlgoDesc::has_chang1_ratefang3() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void FishAlgoDesc::set_has_chang1_ratefang3() {
  _has_bits_[0] |= 0x00100000u;
}
inline void FishAlgoDesc::clear_has_chang1_ratefang3() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void FishAlgoDesc::clear_chang1_ratefang3() {
  chang1_ratefang3_ = GOOGLE_LONGLONG(0);
  clear_has_chang1_ratefang3();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang1_ratefang3() const {
  return chang1_ratefang3_;
}
inline void FishAlgoDesc::set_chang1_ratefang3(::google::protobuf::int64 value) {
  set_has_chang1_ratefang3();
  chang1_ratefang3_ = value;
}

// optional int64 Chang2_RangeLow = 22;
inline bool FishAlgoDesc::has_chang2_rangelow() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void FishAlgoDesc::set_has_chang2_rangelow() {
  _has_bits_[0] |= 0x00200000u;
}
inline void FishAlgoDesc::clear_has_chang2_rangelow() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void FishAlgoDesc::clear_chang2_rangelow() {
  chang2_rangelow_ = GOOGLE_LONGLONG(0);
  clear_has_chang2_rangelow();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang2_rangelow() const {
  return chang2_rangelow_;
}
inline void FishAlgoDesc::set_chang2_rangelow(::google::protobuf::int64 value) {
  set_has_chang2_rangelow();
  chang2_rangelow_ = value;
}

// optional int64 Chang2_RangeHigh = 23;
inline bool FishAlgoDesc::has_chang2_rangehigh() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void FishAlgoDesc::set_has_chang2_rangehigh() {
  _has_bits_[0] |= 0x00400000u;
}
inline void FishAlgoDesc::clear_has_chang2_rangehigh() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void FishAlgoDesc::clear_chang2_rangehigh() {
  chang2_rangehigh_ = GOOGLE_LONGLONG(0);
  clear_has_chang2_rangehigh();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang2_rangehigh() const {
  return chang2_rangehigh_;
}
inline void FishAlgoDesc::set_chang2_rangehigh(::google::protobuf::int64 value) {
  set_has_chang2_rangehigh();
  chang2_rangehigh_ = value;
}

// optional int64 Chang2_Chi1 = 24;
inline bool FishAlgoDesc::has_chang2_chi1() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void FishAlgoDesc::set_has_chang2_chi1() {
  _has_bits_[0] |= 0x00800000u;
}
inline void FishAlgoDesc::clear_has_chang2_chi1() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void FishAlgoDesc::clear_chang2_chi1() {
  chang2_chi1_ = GOOGLE_LONGLONG(0);
  clear_has_chang2_chi1();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang2_chi1() const {
  return chang2_chi1_;
}
inline void FishAlgoDesc::set_chang2_chi1(::google::protobuf::int64 value) {
  set_has_chang2_chi1();
  chang2_chi1_ = value;
}

// optional int64 Chang2_Chi2 = 25;
inline bool FishAlgoDesc::has_chang2_chi2() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void FishAlgoDesc::set_has_chang2_chi2() {
  _has_bits_[0] |= 0x01000000u;
}
inline void FishAlgoDesc::clear_has_chang2_chi2() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void FishAlgoDesc::clear_chang2_chi2() {
  chang2_chi2_ = GOOGLE_LONGLONG(0);
  clear_has_chang2_chi2();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang2_chi2() const {
  return chang2_chi2_;
}
inline void FishAlgoDesc::set_chang2_chi2(::google::protobuf::int64 value) {
  set_has_chang2_chi2();
  chang2_chi2_ = value;
}

// optional int64 Chang2_Chi3 = 26;
inline bool FishAlgoDesc::has_chang2_chi3() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void FishAlgoDesc::set_has_chang2_chi3() {
  _has_bits_[0] |= 0x02000000u;
}
inline void FishAlgoDesc::clear_has_chang2_chi3() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void FishAlgoDesc::clear_chang2_chi3() {
  chang2_chi3_ = GOOGLE_LONGLONG(0);
  clear_has_chang2_chi3();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang2_chi3() const {
  return chang2_chi3_;
}
inline void FishAlgoDesc::set_chang2_chi3(::google::protobuf::int64 value) {
  set_has_chang2_chi3();
  chang2_chi3_ = value;
}

// optional int64 Chang2_Fang1 = 27;
inline bool FishAlgoDesc::has_chang2_fang1() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void FishAlgoDesc::set_has_chang2_fang1() {
  _has_bits_[0] |= 0x04000000u;
}
inline void FishAlgoDesc::clear_has_chang2_fang1() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void FishAlgoDesc::clear_chang2_fang1() {
  chang2_fang1_ = GOOGLE_LONGLONG(0);
  clear_has_chang2_fang1();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang2_fang1() const {
  return chang2_fang1_;
}
inline void FishAlgoDesc::set_chang2_fang1(::google::protobuf::int64 value) {
  set_has_chang2_fang1();
  chang2_fang1_ = value;
}

// optional int64 Chang2_Fang2 = 28;
inline bool FishAlgoDesc::has_chang2_fang2() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void FishAlgoDesc::set_has_chang2_fang2() {
  _has_bits_[0] |= 0x08000000u;
}
inline void FishAlgoDesc::clear_has_chang2_fang2() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void FishAlgoDesc::clear_chang2_fang2() {
  chang2_fang2_ = GOOGLE_LONGLONG(0);
  clear_has_chang2_fang2();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang2_fang2() const {
  return chang2_fang2_;
}
inline void FishAlgoDesc::set_chang2_fang2(::google::protobuf::int64 value) {
  set_has_chang2_fang2();
  chang2_fang2_ = value;
}

// optional int64 Chang2_Fang3 = 29;
inline bool FishAlgoDesc::has_chang2_fang3() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void FishAlgoDesc::set_has_chang2_fang3() {
  _has_bits_[0] |= 0x10000000u;
}
inline void FishAlgoDesc::clear_has_chang2_fang3() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void FishAlgoDesc::clear_chang2_fang3() {
  chang2_fang3_ = GOOGLE_LONGLONG(0);
  clear_has_chang2_fang3();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang2_fang3() const {
  return chang2_fang3_;
}
inline void FishAlgoDesc::set_chang2_fang3(::google::protobuf::int64 value) {
  set_has_chang2_fang3();
  chang2_fang3_ = value;
}

// optional int64 Chang2_RateChi1 = 30;
inline bool FishAlgoDesc::has_chang2_ratechi1() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void FishAlgoDesc::set_has_chang2_ratechi1() {
  _has_bits_[0] |= 0x20000000u;
}
inline void FishAlgoDesc::clear_has_chang2_ratechi1() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void FishAlgoDesc::clear_chang2_ratechi1() {
  chang2_ratechi1_ = GOOGLE_LONGLONG(0);
  clear_has_chang2_ratechi1();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang2_ratechi1() const {
  return chang2_ratechi1_;
}
inline void FishAlgoDesc::set_chang2_ratechi1(::google::protobuf::int64 value) {
  set_has_chang2_ratechi1();
  chang2_ratechi1_ = value;
}

// optional int64 Chang2_RateChi2 = 31;
inline bool FishAlgoDesc::has_chang2_ratechi2() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void FishAlgoDesc::set_has_chang2_ratechi2() {
  _has_bits_[0] |= 0x40000000u;
}
inline void FishAlgoDesc::clear_has_chang2_ratechi2() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void FishAlgoDesc::clear_chang2_ratechi2() {
  chang2_ratechi2_ = GOOGLE_LONGLONG(0);
  clear_has_chang2_ratechi2();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang2_ratechi2() const {
  return chang2_ratechi2_;
}
inline void FishAlgoDesc::set_chang2_ratechi2(::google::protobuf::int64 value) {
  set_has_chang2_ratechi2();
  chang2_ratechi2_ = value;
}

// optional int64 Chang2_RateChi3 = 32;
inline bool FishAlgoDesc::has_chang2_ratechi3() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void FishAlgoDesc::set_has_chang2_ratechi3() {
  _has_bits_[0] |= 0x80000000u;
}
inline void FishAlgoDesc::clear_has_chang2_ratechi3() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void FishAlgoDesc::clear_chang2_ratechi3() {
  chang2_ratechi3_ = GOOGLE_LONGLONG(0);
  clear_has_chang2_ratechi3();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang2_ratechi3() const {
  return chang2_ratechi3_;
}
inline void FishAlgoDesc::set_chang2_ratechi3(::google::protobuf::int64 value) {
  set_has_chang2_ratechi3();
  chang2_ratechi3_ = value;
}

// optional int64 Chang2_RatePing = 33;
inline bool FishAlgoDesc::has_chang2_rateping() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void FishAlgoDesc::set_has_chang2_rateping() {
  _has_bits_[1] |= 0x00000001u;
}
inline void FishAlgoDesc::clear_has_chang2_rateping() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void FishAlgoDesc::clear_chang2_rateping() {
  chang2_rateping_ = GOOGLE_LONGLONG(0);
  clear_has_chang2_rateping();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang2_rateping() const {
  return chang2_rateping_;
}
inline void FishAlgoDesc::set_chang2_rateping(::google::protobuf::int64 value) {
  set_has_chang2_rateping();
  chang2_rateping_ = value;
}

// optional int64 Chang2_RateFang1 = 34;
inline bool FishAlgoDesc::has_chang2_ratefang1() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void FishAlgoDesc::set_has_chang2_ratefang1() {
  _has_bits_[1] |= 0x00000002u;
}
inline void FishAlgoDesc::clear_has_chang2_ratefang1() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void FishAlgoDesc::clear_chang2_ratefang1() {
  chang2_ratefang1_ = GOOGLE_LONGLONG(0);
  clear_has_chang2_ratefang1();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang2_ratefang1() const {
  return chang2_ratefang1_;
}
inline void FishAlgoDesc::set_chang2_ratefang1(::google::protobuf::int64 value) {
  set_has_chang2_ratefang1();
  chang2_ratefang1_ = value;
}

// optional int64 Chang2_RateFang2 = 35;
inline bool FishAlgoDesc::has_chang2_ratefang2() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void FishAlgoDesc::set_has_chang2_ratefang2() {
  _has_bits_[1] |= 0x00000004u;
}
inline void FishAlgoDesc::clear_has_chang2_ratefang2() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void FishAlgoDesc::clear_chang2_ratefang2() {
  chang2_ratefang2_ = GOOGLE_LONGLONG(0);
  clear_has_chang2_ratefang2();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang2_ratefang2() const {
  return chang2_ratefang2_;
}
inline void FishAlgoDesc::set_chang2_ratefang2(::google::protobuf::int64 value) {
  set_has_chang2_ratefang2();
  chang2_ratefang2_ = value;
}

// optional int64 Chang2_RateFang3 = 36;
inline bool FishAlgoDesc::has_chang2_ratefang3() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void FishAlgoDesc::set_has_chang2_ratefang3() {
  _has_bits_[1] |= 0x00000008u;
}
inline void FishAlgoDesc::clear_has_chang2_ratefang3() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void FishAlgoDesc::clear_chang2_ratefang3() {
  chang2_ratefang3_ = GOOGLE_LONGLONG(0);
  clear_has_chang2_ratefang3();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang2_ratefang3() const {
  return chang2_ratefang3_;
}
inline void FishAlgoDesc::set_chang2_ratefang3(::google::protobuf::int64 value) {
  set_has_chang2_ratefang3();
  chang2_ratefang3_ = value;
}

// optional int64 Chang3_RangeLow = 37;
inline bool FishAlgoDesc::has_chang3_rangelow() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void FishAlgoDesc::set_has_chang3_rangelow() {
  _has_bits_[1] |= 0x00000010u;
}
inline void FishAlgoDesc::clear_has_chang3_rangelow() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void FishAlgoDesc::clear_chang3_rangelow() {
  chang3_rangelow_ = GOOGLE_LONGLONG(0);
  clear_has_chang3_rangelow();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang3_rangelow() const {
  return chang3_rangelow_;
}
inline void FishAlgoDesc::set_chang3_rangelow(::google::protobuf::int64 value) {
  set_has_chang3_rangelow();
  chang3_rangelow_ = value;
}

// optional int64 Chang3_RangeHigh = 38;
inline bool FishAlgoDesc::has_chang3_rangehigh() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void FishAlgoDesc::set_has_chang3_rangehigh() {
  _has_bits_[1] |= 0x00000020u;
}
inline void FishAlgoDesc::clear_has_chang3_rangehigh() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void FishAlgoDesc::clear_chang3_rangehigh() {
  chang3_rangehigh_ = GOOGLE_LONGLONG(0);
  clear_has_chang3_rangehigh();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang3_rangehigh() const {
  return chang3_rangehigh_;
}
inline void FishAlgoDesc::set_chang3_rangehigh(::google::protobuf::int64 value) {
  set_has_chang3_rangehigh();
  chang3_rangehigh_ = value;
}

// optional int64 Chang3_Chi1 = 39;
inline bool FishAlgoDesc::has_chang3_chi1() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void FishAlgoDesc::set_has_chang3_chi1() {
  _has_bits_[1] |= 0x00000040u;
}
inline void FishAlgoDesc::clear_has_chang3_chi1() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void FishAlgoDesc::clear_chang3_chi1() {
  chang3_chi1_ = GOOGLE_LONGLONG(0);
  clear_has_chang3_chi1();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang3_chi1() const {
  return chang3_chi1_;
}
inline void FishAlgoDesc::set_chang3_chi1(::google::protobuf::int64 value) {
  set_has_chang3_chi1();
  chang3_chi1_ = value;
}

// optional int64 Chang3_Chi2 = 40;
inline bool FishAlgoDesc::has_chang3_chi2() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void FishAlgoDesc::set_has_chang3_chi2() {
  _has_bits_[1] |= 0x00000080u;
}
inline void FishAlgoDesc::clear_has_chang3_chi2() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void FishAlgoDesc::clear_chang3_chi2() {
  chang3_chi2_ = GOOGLE_LONGLONG(0);
  clear_has_chang3_chi2();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang3_chi2() const {
  return chang3_chi2_;
}
inline void FishAlgoDesc::set_chang3_chi2(::google::protobuf::int64 value) {
  set_has_chang3_chi2();
  chang3_chi2_ = value;
}

// optional int64 Chang3_Chi3 = 41;
inline bool FishAlgoDesc::has_chang3_chi3() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void FishAlgoDesc::set_has_chang3_chi3() {
  _has_bits_[1] |= 0x00000100u;
}
inline void FishAlgoDesc::clear_has_chang3_chi3() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void FishAlgoDesc::clear_chang3_chi3() {
  chang3_chi3_ = GOOGLE_LONGLONG(0);
  clear_has_chang3_chi3();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang3_chi3() const {
  return chang3_chi3_;
}
inline void FishAlgoDesc::set_chang3_chi3(::google::protobuf::int64 value) {
  set_has_chang3_chi3();
  chang3_chi3_ = value;
}

// optional int64 Chang3_Fang1 = 42;
inline bool FishAlgoDesc::has_chang3_fang1() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void FishAlgoDesc::set_has_chang3_fang1() {
  _has_bits_[1] |= 0x00000200u;
}
inline void FishAlgoDesc::clear_has_chang3_fang1() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void FishAlgoDesc::clear_chang3_fang1() {
  chang3_fang1_ = GOOGLE_LONGLONG(0);
  clear_has_chang3_fang1();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang3_fang1() const {
  return chang3_fang1_;
}
inline void FishAlgoDesc::set_chang3_fang1(::google::protobuf::int64 value) {
  set_has_chang3_fang1();
  chang3_fang1_ = value;
}

// optional int64 Chang3_Fang2 = 43;
inline bool FishAlgoDesc::has_chang3_fang2() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void FishAlgoDesc::set_has_chang3_fang2() {
  _has_bits_[1] |= 0x00000400u;
}
inline void FishAlgoDesc::clear_has_chang3_fang2() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void FishAlgoDesc::clear_chang3_fang2() {
  chang3_fang2_ = GOOGLE_LONGLONG(0);
  clear_has_chang3_fang2();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang3_fang2() const {
  return chang3_fang2_;
}
inline void FishAlgoDesc::set_chang3_fang2(::google::protobuf::int64 value) {
  set_has_chang3_fang2();
  chang3_fang2_ = value;
}

// optional int64 Chang3_Fang3 = 44;
inline bool FishAlgoDesc::has_chang3_fang3() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void FishAlgoDesc::set_has_chang3_fang3() {
  _has_bits_[1] |= 0x00000800u;
}
inline void FishAlgoDesc::clear_has_chang3_fang3() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void FishAlgoDesc::clear_chang3_fang3() {
  chang3_fang3_ = GOOGLE_LONGLONG(0);
  clear_has_chang3_fang3();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang3_fang3() const {
  return chang3_fang3_;
}
inline void FishAlgoDesc::set_chang3_fang3(::google::protobuf::int64 value) {
  set_has_chang3_fang3();
  chang3_fang3_ = value;
}

// optional int64 Chang3_RateChi1 = 45;
inline bool FishAlgoDesc::has_chang3_ratechi1() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void FishAlgoDesc::set_has_chang3_ratechi1() {
  _has_bits_[1] |= 0x00001000u;
}
inline void FishAlgoDesc::clear_has_chang3_ratechi1() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void FishAlgoDesc::clear_chang3_ratechi1() {
  chang3_ratechi1_ = GOOGLE_LONGLONG(0);
  clear_has_chang3_ratechi1();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang3_ratechi1() const {
  return chang3_ratechi1_;
}
inline void FishAlgoDesc::set_chang3_ratechi1(::google::protobuf::int64 value) {
  set_has_chang3_ratechi1();
  chang3_ratechi1_ = value;
}

// optional int64 Chang3_RateChi2 = 46;
inline bool FishAlgoDesc::has_chang3_ratechi2() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void FishAlgoDesc::set_has_chang3_ratechi2() {
  _has_bits_[1] |= 0x00002000u;
}
inline void FishAlgoDesc::clear_has_chang3_ratechi2() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void FishAlgoDesc::clear_chang3_ratechi2() {
  chang3_ratechi2_ = GOOGLE_LONGLONG(0);
  clear_has_chang3_ratechi2();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang3_ratechi2() const {
  return chang3_ratechi2_;
}
inline void FishAlgoDesc::set_chang3_ratechi2(::google::protobuf::int64 value) {
  set_has_chang3_ratechi2();
  chang3_ratechi2_ = value;
}

// optional int64 Chang3_RateChi3 = 47;
inline bool FishAlgoDesc::has_chang3_ratechi3() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void FishAlgoDesc::set_has_chang3_ratechi3() {
  _has_bits_[1] |= 0x00004000u;
}
inline void FishAlgoDesc::clear_has_chang3_ratechi3() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void FishAlgoDesc::clear_chang3_ratechi3() {
  chang3_ratechi3_ = GOOGLE_LONGLONG(0);
  clear_has_chang3_ratechi3();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang3_ratechi3() const {
  return chang3_ratechi3_;
}
inline void FishAlgoDesc::set_chang3_ratechi3(::google::protobuf::int64 value) {
  set_has_chang3_ratechi3();
  chang3_ratechi3_ = value;
}

// optional int64 Chang3_RatePing = 48;
inline bool FishAlgoDesc::has_chang3_rateping() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void FishAlgoDesc::set_has_chang3_rateping() {
  _has_bits_[1] |= 0x00008000u;
}
inline void FishAlgoDesc::clear_has_chang3_rateping() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void FishAlgoDesc::clear_chang3_rateping() {
  chang3_rateping_ = GOOGLE_LONGLONG(0);
  clear_has_chang3_rateping();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang3_rateping() const {
  return chang3_rateping_;
}
inline void FishAlgoDesc::set_chang3_rateping(::google::protobuf::int64 value) {
  set_has_chang3_rateping();
  chang3_rateping_ = value;
}

// optional int64 Chang3_RateFang1 = 49;
inline bool FishAlgoDesc::has_chang3_ratefang1() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void FishAlgoDesc::set_has_chang3_ratefang1() {
  _has_bits_[1] |= 0x00010000u;
}
inline void FishAlgoDesc::clear_has_chang3_ratefang1() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void FishAlgoDesc::clear_chang3_ratefang1() {
  chang3_ratefang1_ = GOOGLE_LONGLONG(0);
  clear_has_chang3_ratefang1();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang3_ratefang1() const {
  return chang3_ratefang1_;
}
inline void FishAlgoDesc::set_chang3_ratefang1(::google::protobuf::int64 value) {
  set_has_chang3_ratefang1();
  chang3_ratefang1_ = value;
}

// optional int64 Chang3_RateFang2 = 50;
inline bool FishAlgoDesc::has_chang3_ratefang2() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void FishAlgoDesc::set_has_chang3_ratefang2() {
  _has_bits_[1] |= 0x00020000u;
}
inline void FishAlgoDesc::clear_has_chang3_ratefang2() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void FishAlgoDesc::clear_chang3_ratefang2() {
  chang3_ratefang2_ = GOOGLE_LONGLONG(0);
  clear_has_chang3_ratefang2();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang3_ratefang2() const {
  return chang3_ratefang2_;
}
inline void FishAlgoDesc::set_chang3_ratefang2(::google::protobuf::int64 value) {
  set_has_chang3_ratefang2();
  chang3_ratefang2_ = value;
}

// optional int64 Chang3_RateFang3 = 51;
inline bool FishAlgoDesc::has_chang3_ratefang3() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void FishAlgoDesc::set_has_chang3_ratefang3() {
  _has_bits_[1] |= 0x00040000u;
}
inline void FishAlgoDesc::clear_has_chang3_ratefang3() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void FishAlgoDesc::clear_chang3_ratefang3() {
  chang3_ratefang3_ = GOOGLE_LONGLONG(0);
  clear_has_chang3_ratefang3();
}
inline ::google::protobuf::int64 FishAlgoDesc::chang3_ratefang3() const {
  return chang3_ratefang3_;
}
inline void FishAlgoDesc::set_chang3_ratefang3(::google::protobuf::int64 value) {
  set_has_chang3_ratefang3();
  chang3_ratefang3_ = value;
}

// optional int64 Clear_MaxVal = 52;
inline bool FishAlgoDesc::has_clear_maxval() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void FishAlgoDesc::set_has_clear_maxval() {
  _has_bits_[1] |= 0x00080000u;
}
inline void FishAlgoDesc::clear_has_clear_maxval() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void FishAlgoDesc::clear_clear_maxval() {
  clear_maxval_ = GOOGLE_LONGLONG(0);
  clear_has_clear_maxval();
}
inline ::google::protobuf::int64 FishAlgoDesc::clear_maxval() const {
  return clear_maxval_;
}
inline void FishAlgoDesc::set_clear_maxval(::google::protobuf::int64 value) {
  set_has_clear_maxval();
  clear_maxval_ = value;
}

// optional int64 Clear_Fang3Mul = 53;
inline bool FishAlgoDesc::has_clear_fang3mul() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void FishAlgoDesc::set_has_clear_fang3mul() {
  _has_bits_[1] |= 0x00100000u;
}
inline void FishAlgoDesc::clear_has_clear_fang3mul() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void FishAlgoDesc::clear_clear_fang3mul() {
  clear_fang3mul_ = GOOGLE_LONGLONG(0);
  clear_has_clear_fang3mul();
}
inline ::google::protobuf::int64 FishAlgoDesc::clear_fang3mul() const {
  return clear_fang3mul_;
}
inline void FishAlgoDesc::set_clear_fang3mul(::google::protobuf::int64 value) {
  set_has_clear_fang3mul();
  clear_fang3mul_ = value;
}

// optional int32 Clear_Chi3Mul = 54;
inline bool FishAlgoDesc::has_clear_chi3mul() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void FishAlgoDesc::set_has_clear_chi3mul() {
  _has_bits_[1] |= 0x00200000u;
}
inline void FishAlgoDesc::clear_has_clear_chi3mul() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void FishAlgoDesc::clear_clear_chi3mul() {
  clear_chi3mul_ = 0;
  clear_has_clear_chi3mul();
}
inline ::google::protobuf::int32 FishAlgoDesc::clear_chi3mul() const {
  return clear_chi3mul_;
}
inline void FishAlgoDesc::set_clear_chi3mul(::google::protobuf::int32 value) {
  set_has_clear_chi3mul();
  clear_chi3mul_ = value;
}

// optional int32 Clear_InitShoot = 55;
inline bool FishAlgoDesc::has_clear_initshoot() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void FishAlgoDesc::set_has_clear_initshoot() {
  _has_bits_[1] |= 0x00400000u;
}
inline void FishAlgoDesc::clear_has_clear_initshoot() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void FishAlgoDesc::clear_clear_initshoot() {
  clear_initshoot_ = 0;
  clear_has_clear_initshoot();
}
inline ::google::protobuf::int32 FishAlgoDesc::clear_initshoot() const {
  return clear_initshoot_;
}
inline void FishAlgoDesc::set_clear_initshoot(::google::protobuf::int32 value) {
  set_has_clear_initshoot();
  clear_initshoot_ = value;
}

// optional int32 Clear_InitCapture = 56;
inline bool FishAlgoDesc::has_clear_initcapture() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void FishAlgoDesc::set_has_clear_initcapture() {
  _has_bits_[1] |= 0x00800000u;
}
inline void FishAlgoDesc::clear_has_clear_initcapture() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void FishAlgoDesc::clear_clear_initcapture() {
  clear_initcapture_ = 0;
  clear_has_clear_initcapture();
}
inline ::google::protobuf::int32 FishAlgoDesc::clear_initcapture() const {
  return clear_initcapture_;
}
inline void FishAlgoDesc::set_clear_initcapture(::google::protobuf::int32 value) {
  set_has_clear_initcapture();
  clear_initcapture_ = value;
}

// optional int32 Clear_InitDrawRate = 57;
inline bool FishAlgoDesc::has_clear_initdrawrate() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void FishAlgoDesc::set_has_clear_initdrawrate() {
  _has_bits_[1] |= 0x01000000u;
}
inline void FishAlgoDesc::clear_has_clear_initdrawrate() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void FishAlgoDesc::clear_clear_initdrawrate() {
  clear_initdrawrate_ = 0;
  clear_has_clear_initdrawrate();
}
inline ::google::protobuf::int32 FishAlgoDesc::clear_initdrawrate() const {
  return clear_initdrawrate_;
}
inline void FishAlgoDesc::set_clear_initdrawrate(::google::protobuf::int32 value) {
  set_has_clear_initdrawrate();
  clear_initdrawrate_ = value;
}

// optional int32 Clear_InitPoolRate = 58;
inline bool FishAlgoDesc::has_clear_initpoolrate() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void FishAlgoDesc::set_has_clear_initpoolrate() {
  _has_bits_[1] |= 0x02000000u;
}
inline void FishAlgoDesc::clear_has_clear_initpoolrate() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void FishAlgoDesc::clear_clear_initpoolrate() {
  clear_initpoolrate_ = 0;
  clear_has_clear_initpoolrate();
}
inline ::google::protobuf::int32 FishAlgoDesc::clear_initpoolrate() const {
  return clear_initpoolrate_;
}
inline void FishAlgoDesc::set_clear_initpoolrate(::google::protobuf::int32 value) {
  set_has_clear_initpoolrate();
  clear_initpoolrate_ = value;
}

// optional int32 Is_delete = 59;
inline bool FishAlgoDesc::has_is_delete() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void FishAlgoDesc::set_has_is_delete() {
  _has_bits_[1] |= 0x04000000u;
}
inline void FishAlgoDesc::clear_has_is_delete() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void FishAlgoDesc::clear_is_delete() {
  is_delete_ = 0;
  clear_has_is_delete();
}
inline ::google::protobuf::int32 FishAlgoDesc::is_delete() const {
  return is_delete_;
}
inline void FishAlgoDesc::set_is_delete(::google::protobuf::int32 value) {
  set_has_is_delete();
  is_delete_ = value;
}

// optional int32 FishAlgoType = 60;
inline bool FishAlgoDesc::has_fishalgotype() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void FishAlgoDesc::set_has_fishalgotype() {
  _has_bits_[1] |= 0x08000000u;
}
inline void FishAlgoDesc::clear_has_fishalgotype() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void FishAlgoDesc::clear_fishalgotype() {
  fishalgotype_ = 0;
  clear_has_fishalgotype();
}
inline ::google::protobuf::int32 FishAlgoDesc::fishalgotype() const {
  return fishalgotype_;
}
inline void FishAlgoDesc::set_fishalgotype(::google::protobuf::int32 value) {
  set_has_fishalgotype();
  fishalgotype_ = value;
}

// -------------------------------------------------------------------

// Sheet_FishAlgoDesc

// repeated .proto_ff.FishAlgoDesc FishAlgoDesc_List = 1;
inline int Sheet_FishAlgoDesc::fishalgodesc_list_size() const {
  return fishalgodesc_list_.size();
}
inline void Sheet_FishAlgoDesc::clear_fishalgodesc_list() {
  fishalgodesc_list_.Clear();
}
inline const ::proto_ff::FishAlgoDesc& Sheet_FishAlgoDesc::fishalgodesc_list(int index) const {
  return fishalgodesc_list_.Get(index);
}
inline ::proto_ff::FishAlgoDesc* Sheet_FishAlgoDesc::mutable_fishalgodesc_list(int index) {
  return fishalgodesc_list_.Mutable(index);
}
inline ::proto_ff::FishAlgoDesc* Sheet_FishAlgoDesc::add_fishalgodesc_list() {
  return fishalgodesc_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FishAlgoDesc >&
Sheet_FishAlgoDesc::fishalgodesc_list() const {
  return fishalgodesc_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FishAlgoDesc >*
Sheet_FishAlgoDesc::mutable_fishalgodesc_list() {
  return &fishalgodesc_list_;
}

// -------------------------------------------------------------------

// UserDeskAlgoInfo

// optional int32 AlgoID = 1;
inline bool UserDeskAlgoInfo::has_algoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserDeskAlgoInfo::set_has_algoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserDeskAlgoInfo::clear_has_algoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserDeskAlgoInfo::clear_algoid() {
  algoid_ = 0;
  clear_has_algoid();
}
inline ::google::protobuf::int32 UserDeskAlgoInfo::algoid() const {
  return algoid_;
}
inline void UserDeskAlgoInfo::set_algoid(::google::protobuf::int32 value) {
  set_has_algoid();
  algoid_ = value;
}

// optional float DrawRate = 2;
inline bool UserDeskAlgoInfo::has_drawrate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserDeskAlgoInfo::set_has_drawrate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserDeskAlgoInfo::clear_has_drawrate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserDeskAlgoInfo::clear_drawrate() {
  drawrate_ = 0;
  clear_has_drawrate();
}
inline float UserDeskAlgoInfo::drawrate() const {
  return drawrate_;
}
inline void UserDeskAlgoInfo::set_drawrate(float value) {
  set_has_drawrate();
  drawrate_ = value;
}

// optional double CurTotalShoot = 3;
inline bool UserDeskAlgoInfo::has_curtotalshoot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserDeskAlgoInfo::set_has_curtotalshoot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserDeskAlgoInfo::clear_has_curtotalshoot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserDeskAlgoInfo::clear_curtotalshoot() {
  curtotalshoot_ = 0;
  clear_has_curtotalshoot();
}
inline double UserDeskAlgoInfo::curtotalshoot() const {
  return curtotalshoot_;
}
inline void UserDeskAlgoInfo::set_curtotalshoot(double value) {
  set_has_curtotalshoot();
  curtotalshoot_ = value;
}

// optional double CurTotalCapture = 4;
inline bool UserDeskAlgoInfo::has_curtotalcapture() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserDeskAlgoInfo::set_has_curtotalcapture() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserDeskAlgoInfo::clear_has_curtotalcapture() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserDeskAlgoInfo::clear_curtotalcapture() {
  curtotalcapture_ = 0;
  clear_has_curtotalcapture();
}
inline double UserDeskAlgoInfo::curtotalcapture() const {
  return curtotalcapture_;
}
inline void UserDeskAlgoInfo::set_curtotalcapture(double value) {
  set_has_curtotalcapture();
  curtotalcapture_ = value;
}

// optional int64 CurAlgoChang = 5;
inline bool UserDeskAlgoInfo::has_curalgochang() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserDeskAlgoInfo::set_has_curalgochang() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserDeskAlgoInfo::clear_has_curalgochang() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserDeskAlgoInfo::clear_curalgochang() {
  curalgochang_ = GOOGLE_LONGLONG(0);
  clear_has_curalgochang();
}
inline ::google::protobuf::int64 UserDeskAlgoInfo::curalgochang() const {
  return curalgochang_;
}
inline void UserDeskAlgoInfo::set_curalgochang(::google::protobuf::int64 value) {
  set_has_curalgochang();
  curalgochang_ = value;
}

// optional int64 CurAlgoStatus = 6;
inline bool UserDeskAlgoInfo::has_curalgostatus() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserDeskAlgoInfo::set_has_curalgostatus() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserDeskAlgoInfo::clear_has_curalgostatus() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserDeskAlgoInfo::clear_curalgostatus() {
  curalgostatus_ = GOOGLE_LONGLONG(0);
  clear_has_curalgostatus();
}
inline ::google::protobuf::int64 UserDeskAlgoInfo::curalgostatus() const {
  return curalgostatus_;
}
inline void UserDeskAlgoInfo::set_curalgostatus(::google::protobuf::int64 value) {
  set_has_curalgostatus();
  curalgostatus_ = value;
}

// -------------------------------------------------------------------

// DeskInfoDesc

// optional int32 id = 1;
inline bool DeskInfoDesc::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeskInfoDesc::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeskInfoDesc::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeskInfoDesc::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DeskInfoDesc::id() const {
  return id_;
}
inline void DeskInfoDesc::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 RoomID = 2;
inline bool DeskInfoDesc::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeskInfoDesc::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeskInfoDesc::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeskInfoDesc::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 DeskInfoDesc::roomid() const {
  return roomid_;
}
inline void DeskInfoDesc::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional int32 DeskID = 3;
inline bool DeskInfoDesc::has_deskid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeskInfoDesc::set_has_deskid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeskInfoDesc::clear_has_deskid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeskInfoDesc::clear_deskid() {
  deskid_ = 0;
  clear_has_deskid();
}
inline ::google::protobuf::int32 DeskInfoDesc::deskid() const {
  return deskid_;
}
inline void DeskInfoDesc::set_deskid(::google::protobuf::int32 value) {
  set_has_deskid();
  deskid_ = value;
}

// optional int32 AlgoType = 4;
inline bool DeskInfoDesc::has_algotype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeskInfoDesc::set_has_algotype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DeskInfoDesc::clear_has_algotype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DeskInfoDesc::clear_algotype() {
  algotype_ = 0;
  clear_has_algotype();
}
inline ::google::protobuf::int32 DeskInfoDesc::algotype() const {
  return algotype_;
}
inline void DeskInfoDesc::set_algotype(::google::protobuf::int32 value) {
  set_has_algotype();
  algotype_ = value;
}

// repeated .proto_ff.UserDeskAlgoInfo AlgoData = 5;
inline int DeskInfoDesc::algodata_size() const {
  return algodata_.size();
}
inline void DeskInfoDesc::clear_algodata() {
  algodata_.Clear();
}
inline const ::proto_ff::UserDeskAlgoInfo& DeskInfoDesc::algodata(int index) const {
  return algodata_.Get(index);
}
inline ::proto_ff::UserDeskAlgoInfo* DeskInfoDesc::mutable_algodata(int index) {
  return algodata_.Mutable(index);
}
inline ::proto_ff::UserDeskAlgoInfo* DeskInfoDesc::add_algodata() {
  return algodata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::UserDeskAlgoInfo >&
DeskInfoDesc::algodata() const {
  return algodata_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::UserDeskAlgoInfo >*
DeskInfoDesc::mutable_algodata() {
  return &algodata_;
}

// optional int32 GameLevel = 6;
inline bool DeskInfoDesc::has_gamelevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DeskInfoDesc::set_has_gamelevel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DeskInfoDesc::clear_has_gamelevel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DeskInfoDesc::clear_gamelevel() {
  gamelevel_ = 0;
  clear_has_gamelevel();
}
inline ::google::protobuf::int32 DeskInfoDesc::gamelevel() const {
  return gamelevel_;
}
inline void DeskInfoDesc::set_gamelevel(::google::protobuf::int32 value) {
  set_has_gamelevel();
  gamelevel_ = value;
}

// optional int64 YValueA = 7;
inline bool DeskInfoDesc::has_yvaluea() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DeskInfoDesc::set_has_yvaluea() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DeskInfoDesc::clear_has_yvaluea() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DeskInfoDesc::clear_yvaluea() {
  yvaluea_ = GOOGLE_LONGLONG(0);
  clear_has_yvaluea();
}
inline ::google::protobuf::int64 DeskInfoDesc::yvaluea() const {
  return yvaluea_;
}
inline void DeskInfoDesc::set_yvaluea(::google::protobuf::int64 value) {
  set_has_yvaluea();
  yvaluea_ = value;
}

// optional int64 YValueB = 8;
inline bool DeskInfoDesc::has_yvalueb() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DeskInfoDesc::set_has_yvalueb() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DeskInfoDesc::clear_has_yvalueb() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DeskInfoDesc::clear_yvalueb() {
  yvalueb_ = GOOGLE_LONGLONG(0);
  clear_has_yvalueb();
}
inline ::google::protobuf::int64 DeskInfoDesc::yvalueb() const {
  return yvalueb_;
}
inline void DeskInfoDesc::set_yvalueb(::google::protobuf::int64 value) {
  set_has_yvalueb();
  yvalueb_ = value;
}

// optional int64 FreePool = 9;
inline bool DeskInfoDesc::has_freepool() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DeskInfoDesc::set_has_freepool() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DeskInfoDesc::clear_has_freepool() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DeskInfoDesc::clear_freepool() {
  freepool_ = GOOGLE_LONGLONG(0);
  clear_has_freepool();
}
inline ::google::protobuf::int64 DeskInfoDesc::freepool() const {
  return freepool_;
}
inline void DeskInfoDesc::set_freepool(::google::protobuf::int64 value) {
  set_has_freepool();
  freepool_ = value;
}

// optional int64 YValue = 10;
inline bool DeskInfoDesc::has_yvalue() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DeskInfoDesc::set_has_yvalue() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DeskInfoDesc::clear_has_yvalue() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DeskInfoDesc::clear_yvalue() {
  yvalue_ = GOOGLE_LONGLONG(0);
  clear_has_yvalue();
}
inline ::google::protobuf::int64 DeskInfoDesc::yvalue() const {
  return yvalue_;
}
inline void DeskInfoDesc::set_yvalue(::google::protobuf::int64 value) {
  set_has_yvalue();
  yvalue_ = value;
}

// -------------------------------------------------------------------

// Sheet_DeskInfoDesc

// repeated .proto_ff.DeskInfoDesc DeskInfoDesc_List = 1;
inline int Sheet_DeskInfoDesc::deskinfodesc_list_size() const {
  return deskinfodesc_list_.size();
}
inline void Sheet_DeskInfoDesc::clear_deskinfodesc_list() {
  deskinfodesc_list_.Clear();
}
inline const ::proto_ff::DeskInfoDesc& Sheet_DeskInfoDesc::deskinfodesc_list(int index) const {
  return deskinfodesc_list_.Get(index);
}
inline ::proto_ff::DeskInfoDesc* Sheet_DeskInfoDesc::mutable_deskinfodesc_list(int index) {
  return deskinfodesc_list_.Mutable(index);
}
inline ::proto_ff::DeskInfoDesc* Sheet_DeskInfoDesc::add_deskinfodesc_list() {
  return deskinfodesc_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::DeskInfoDesc >&
Sheet_DeskInfoDesc::deskinfodesc_list() const {
  return deskinfodesc_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::DeskInfoDesc >*
Sheet_DeskInfoDesc::mutable_deskinfodesc_list() {
  return &deskinfodesc_list_;
}

// -------------------------------------------------------------------

// FishInitPoolData

// optional int32 fish_id = 1;
inline bool FishInitPoolData::has_fish_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FishInitPoolData::set_has_fish_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FishInitPoolData::clear_has_fish_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FishInitPoolData::clear_fish_id() {
  fish_id_ = 0;
  clear_has_fish_id();
}
inline ::google::protobuf::int32 FishInitPoolData::fish_id() const {
  return fish_id_;
}
inline void FishInitPoolData::set_fish_id(::google::protobuf::int32 value) {
  set_has_fish_id();
  fish_id_ = value;
}

// optional int32 num = 2;
inline bool FishInitPoolData::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FishInitPoolData::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FishInitPoolData::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FishInitPoolData::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 FishInitPoolData::num() const {
  return num_;
}
inline void FishInitPoolData::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// FishInitPool

// repeated .proto_ff.FishInitPoolData InitPoolCount = 1;
inline int FishInitPool::initpoolcount_size() const {
  return initpoolcount_.size();
}
inline void FishInitPool::clear_initpoolcount() {
  initpoolcount_.Clear();
}
inline const ::proto_ff::FishInitPoolData& FishInitPool::initpoolcount(int index) const {
  return initpoolcount_.Get(index);
}
inline ::proto_ff::FishInitPoolData* FishInitPool::mutable_initpoolcount(int index) {
  return initpoolcount_.Mutable(index);
}
inline ::proto_ff::FishInitPoolData* FishInitPool::add_initpoolcount() {
  return initpoolcount_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FishInitPoolData >&
FishInitPool::initpoolcount() const {
  return initpoolcount_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FishInitPoolData >*
FishInitPool::mutable_initpoolcount() {
  return &initpoolcount_;
}

// -------------------------------------------------------------------

// SeatDangRange_B

// repeated int64 value = 1;
inline int SeatDangRange_B::value_size() const {
  return value_.size();
}
inline void SeatDangRange_B::clear_value() {
  value_.Clear();
}
inline ::google::protobuf::int64 SeatDangRange_B::value(int index) const {
  return value_.Get(index);
}
inline void SeatDangRange_B::set_value(int index, ::google::protobuf::int64 value) {
  value_.Set(index, value);
}
inline void SeatDangRange_B::add_value(::google::protobuf::int64 value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
SeatDangRange_B::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
SeatDangRange_B::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// SeatAlgoSetup

// optional int32 SeatCtrlIsOpen = 1;
inline bool SeatAlgoSetup::has_seatctrlisopen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SeatAlgoSetup::set_has_seatctrlisopen() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SeatAlgoSetup::clear_has_seatctrlisopen() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SeatAlgoSetup::clear_seatctrlisopen() {
  seatctrlisopen_ = 0;
  clear_has_seatctrlisopen();
}
inline ::google::protobuf::int32 SeatAlgoSetup::seatctrlisopen() const {
  return seatctrlisopen_;
}
inline void SeatAlgoSetup::set_seatctrlisopen(::google::protobuf::int32 value) {
  set_has_seatctrlisopen();
  seatctrlisopen_ = value;
}

// repeated int64 SeatDangRange_Def_A = 2;
inline int SeatAlgoSetup::seatdangrange_def_a_size() const {
  return seatdangrange_def_a_.size();
}
inline void SeatAlgoSetup::clear_seatdangrange_def_a() {
  seatdangrange_def_a_.Clear();
}
inline ::google::protobuf::int64 SeatAlgoSetup::seatdangrange_def_a(int index) const {
  return seatdangrange_def_a_.Get(index);
}
inline void SeatAlgoSetup::set_seatdangrange_def_a(int index, ::google::protobuf::int64 value) {
  seatdangrange_def_a_.Set(index, value);
}
inline void SeatAlgoSetup::add_seatdangrange_def_a(::google::protobuf::int64 value) {
  seatdangrange_def_a_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
SeatAlgoSetup::seatdangrange_def_a() const {
  return seatdangrange_def_a_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
SeatAlgoSetup::mutable_seatdangrange_def_a() {
  return &seatdangrange_def_a_;
}

// repeated int64 SeatDangRange_Def_B = 3;
inline int SeatAlgoSetup::seatdangrange_def_b_size() const {
  return seatdangrange_def_b_.size();
}
inline void SeatAlgoSetup::clear_seatdangrange_def_b() {
  seatdangrange_def_b_.Clear();
}
inline ::google::protobuf::int64 SeatAlgoSetup::seatdangrange_def_b(int index) const {
  return seatdangrange_def_b_.Get(index);
}
inline void SeatAlgoSetup::set_seatdangrange_def_b(int index, ::google::protobuf::int64 value) {
  seatdangrange_def_b_.Set(index, value);
}
inline void SeatAlgoSetup::add_seatdangrange_def_b(::google::protobuf::int64 value) {
  seatdangrange_def_b_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
SeatAlgoSetup::seatdangrange_def_b() const {
  return seatdangrange_def_b_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
SeatAlgoSetup::mutable_seatdangrange_def_b() {
  return &seatdangrange_def_b_;
}

// repeated int64 SeatDangRange_Def_Robot = 4;
inline int SeatAlgoSetup::seatdangrange_def_robot_size() const {
  return seatdangrange_def_robot_.size();
}
inline void SeatAlgoSetup::clear_seatdangrange_def_robot() {
  seatdangrange_def_robot_.Clear();
}
inline ::google::protobuf::int64 SeatAlgoSetup::seatdangrange_def_robot(int index) const {
  return seatdangrange_def_robot_.Get(index);
}
inline void SeatAlgoSetup::set_seatdangrange_def_robot(int index, ::google::protobuf::int64 value) {
  seatdangrange_def_robot_.Set(index, value);
}
inline void SeatAlgoSetup::add_seatdangrange_def_robot(::google::protobuf::int64 value) {
  seatdangrange_def_robot_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
SeatAlgoSetup::seatdangrange_def_robot() const {
  return seatdangrange_def_robot_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
SeatAlgoSetup::mutable_seatdangrange_def_robot() {
  return &seatdangrange_def_robot_;
}

// repeated .proto_ff.SeatDangRange_B SeatDangRange_B = 5;
inline int SeatAlgoSetup::seatdangrange_b_size() const {
  return seatdangrange_b_.size();
}
inline void SeatAlgoSetup::clear_seatdangrange_b() {
  seatdangrange_b_.Clear();
}
inline const ::proto_ff::SeatDangRange_B& SeatAlgoSetup::seatdangrange_b(int index) const {
  return seatdangrange_b_.Get(index);
}
inline ::proto_ff::SeatDangRange_B* SeatAlgoSetup::mutable_seatdangrange_b(int index) {
  return seatdangrange_b_.Mutable(index);
}
inline ::proto_ff::SeatDangRange_B* SeatAlgoSetup::add_seatdangrange_b() {
  return seatdangrange_b_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::SeatDangRange_B >&
SeatAlgoSetup::seatdangrange_b() const {
  return seatdangrange_b_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::SeatDangRange_B >*
SeatAlgoSetup::mutable_seatdangrange_b() {
  return &seatdangrange_b_;
}

// optional int64 ClearDataMaxVal = 6;
inline bool SeatAlgoSetup::has_cleardatamaxval() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SeatAlgoSetup::set_has_cleardatamaxval() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SeatAlgoSetup::clear_has_cleardatamaxval() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SeatAlgoSetup::clear_cleardatamaxval() {
  cleardatamaxval_ = GOOGLE_LONGLONG(0);
  clear_has_cleardatamaxval();
}
inline ::google::protobuf::int64 SeatAlgoSetup::cleardatamaxval() const {
  return cleardatamaxval_;
}
inline void SeatAlgoSetup::set_cleardatamaxval(::google::protobuf::int64 value) {
  set_has_cleardatamaxval();
  cleardatamaxval_ = value;
}

// optional double ClearDataFangCondation = 7;
inline bool SeatAlgoSetup::has_cleardatafangcondation() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SeatAlgoSetup::set_has_cleardatafangcondation() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SeatAlgoSetup::clear_has_cleardatafangcondation() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SeatAlgoSetup::clear_cleardatafangcondation() {
  cleardatafangcondation_ = 0;
  clear_has_cleardatafangcondation();
}
inline double SeatAlgoSetup::cleardatafangcondation() const {
  return cleardatafangcondation_;
}
inline void SeatAlgoSetup::set_cleardatafangcondation(double value) {
  set_has_cleardatafangcondation();
  cleardatafangcondation_ = value;
}

// optional double ClearDataChiCondation = 8;
inline bool SeatAlgoSetup::has_cleardatachicondation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SeatAlgoSetup::set_has_cleardatachicondation() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SeatAlgoSetup::clear_has_cleardatachicondation() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SeatAlgoSetup::clear_cleardatachicondation() {
  cleardatachicondation_ = 0;
  clear_has_cleardatachicondation();
}
inline double SeatAlgoSetup::cleardatachicondation() const {
  return cleardatachicondation_;
}
inline void SeatAlgoSetup::set_cleardatachicondation(double value) {
  set_has_cleardatachicondation();
  cleardatachicondation_ = value;
}

// -------------------------------------------------------------------

// HuanDangRange

// repeated int64 value = 1;
inline int HuanDangRange::value_size() const {
  return value_.size();
}
inline void HuanDangRange::clear_value() {
  value_.Clear();
}
inline ::google::protobuf::int64 HuanDangRange::value(int index) const {
  return value_.Get(index);
}
inline void HuanDangRange::set_value(int index, ::google::protobuf::int64 value) {
  value_.Set(index, value);
}
inline void HuanDangRange::add_value(::google::protobuf::int64 value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
HuanDangRange::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
HuanDangRange::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// DangChiRange

// repeated int64 value = 1;
inline int DangChiRange::value_size() const {
  return value_.size();
}
inline void DangChiRange::clear_value() {
  value_.Clear();
}
inline ::google::protobuf::int64 DangChiRange::value(int index) const {
  return value_.Get(index);
}
inline void DangChiRange::set_value(int index, ::google::protobuf::int64 value) {
  value_.Set(index, value);
}
inline void DangChiRange::add_value(::google::protobuf::int64 value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DangChiRange::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DangChiRange::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// FishAlgorithmSetup

// optional int64 HuanChangTimes = 1;
inline bool FishAlgorithmSetup::has_huanchangtimes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FishAlgorithmSetup::set_has_huanchangtimes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FishAlgorithmSetup::clear_has_huanchangtimes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FishAlgorithmSetup::clear_huanchangtimes() {
  huanchangtimes_ = GOOGLE_LONGLONG(0);
  clear_has_huanchangtimes();
}
inline ::google::protobuf::int64 FishAlgorithmSetup::huanchangtimes() const {
  return huanchangtimes_;
}
inline void FishAlgorithmSetup::set_huanchangtimes(::google::protobuf::int64 value) {
  set_has_huanchangtimes();
  huanchangtimes_ = value;
}

// repeated .proto_ff.HuanDangRange HuanDangRange = 2;
inline int FishAlgorithmSetup::huandangrange_size() const {
  return huandangrange_.size();
}
inline void FishAlgorithmSetup::clear_huandangrange() {
  huandangrange_.Clear();
}
inline const ::proto_ff::HuanDangRange& FishAlgorithmSetup::huandangrange(int index) const {
  return huandangrange_.Get(index);
}
inline ::proto_ff::HuanDangRange* FishAlgorithmSetup::mutable_huandangrange(int index) {
  return huandangrange_.Mutable(index);
}
inline ::proto_ff::HuanDangRange* FishAlgorithmSetup::add_huandangrange() {
  return huandangrange_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::HuanDangRange >&
FishAlgorithmSetup::huandangrange() const {
  return huandangrange_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::HuanDangRange >*
FishAlgorithmSetup::mutable_huandangrange() {
  return &huandangrange_;
}

// repeated .proto_ff.DangChiRange DangChiRange = 3;
inline int FishAlgorithmSetup::dangchirange_size() const {
  return dangchirange_.size();
}
inline void FishAlgorithmSetup::clear_dangchirange() {
  dangchirange_.Clear();
}
inline const ::proto_ff::DangChiRange& FishAlgorithmSetup::dangchirange(int index) const {
  return dangchirange_.Get(index);
}
inline ::proto_ff::DangChiRange* FishAlgorithmSetup::mutable_dangchirange(int index) {
  return dangchirange_.Mutable(index);
}
inline ::proto_ff::DangChiRange* FishAlgorithmSetup::add_dangchirange() {
  return dangchirange_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::DangChiRange >&
FishAlgorithmSetup::dangchirange() const {
  return dangchirange_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::DangChiRange >*
FishAlgorithmSetup::mutable_dangchirange() {
  return &dangchirange_;
}

// optional int64 HuanBiaoLiuShuiVal = 4;
inline bool FishAlgorithmSetup::has_huanbiaoliushuival() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FishAlgorithmSetup::set_has_huanbiaoliushuival() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FishAlgorithmSetup::clear_has_huanbiaoliushuival() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FishAlgorithmSetup::clear_huanbiaoliushuival() {
  huanbiaoliushuival_ = GOOGLE_LONGLONG(0);
  clear_has_huanbiaoliushuival();
}
inline ::google::protobuf::int64 FishAlgorithmSetup::huanbiaoliushuival() const {
  return huanbiaoliushuival_;
}
inline void FishAlgorithmSetup::set_huanbiaoliushuival(::google::protobuf::int64 value) {
  set_has_huanbiaoliushuival();
  huanbiaoliushuival_ = value;
}

// optional int64 PoolInitBFB = 5;
inline bool FishAlgorithmSetup::has_poolinitbfb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FishAlgorithmSetup::set_has_poolinitbfb() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FishAlgorithmSetup::clear_has_poolinitbfb() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FishAlgorithmSetup::clear_poolinitbfb() {
  poolinitbfb_ = GOOGLE_LONGLONG(0);
  clear_has_poolinitbfb();
}
inline ::google::protobuf::int64 FishAlgorithmSetup::poolinitbfb() const {
  return poolinitbfb_;
}
inline void FishAlgorithmSetup::set_poolinitbfb(::google::protobuf::int64 value) {
  set_has_poolinitbfb();
  poolinitbfb_ = value;
}

// optional int64 ClearDataMaxVal = 6;
inline bool FishAlgorithmSetup::has_cleardatamaxval() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FishAlgorithmSetup::set_has_cleardatamaxval() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FishAlgorithmSetup::clear_has_cleardatamaxval() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FishAlgorithmSetup::clear_cleardatamaxval() {
  cleardatamaxval_ = GOOGLE_LONGLONG(0);
  clear_has_cleardatamaxval();
}
inline ::google::protobuf::int64 FishAlgorithmSetup::cleardatamaxval() const {
  return cleardatamaxval_;
}
inline void FishAlgorithmSetup::set_cleardatamaxval(::google::protobuf::int64 value) {
  set_has_cleardatamaxval();
  cleardatamaxval_ = value;
}

// optional double ClearDataFangCondation = 7;
inline bool FishAlgorithmSetup::has_cleardatafangcondation() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FishAlgorithmSetup::set_has_cleardatafangcondation() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FishAlgorithmSetup::clear_has_cleardatafangcondation() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FishAlgorithmSetup::clear_cleardatafangcondation() {
  cleardatafangcondation_ = 0;
  clear_has_cleardatafangcondation();
}
inline double FishAlgorithmSetup::cleardatafangcondation() const {
  return cleardatafangcondation_;
}
inline void FishAlgorithmSetup::set_cleardatafangcondation(double value) {
  set_has_cleardatafangcondation();
  cleardatafangcondation_ = value;
}

// optional double ClearDataChiCondation = 8;
inline bool FishAlgorithmSetup::has_cleardatachicondation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FishAlgorithmSetup::set_has_cleardatachicondation() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FishAlgorithmSetup::clear_has_cleardatachicondation() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FishAlgorithmSetup::clear_cleardatachicondation() {
  cleardatachicondation_ = 0;
  clear_has_cleardatachicondation();
}
inline double FishAlgorithmSetup::cleardatachicondation() const {
  return cleardatachicondation_;
}
inline void FishAlgorithmSetup::set_cleardatachicondation(double value) {
  set_has_cleardatachicondation();
  cleardatachicondation_ = value;
}

// optional int64 ClearDataInitShoot = 9;
inline bool FishAlgorithmSetup::has_cleardatainitshoot() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FishAlgorithmSetup::set_has_cleardatainitshoot() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FishAlgorithmSetup::clear_has_cleardatainitshoot() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FishAlgorithmSetup::clear_cleardatainitshoot() {
  cleardatainitshoot_ = GOOGLE_LONGLONG(0);
  clear_has_cleardatainitshoot();
}
inline ::google::protobuf::int64 FishAlgorithmSetup::cleardatainitshoot() const {
  return cleardatainitshoot_;
}
inline void FishAlgorithmSetup::set_cleardatainitshoot(::google::protobuf::int64 value) {
  set_has_cleardatainitshoot();
  cleardatainitshoot_ = value;
}

// optional int64 ClearDataInitCapture = 10;
inline bool FishAlgorithmSetup::has_cleardatainitcapture() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FishAlgorithmSetup::set_has_cleardatainitcapture() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FishAlgorithmSetup::clear_has_cleardatainitcapture() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FishAlgorithmSetup::clear_cleardatainitcapture() {
  cleardatainitcapture_ = GOOGLE_LONGLONG(0);
  clear_has_cleardatainitcapture();
}
inline ::google::protobuf::int64 FishAlgorithmSetup::cleardatainitcapture() const {
  return cleardatainitcapture_;
}
inline void FishAlgorithmSetup::set_cleardatainitcapture(::google::protobuf::int64 value) {
  set_has_cleardatainitcapture();
  cleardatainitcapture_ = value;
}

// optional double ClearDataInitDrawRate = 11;
inline bool FishAlgorithmSetup::has_cleardatainitdrawrate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FishAlgorithmSetup::set_has_cleardatainitdrawrate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FishAlgorithmSetup::clear_has_cleardatainitdrawrate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FishAlgorithmSetup::clear_cleardatainitdrawrate() {
  cleardatainitdrawrate_ = 0;
  clear_has_cleardatainitdrawrate();
}
inline double FishAlgorithmSetup::cleardatainitdrawrate() const {
  return cleardatainitdrawrate_;
}
inline void FishAlgorithmSetup::set_cleardatainitdrawrate(double value) {
  set_has_cleardatainitdrawrate();
  cleardatainitdrawrate_ = value;
}

// -------------------------------------------------------------------

// FishAlgorithmFileName

// optional string FileNameChi1 = 1;
inline bool FishAlgorithmFileName::has_filenamechi1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FishAlgorithmFileName::set_has_filenamechi1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FishAlgorithmFileName::clear_has_filenamechi1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FishAlgorithmFileName::clear_filenamechi1() {
  if (filenamechi1_ != &::google::protobuf::internal::kEmptyString) {
    filenamechi1_->clear();
  }
  clear_has_filenamechi1();
}
inline const ::std::string& FishAlgorithmFileName::filenamechi1() const {
  return *filenamechi1_;
}
inline void FishAlgorithmFileName::set_filenamechi1(const ::std::string& value) {
  set_has_filenamechi1();
  if (filenamechi1_ == &::google::protobuf::internal::kEmptyString) {
    filenamechi1_ = new ::std::string;
  }
  filenamechi1_->assign(value);
}
inline void FishAlgorithmFileName::set_filenamechi1(const char* value) {
  set_has_filenamechi1();
  if (filenamechi1_ == &::google::protobuf::internal::kEmptyString) {
    filenamechi1_ = new ::std::string;
  }
  filenamechi1_->assign(value);
}
inline void FishAlgorithmFileName::set_filenamechi1(const char* value, size_t size) {
  set_has_filenamechi1();
  if (filenamechi1_ == &::google::protobuf::internal::kEmptyString) {
    filenamechi1_ = new ::std::string;
  }
  filenamechi1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FishAlgorithmFileName::mutable_filenamechi1() {
  set_has_filenamechi1();
  if (filenamechi1_ == &::google::protobuf::internal::kEmptyString) {
    filenamechi1_ = new ::std::string;
  }
  return filenamechi1_;
}
inline ::std::string* FishAlgorithmFileName::release_filenamechi1() {
  clear_has_filenamechi1();
  if (filenamechi1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filenamechi1_;
    filenamechi1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FishAlgorithmFileName::set_allocated_filenamechi1(::std::string* filenamechi1) {
  if (filenamechi1_ != &::google::protobuf::internal::kEmptyString) {
    delete filenamechi1_;
  }
  if (filenamechi1) {
    set_has_filenamechi1();
    filenamechi1_ = filenamechi1;
  } else {
    clear_has_filenamechi1();
    filenamechi1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string FileNameChi2 = 2;
inline bool FishAlgorithmFileName::has_filenamechi2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FishAlgorithmFileName::set_has_filenamechi2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FishAlgorithmFileName::clear_has_filenamechi2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FishAlgorithmFileName::clear_filenamechi2() {
  if (filenamechi2_ != &::google::protobuf::internal::kEmptyString) {
    filenamechi2_->clear();
  }
  clear_has_filenamechi2();
}
inline const ::std::string& FishAlgorithmFileName::filenamechi2() const {
  return *filenamechi2_;
}
inline void FishAlgorithmFileName::set_filenamechi2(const ::std::string& value) {
  set_has_filenamechi2();
  if (filenamechi2_ == &::google::protobuf::internal::kEmptyString) {
    filenamechi2_ = new ::std::string;
  }
  filenamechi2_->assign(value);
}
inline void FishAlgorithmFileName::set_filenamechi2(const char* value) {
  set_has_filenamechi2();
  if (filenamechi2_ == &::google::protobuf::internal::kEmptyString) {
    filenamechi2_ = new ::std::string;
  }
  filenamechi2_->assign(value);
}
inline void FishAlgorithmFileName::set_filenamechi2(const char* value, size_t size) {
  set_has_filenamechi2();
  if (filenamechi2_ == &::google::protobuf::internal::kEmptyString) {
    filenamechi2_ = new ::std::string;
  }
  filenamechi2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FishAlgorithmFileName::mutable_filenamechi2() {
  set_has_filenamechi2();
  if (filenamechi2_ == &::google::protobuf::internal::kEmptyString) {
    filenamechi2_ = new ::std::string;
  }
  return filenamechi2_;
}
inline ::std::string* FishAlgorithmFileName::release_filenamechi2() {
  clear_has_filenamechi2();
  if (filenamechi2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filenamechi2_;
    filenamechi2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FishAlgorithmFileName::set_allocated_filenamechi2(::std::string* filenamechi2) {
  if (filenamechi2_ != &::google::protobuf::internal::kEmptyString) {
    delete filenamechi2_;
  }
  if (filenamechi2) {
    set_has_filenamechi2();
    filenamechi2_ = filenamechi2;
  } else {
    clear_has_filenamechi2();
    filenamechi2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string FileNameChi5 = 3;
inline bool FishAlgorithmFileName::has_filenamechi5() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FishAlgorithmFileName::set_has_filenamechi5() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FishAlgorithmFileName::clear_has_filenamechi5() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FishAlgorithmFileName::clear_filenamechi5() {
  if (filenamechi5_ != &::google::protobuf::internal::kEmptyString) {
    filenamechi5_->clear();
  }
  clear_has_filenamechi5();
}
inline const ::std::string& FishAlgorithmFileName::filenamechi5() const {
  return *filenamechi5_;
}
inline void FishAlgorithmFileName::set_filenamechi5(const ::std::string& value) {
  set_has_filenamechi5();
  if (filenamechi5_ == &::google::protobuf::internal::kEmptyString) {
    filenamechi5_ = new ::std::string;
  }
  filenamechi5_->assign(value);
}
inline void FishAlgorithmFileName::set_filenamechi5(const char* value) {
  set_has_filenamechi5();
  if (filenamechi5_ == &::google::protobuf::internal::kEmptyString) {
    filenamechi5_ = new ::std::string;
  }
  filenamechi5_->assign(value);
}
inline void FishAlgorithmFileName::set_filenamechi5(const char* value, size_t size) {
  set_has_filenamechi5();
  if (filenamechi5_ == &::google::protobuf::internal::kEmptyString) {
    filenamechi5_ = new ::std::string;
  }
  filenamechi5_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FishAlgorithmFileName::mutable_filenamechi5() {
  set_has_filenamechi5();
  if (filenamechi5_ == &::google::protobuf::internal::kEmptyString) {
    filenamechi5_ = new ::std::string;
  }
  return filenamechi5_;
}
inline ::std::string* FishAlgorithmFileName::release_filenamechi5() {
  clear_has_filenamechi5();
  if (filenamechi5_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filenamechi5_;
    filenamechi5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FishAlgorithmFileName::set_allocated_filenamechi5(::std::string* filenamechi5) {
  if (filenamechi5_ != &::google::protobuf::internal::kEmptyString) {
    delete filenamechi5_;
  }
  if (filenamechi5) {
    set_has_filenamechi5();
    filenamechi5_ = filenamechi5;
  } else {
    clear_has_filenamechi5();
    filenamechi5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string FileNameChi10 = 4;
inline bool FishAlgorithmFileName::has_filenamechi10() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FishAlgorithmFileName::set_has_filenamechi10() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FishAlgorithmFileName::clear_has_filenamechi10() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FishAlgorithmFileName::clear_filenamechi10() {
  if (filenamechi10_ != &::google::protobuf::internal::kEmptyString) {
    filenamechi10_->clear();
  }
  clear_has_filenamechi10();
}
inline const ::std::string& FishAlgorithmFileName::filenamechi10() const {
  return *filenamechi10_;
}
inline void FishAlgorithmFileName::set_filenamechi10(const ::std::string& value) {
  set_has_filenamechi10();
  if (filenamechi10_ == &::google::protobuf::internal::kEmptyString) {
    filenamechi10_ = new ::std::string;
  }
  filenamechi10_->assign(value);
}
inline void FishAlgorithmFileName::set_filenamechi10(const char* value) {
  set_has_filenamechi10();
  if (filenamechi10_ == &::google::protobuf::internal::kEmptyString) {
    filenamechi10_ = new ::std::string;
  }
  filenamechi10_->assign(value);
}
inline void FishAlgorithmFileName::set_filenamechi10(const char* value, size_t size) {
  set_has_filenamechi10();
  if (filenamechi10_ == &::google::protobuf::internal::kEmptyString) {
    filenamechi10_ = new ::std::string;
  }
  filenamechi10_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FishAlgorithmFileName::mutable_filenamechi10() {
  set_has_filenamechi10();
  if (filenamechi10_ == &::google::protobuf::internal::kEmptyString) {
    filenamechi10_ = new ::std::string;
  }
  return filenamechi10_;
}
inline ::std::string* FishAlgorithmFileName::release_filenamechi10() {
  clear_has_filenamechi10();
  if (filenamechi10_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filenamechi10_;
    filenamechi10_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FishAlgorithmFileName::set_allocated_filenamechi10(::std::string* filenamechi10) {
  if (filenamechi10_ != &::google::protobuf::internal::kEmptyString) {
    delete filenamechi10_;
  }
  if (filenamechi10) {
    set_has_filenamechi10();
    filenamechi10_ = filenamechi10;
  } else {
    clear_has_filenamechi10();
    filenamechi10_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string FileNameChi20 = 5;
inline bool FishAlgorithmFileName::has_filenamechi20() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FishAlgorithmFileName::set_has_filenamechi20() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FishAlgorithmFileName::clear_has_filenamechi20() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FishAlgorithmFileName::clear_filenamechi20() {
  if (filenamechi20_ != &::google::protobuf::internal::kEmptyString) {
    filenamechi20_->clear();
  }
  clear_has_filenamechi20();
}
inline const ::std::string& FishAlgorithmFileName::filenamechi20() const {
  return *filenamechi20_;
}
inline void FishAlgorithmFileName::set_filenamechi20(const ::std::string& value) {
  set_has_filenamechi20();
  if (filenamechi20_ == &::google::protobuf::internal::kEmptyString) {
    filenamechi20_ = new ::std::string;
  }
  filenamechi20_->assign(value);
}
inline void FishAlgorithmFileName::set_filenamechi20(const char* value) {
  set_has_filenamechi20();
  if (filenamechi20_ == &::google::protobuf::internal::kEmptyString) {
    filenamechi20_ = new ::std::string;
  }
  filenamechi20_->assign(value);
}
inline void FishAlgorithmFileName::set_filenamechi20(const char* value, size_t size) {
  set_has_filenamechi20();
  if (filenamechi20_ == &::google::protobuf::internal::kEmptyString) {
    filenamechi20_ = new ::std::string;
  }
  filenamechi20_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FishAlgorithmFileName::mutable_filenamechi20() {
  set_has_filenamechi20();
  if (filenamechi20_ == &::google::protobuf::internal::kEmptyString) {
    filenamechi20_ = new ::std::string;
  }
  return filenamechi20_;
}
inline ::std::string* FishAlgorithmFileName::release_filenamechi20() {
  clear_has_filenamechi20();
  if (filenamechi20_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filenamechi20_;
    filenamechi20_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FishAlgorithmFileName::set_allocated_filenamechi20(::std::string* filenamechi20) {
  if (filenamechi20_ != &::google::protobuf::internal::kEmptyString) {
    delete filenamechi20_;
  }
  if (filenamechi20) {
    set_has_filenamechi20();
    filenamechi20_ = filenamechi20;
  } else {
    clear_has_filenamechi20();
    filenamechi20_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string FileNameChi50 = 6;
inline bool FishAlgorithmFileName::has_filenamechi50() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FishAlgorithmFileName::set_has_filenamechi50() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FishAlgorithmFileName::clear_has_filenamechi50() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FishAlgorithmFileName::clear_filenamechi50() {
  if (filenamechi50_ != &::google::protobuf::internal::kEmptyString) {
    filenamechi50_->clear();
  }
  clear_has_filenamechi50();
}
inline const ::std::string& FishAlgorithmFileName::filenamechi50() const {
  return *filenamechi50_;
}
inline void FishAlgorithmFileName::set_filenamechi50(const ::std::string& value) {
  set_has_filenamechi50();
  if (filenamechi50_ == &::google::protobuf::internal::kEmptyString) {
    filenamechi50_ = new ::std::string;
  }
  filenamechi50_->assign(value);
}
inline void FishAlgorithmFileName::set_filenamechi50(const char* value) {
  set_has_filenamechi50();
  if (filenamechi50_ == &::google::protobuf::internal::kEmptyString) {
    filenamechi50_ = new ::std::string;
  }
  filenamechi50_->assign(value);
}
inline void FishAlgorithmFileName::set_filenamechi50(const char* value, size_t size) {
  set_has_filenamechi50();
  if (filenamechi50_ == &::google::protobuf::internal::kEmptyString) {
    filenamechi50_ = new ::std::string;
  }
  filenamechi50_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FishAlgorithmFileName::mutable_filenamechi50() {
  set_has_filenamechi50();
  if (filenamechi50_ == &::google::protobuf::internal::kEmptyString) {
    filenamechi50_ = new ::std::string;
  }
  return filenamechi50_;
}
inline ::std::string* FishAlgorithmFileName::release_filenamechi50() {
  clear_has_filenamechi50();
  if (filenamechi50_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filenamechi50_;
    filenamechi50_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FishAlgorithmFileName::set_allocated_filenamechi50(::std::string* filenamechi50) {
  if (filenamechi50_ != &::google::protobuf::internal::kEmptyString) {
    delete filenamechi50_;
  }
  if (filenamechi50) {
    set_has_filenamechi50();
    filenamechi50_ = filenamechi50;
  } else {
    clear_has_filenamechi50();
    filenamechi50_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string FileNameChi100 = 7;
inline bool FishAlgorithmFileName::has_filenamechi100() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FishAlgorithmFileName::set_has_filenamechi100() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FishAlgorithmFileName::clear_has_filenamechi100() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FishAlgorithmFileName::clear_filenamechi100() {
  if (filenamechi100_ != &::google::protobuf::internal::kEmptyString) {
    filenamechi100_->clear();
  }
  clear_has_filenamechi100();
}
inline const ::std::string& FishAlgorithmFileName::filenamechi100() const {
  return *filenamechi100_;
}
inline void FishAlgorithmFileName::set_filenamechi100(const ::std::string& value) {
  set_has_filenamechi100();
  if (filenamechi100_ == &::google::protobuf::internal::kEmptyString) {
    filenamechi100_ = new ::std::string;
  }
  filenamechi100_->assign(value);
}
inline void FishAlgorithmFileName::set_filenamechi100(const char* value) {
  set_has_filenamechi100();
  if (filenamechi100_ == &::google::protobuf::internal::kEmptyString) {
    filenamechi100_ = new ::std::string;
  }
  filenamechi100_->assign(value);
}
inline void FishAlgorithmFileName::set_filenamechi100(const char* value, size_t size) {
  set_has_filenamechi100();
  if (filenamechi100_ == &::google::protobuf::internal::kEmptyString) {
    filenamechi100_ = new ::std::string;
  }
  filenamechi100_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FishAlgorithmFileName::mutable_filenamechi100() {
  set_has_filenamechi100();
  if (filenamechi100_ == &::google::protobuf::internal::kEmptyString) {
    filenamechi100_ = new ::std::string;
  }
  return filenamechi100_;
}
inline ::std::string* FishAlgorithmFileName::release_filenamechi100() {
  clear_has_filenamechi100();
  if (filenamechi100_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filenamechi100_;
    filenamechi100_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FishAlgorithmFileName::set_allocated_filenamechi100(::std::string* filenamechi100) {
  if (filenamechi100_ != &::google::protobuf::internal::kEmptyString) {
    delete filenamechi100_;
  }
  if (filenamechi100) {
    set_has_filenamechi100();
    filenamechi100_ = filenamechi100;
  } else {
    clear_has_filenamechi100();
    filenamechi100_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string FileNameChi200 = 8;
inline bool FishAlgorithmFileName::has_filenamechi200() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FishAlgorithmFileName::set_has_filenamechi200() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FishAlgorithmFileName::clear_has_filenamechi200() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FishAlgorithmFileName::clear_filenamechi200() {
  if (filenamechi200_ != &::google::protobuf::internal::kEmptyString) {
    filenamechi200_->clear();
  }
  clear_has_filenamechi200();
}
inline const ::std::string& FishAlgorithmFileName::filenamechi200() const {
  return *filenamechi200_;
}
inline void FishAlgorithmFileName::set_filenamechi200(const ::std::string& value) {
  set_has_filenamechi200();
  if (filenamechi200_ == &::google::protobuf::internal::kEmptyString) {
    filenamechi200_ = new ::std::string;
  }
  filenamechi200_->assign(value);
}
inline void FishAlgorithmFileName::set_filenamechi200(const char* value) {
  set_has_filenamechi200();
  if (filenamechi200_ == &::google::protobuf::internal::kEmptyString) {
    filenamechi200_ = new ::std::string;
  }
  filenamechi200_->assign(value);
}
inline void FishAlgorithmFileName::set_filenamechi200(const char* value, size_t size) {
  set_has_filenamechi200();
  if (filenamechi200_ == &::google::protobuf::internal::kEmptyString) {
    filenamechi200_ = new ::std::string;
  }
  filenamechi200_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FishAlgorithmFileName::mutable_filenamechi200() {
  set_has_filenamechi200();
  if (filenamechi200_ == &::google::protobuf::internal::kEmptyString) {
    filenamechi200_ = new ::std::string;
  }
  return filenamechi200_;
}
inline ::std::string* FishAlgorithmFileName::release_filenamechi200() {
  clear_has_filenamechi200();
  if (filenamechi200_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filenamechi200_;
    filenamechi200_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FishAlgorithmFileName::set_allocated_filenamechi200(::std::string* filenamechi200) {
  if (filenamechi200_ != &::google::protobuf::internal::kEmptyString) {
    delete filenamechi200_;
  }
  if (filenamechi200) {
    set_has_filenamechi200();
    filenamechi200_ = filenamechi200;
  } else {
    clear_has_filenamechi200();
    filenamechi200_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string FileNameFang1 = 11;
inline bool FishAlgorithmFileName::has_filenamefang1() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FishAlgorithmFileName::set_has_filenamefang1() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FishAlgorithmFileName::clear_has_filenamefang1() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FishAlgorithmFileName::clear_filenamefang1() {
  if (filenamefang1_ != &::google::protobuf::internal::kEmptyString) {
    filenamefang1_->clear();
  }
  clear_has_filenamefang1();
}
inline const ::std::string& FishAlgorithmFileName::filenamefang1() const {
  return *filenamefang1_;
}
inline void FishAlgorithmFileName::set_filenamefang1(const ::std::string& value) {
  set_has_filenamefang1();
  if (filenamefang1_ == &::google::protobuf::internal::kEmptyString) {
    filenamefang1_ = new ::std::string;
  }
  filenamefang1_->assign(value);
}
inline void FishAlgorithmFileName::set_filenamefang1(const char* value) {
  set_has_filenamefang1();
  if (filenamefang1_ == &::google::protobuf::internal::kEmptyString) {
    filenamefang1_ = new ::std::string;
  }
  filenamefang1_->assign(value);
}
inline void FishAlgorithmFileName::set_filenamefang1(const char* value, size_t size) {
  set_has_filenamefang1();
  if (filenamefang1_ == &::google::protobuf::internal::kEmptyString) {
    filenamefang1_ = new ::std::string;
  }
  filenamefang1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FishAlgorithmFileName::mutable_filenamefang1() {
  set_has_filenamefang1();
  if (filenamefang1_ == &::google::protobuf::internal::kEmptyString) {
    filenamefang1_ = new ::std::string;
  }
  return filenamefang1_;
}
inline ::std::string* FishAlgorithmFileName::release_filenamefang1() {
  clear_has_filenamefang1();
  if (filenamefang1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filenamefang1_;
    filenamefang1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FishAlgorithmFileName::set_allocated_filenamefang1(::std::string* filenamefang1) {
  if (filenamefang1_ != &::google::protobuf::internal::kEmptyString) {
    delete filenamefang1_;
  }
  if (filenamefang1) {
    set_has_filenamefang1();
    filenamefang1_ = filenamefang1;
  } else {
    clear_has_filenamefang1();
    filenamefang1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string FileNameFang2 = 12;
inline bool FishAlgorithmFileName::has_filenamefang2() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FishAlgorithmFileName::set_has_filenamefang2() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FishAlgorithmFileName::clear_has_filenamefang2() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FishAlgorithmFileName::clear_filenamefang2() {
  if (filenamefang2_ != &::google::protobuf::internal::kEmptyString) {
    filenamefang2_->clear();
  }
  clear_has_filenamefang2();
}
inline const ::std::string& FishAlgorithmFileName::filenamefang2() const {
  return *filenamefang2_;
}
inline void FishAlgorithmFileName::set_filenamefang2(const ::std::string& value) {
  set_has_filenamefang2();
  if (filenamefang2_ == &::google::protobuf::internal::kEmptyString) {
    filenamefang2_ = new ::std::string;
  }
  filenamefang2_->assign(value);
}
inline void FishAlgorithmFileName::set_filenamefang2(const char* value) {
  set_has_filenamefang2();
  if (filenamefang2_ == &::google::protobuf::internal::kEmptyString) {
    filenamefang2_ = new ::std::string;
  }
  filenamefang2_->assign(value);
}
inline void FishAlgorithmFileName::set_filenamefang2(const char* value, size_t size) {
  set_has_filenamefang2();
  if (filenamefang2_ == &::google::protobuf::internal::kEmptyString) {
    filenamefang2_ = new ::std::string;
  }
  filenamefang2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FishAlgorithmFileName::mutable_filenamefang2() {
  set_has_filenamefang2();
  if (filenamefang2_ == &::google::protobuf::internal::kEmptyString) {
    filenamefang2_ = new ::std::string;
  }
  return filenamefang2_;
}
inline ::std::string* FishAlgorithmFileName::release_filenamefang2() {
  clear_has_filenamefang2();
  if (filenamefang2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filenamefang2_;
    filenamefang2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FishAlgorithmFileName::set_allocated_filenamefang2(::std::string* filenamefang2) {
  if (filenamefang2_ != &::google::protobuf::internal::kEmptyString) {
    delete filenamefang2_;
  }
  if (filenamefang2) {
    set_has_filenamefang2();
    filenamefang2_ = filenamefang2;
  } else {
    clear_has_filenamefang2();
    filenamefang2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string FileNameFang5 = 13;
inline bool FishAlgorithmFileName::has_filenamefang5() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FishAlgorithmFileName::set_has_filenamefang5() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FishAlgorithmFileName::clear_has_filenamefang5() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FishAlgorithmFileName::clear_filenamefang5() {
  if (filenamefang5_ != &::google::protobuf::internal::kEmptyString) {
    filenamefang5_->clear();
  }
  clear_has_filenamefang5();
}
inline const ::std::string& FishAlgorithmFileName::filenamefang5() const {
  return *filenamefang5_;
}
inline void FishAlgorithmFileName::set_filenamefang5(const ::std::string& value) {
  set_has_filenamefang5();
  if (filenamefang5_ == &::google::protobuf::internal::kEmptyString) {
    filenamefang5_ = new ::std::string;
  }
  filenamefang5_->assign(value);
}
inline void FishAlgorithmFileName::set_filenamefang5(const char* value) {
  set_has_filenamefang5();
  if (filenamefang5_ == &::google::protobuf::internal::kEmptyString) {
    filenamefang5_ = new ::std::string;
  }
  filenamefang5_->assign(value);
}
inline void FishAlgorithmFileName::set_filenamefang5(const char* value, size_t size) {
  set_has_filenamefang5();
  if (filenamefang5_ == &::google::protobuf::internal::kEmptyString) {
    filenamefang5_ = new ::std::string;
  }
  filenamefang5_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FishAlgorithmFileName::mutable_filenamefang5() {
  set_has_filenamefang5();
  if (filenamefang5_ == &::google::protobuf::internal::kEmptyString) {
    filenamefang5_ = new ::std::string;
  }
  return filenamefang5_;
}
inline ::std::string* FishAlgorithmFileName::release_filenamefang5() {
  clear_has_filenamefang5();
  if (filenamefang5_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filenamefang5_;
    filenamefang5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FishAlgorithmFileName::set_allocated_filenamefang5(::std::string* filenamefang5) {
  if (filenamefang5_ != &::google::protobuf::internal::kEmptyString) {
    delete filenamefang5_;
  }
  if (filenamefang5) {
    set_has_filenamefang5();
    filenamefang5_ = filenamefang5;
  } else {
    clear_has_filenamefang5();
    filenamefang5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string FileNameFang10 = 14;
inline bool FishAlgorithmFileName::has_filenamefang10() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FishAlgorithmFileName::set_has_filenamefang10() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FishAlgorithmFileName::clear_has_filenamefang10() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FishAlgorithmFileName::clear_filenamefang10() {
  if (filenamefang10_ != &::google::protobuf::internal::kEmptyString) {
    filenamefang10_->clear();
  }
  clear_has_filenamefang10();
}
inline const ::std::string& FishAlgorithmFileName::filenamefang10() const {
  return *filenamefang10_;
}
inline void FishAlgorithmFileName::set_filenamefang10(const ::std::string& value) {
  set_has_filenamefang10();
  if (filenamefang10_ == &::google::protobuf::internal::kEmptyString) {
    filenamefang10_ = new ::std::string;
  }
  filenamefang10_->assign(value);
}
inline void FishAlgorithmFileName::set_filenamefang10(const char* value) {
  set_has_filenamefang10();
  if (filenamefang10_ == &::google::protobuf::internal::kEmptyString) {
    filenamefang10_ = new ::std::string;
  }
  filenamefang10_->assign(value);
}
inline void FishAlgorithmFileName::set_filenamefang10(const char* value, size_t size) {
  set_has_filenamefang10();
  if (filenamefang10_ == &::google::protobuf::internal::kEmptyString) {
    filenamefang10_ = new ::std::string;
  }
  filenamefang10_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FishAlgorithmFileName::mutable_filenamefang10() {
  set_has_filenamefang10();
  if (filenamefang10_ == &::google::protobuf::internal::kEmptyString) {
    filenamefang10_ = new ::std::string;
  }
  return filenamefang10_;
}
inline ::std::string* FishAlgorithmFileName::release_filenamefang10() {
  clear_has_filenamefang10();
  if (filenamefang10_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filenamefang10_;
    filenamefang10_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FishAlgorithmFileName::set_allocated_filenamefang10(::std::string* filenamefang10) {
  if (filenamefang10_ != &::google::protobuf::internal::kEmptyString) {
    delete filenamefang10_;
  }
  if (filenamefang10) {
    set_has_filenamefang10();
    filenamefang10_ = filenamefang10;
  } else {
    clear_has_filenamefang10();
    filenamefang10_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string FileNameFang20 = 15;
inline bool FishAlgorithmFileName::has_filenamefang20() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FishAlgorithmFileName::set_has_filenamefang20() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FishAlgorithmFileName::clear_has_filenamefang20() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FishAlgorithmFileName::clear_filenamefang20() {
  if (filenamefang20_ != &::google::protobuf::internal::kEmptyString) {
    filenamefang20_->clear();
  }
  clear_has_filenamefang20();
}
inline const ::std::string& FishAlgorithmFileName::filenamefang20() const {
  return *filenamefang20_;
}
inline void FishAlgorithmFileName::set_filenamefang20(const ::std::string& value) {
  set_has_filenamefang20();
  if (filenamefang20_ == &::google::protobuf::internal::kEmptyString) {
    filenamefang20_ = new ::std::string;
  }
  filenamefang20_->assign(value);
}
inline void FishAlgorithmFileName::set_filenamefang20(const char* value) {
  set_has_filenamefang20();
  if (filenamefang20_ == &::google::protobuf::internal::kEmptyString) {
    filenamefang20_ = new ::std::string;
  }
  filenamefang20_->assign(value);
}
inline void FishAlgorithmFileName::set_filenamefang20(const char* value, size_t size) {
  set_has_filenamefang20();
  if (filenamefang20_ == &::google::protobuf::internal::kEmptyString) {
    filenamefang20_ = new ::std::string;
  }
  filenamefang20_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FishAlgorithmFileName::mutable_filenamefang20() {
  set_has_filenamefang20();
  if (filenamefang20_ == &::google::protobuf::internal::kEmptyString) {
    filenamefang20_ = new ::std::string;
  }
  return filenamefang20_;
}
inline ::std::string* FishAlgorithmFileName::release_filenamefang20() {
  clear_has_filenamefang20();
  if (filenamefang20_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filenamefang20_;
    filenamefang20_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FishAlgorithmFileName::set_allocated_filenamefang20(::std::string* filenamefang20) {
  if (filenamefang20_ != &::google::protobuf::internal::kEmptyString) {
    delete filenamefang20_;
  }
  if (filenamefang20) {
    set_has_filenamefang20();
    filenamefang20_ = filenamefang20;
  } else {
    clear_has_filenamefang20();
    filenamefang20_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string FileNameFang50 = 16;
inline bool FishAlgorithmFileName::has_filenamefang50() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FishAlgorithmFileName::set_has_filenamefang50() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FishAlgorithmFileName::clear_has_filenamefang50() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FishAlgorithmFileName::clear_filenamefang50() {
  if (filenamefang50_ != &::google::protobuf::internal::kEmptyString) {
    filenamefang50_->clear();
  }
  clear_has_filenamefang50();
}
inline const ::std::string& FishAlgorithmFileName::filenamefang50() const {
  return *filenamefang50_;
}
inline void FishAlgorithmFileName::set_filenamefang50(const ::std::string& value) {
  set_has_filenamefang50();
  if (filenamefang50_ == &::google::protobuf::internal::kEmptyString) {
    filenamefang50_ = new ::std::string;
  }
  filenamefang50_->assign(value);
}
inline void FishAlgorithmFileName::set_filenamefang50(const char* value) {
  set_has_filenamefang50();
  if (filenamefang50_ == &::google::protobuf::internal::kEmptyString) {
    filenamefang50_ = new ::std::string;
  }
  filenamefang50_->assign(value);
}
inline void FishAlgorithmFileName::set_filenamefang50(const char* value, size_t size) {
  set_has_filenamefang50();
  if (filenamefang50_ == &::google::protobuf::internal::kEmptyString) {
    filenamefang50_ = new ::std::string;
  }
  filenamefang50_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FishAlgorithmFileName::mutable_filenamefang50() {
  set_has_filenamefang50();
  if (filenamefang50_ == &::google::protobuf::internal::kEmptyString) {
    filenamefang50_ = new ::std::string;
  }
  return filenamefang50_;
}
inline ::std::string* FishAlgorithmFileName::release_filenamefang50() {
  clear_has_filenamefang50();
  if (filenamefang50_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filenamefang50_;
    filenamefang50_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FishAlgorithmFileName::set_allocated_filenamefang50(::std::string* filenamefang50) {
  if (filenamefang50_ != &::google::protobuf::internal::kEmptyString) {
    delete filenamefang50_;
  }
  if (filenamefang50) {
    set_has_filenamefang50();
    filenamefang50_ = filenamefang50;
  } else {
    clear_has_filenamefang50();
    filenamefang50_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string FileNameFang100 = 17;
inline bool FishAlgorithmFileName::has_filenamefang100() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FishAlgorithmFileName::set_has_filenamefang100() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FishAlgorithmFileName::clear_has_filenamefang100() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FishAlgorithmFileName::clear_filenamefang100() {
  if (filenamefang100_ != &::google::protobuf::internal::kEmptyString) {
    filenamefang100_->clear();
  }
  clear_has_filenamefang100();
}
inline const ::std::string& FishAlgorithmFileName::filenamefang100() const {
  return *filenamefang100_;
}
inline void FishAlgorithmFileName::set_filenamefang100(const ::std::string& value) {
  set_has_filenamefang100();
  if (filenamefang100_ == &::google::protobuf::internal::kEmptyString) {
    filenamefang100_ = new ::std::string;
  }
  filenamefang100_->assign(value);
}
inline void FishAlgorithmFileName::set_filenamefang100(const char* value) {
  set_has_filenamefang100();
  if (filenamefang100_ == &::google::protobuf::internal::kEmptyString) {
    filenamefang100_ = new ::std::string;
  }
  filenamefang100_->assign(value);
}
inline void FishAlgorithmFileName::set_filenamefang100(const char* value, size_t size) {
  set_has_filenamefang100();
  if (filenamefang100_ == &::google::protobuf::internal::kEmptyString) {
    filenamefang100_ = new ::std::string;
  }
  filenamefang100_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FishAlgorithmFileName::mutable_filenamefang100() {
  set_has_filenamefang100();
  if (filenamefang100_ == &::google::protobuf::internal::kEmptyString) {
    filenamefang100_ = new ::std::string;
  }
  return filenamefang100_;
}
inline ::std::string* FishAlgorithmFileName::release_filenamefang100() {
  clear_has_filenamefang100();
  if (filenamefang100_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filenamefang100_;
    filenamefang100_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FishAlgorithmFileName::set_allocated_filenamefang100(::std::string* filenamefang100) {
  if (filenamefang100_ != &::google::protobuf::internal::kEmptyString) {
    delete filenamefang100_;
  }
  if (filenamefang100) {
    set_has_filenamefang100();
    filenamefang100_ = filenamefang100;
  } else {
    clear_has_filenamefang100();
    filenamefang100_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string FileNameFang200 = 18;
inline bool FishAlgorithmFileName::has_filenamefang200() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FishAlgorithmFileName::set_has_filenamefang200() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FishAlgorithmFileName::clear_has_filenamefang200() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FishAlgorithmFileName::clear_filenamefang200() {
  if (filenamefang200_ != &::google::protobuf::internal::kEmptyString) {
    filenamefang200_->clear();
  }
  clear_has_filenamefang200();
}
inline const ::std::string& FishAlgorithmFileName::filenamefang200() const {
  return *filenamefang200_;
}
inline void FishAlgorithmFileName::set_filenamefang200(const ::std::string& value) {
  set_has_filenamefang200();
  if (filenamefang200_ == &::google::protobuf::internal::kEmptyString) {
    filenamefang200_ = new ::std::string;
  }
  filenamefang200_->assign(value);
}
inline void FishAlgorithmFileName::set_filenamefang200(const char* value) {
  set_has_filenamefang200();
  if (filenamefang200_ == &::google::protobuf::internal::kEmptyString) {
    filenamefang200_ = new ::std::string;
  }
  filenamefang200_->assign(value);
}
inline void FishAlgorithmFileName::set_filenamefang200(const char* value, size_t size) {
  set_has_filenamefang200();
  if (filenamefang200_ == &::google::protobuf::internal::kEmptyString) {
    filenamefang200_ = new ::std::string;
  }
  filenamefang200_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FishAlgorithmFileName::mutable_filenamefang200() {
  set_has_filenamefang200();
  if (filenamefang200_ == &::google::protobuf::internal::kEmptyString) {
    filenamefang200_ = new ::std::string;
  }
  return filenamefang200_;
}
inline ::std::string* FishAlgorithmFileName::release_filenamefang200() {
  clear_has_filenamefang200();
  if (filenamefang200_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filenamefang200_;
    filenamefang200_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FishAlgorithmFileName::set_allocated_filenamefang200(::std::string* filenamefang200) {
  if (filenamefang200_ != &::google::protobuf::internal::kEmptyString) {
    delete filenamefang200_;
  }
  if (filenamefang200) {
    set_has_filenamefang200();
    filenamefang200_ = filenamefang200;
  } else {
    clear_has_filenamefang200();
    filenamefang200_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FishAlgorithmCsvItem

// repeated int32 value = 1;
inline int FishAlgorithmCsvItem::value_size() const {
  return value_.size();
}
inline void FishAlgorithmCsvItem::clear_value() {
  value_.Clear();
}
inline ::google::protobuf::int32 FishAlgorithmCsvItem::value(int index) const {
  return value_.Get(index);
}
inline void FishAlgorithmCsvItem::set_value(int index, ::google::protobuf::int32 value) {
  value_.Set(index, value);
}
inline void FishAlgorithmCsvItem::add_value(::google::protobuf::int32 value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FishAlgorithmCsvItem::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FishAlgorithmCsvItem::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// FishAlgorithmCsv

// repeated .proto_ff.FishAlgorithmCsvItem item = 1;
inline int FishAlgorithmCsv::item_size() const {
  return item_.size();
}
inline void FishAlgorithmCsv::clear_item() {
  item_.Clear();
}
inline const ::proto_ff::FishAlgorithmCsvItem& FishAlgorithmCsv::item(int index) const {
  return item_.Get(index);
}
inline ::proto_ff::FishAlgorithmCsvItem* FishAlgorithmCsv::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::proto_ff::FishAlgorithmCsvItem* FishAlgorithmCsv::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FishAlgorithmCsvItem >&
FishAlgorithmCsv::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FishAlgorithmCsvItem >*
FishAlgorithmCsv::mutable_item() {
  return &item_;
}

// -------------------------------------------------------------------

// FishNormalSetup

// optional int32 SwitchBossTime = 1;
inline bool FishNormalSetup::has_switchbosstime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FishNormalSetup::set_has_switchbosstime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FishNormalSetup::clear_has_switchbosstime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FishNormalSetup::clear_switchbosstime() {
  switchbosstime_ = 0;
  clear_has_switchbosstime();
}
inline ::google::protobuf::int32 FishNormalSetup::switchbosstime() const {
  return switchbosstime_;
}
inline void FishNormalSetup::set_switchbosstime(::google::protobuf::int32 value) {
  set_has_switchbosstime();
  switchbosstime_ = value;
}

// optional int32 SwitchSceneTime = 2;
inline bool FishNormalSetup::has_switchscenetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FishNormalSetup::set_has_switchscenetime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FishNormalSetup::clear_has_switchscenetime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FishNormalSetup::clear_switchscenetime() {
  switchscenetime_ = 0;
  clear_has_switchscenetime();
}
inline ::google::protobuf::int32 FishNormalSetup::switchscenetime() const {
  return switchscenetime_;
}
inline void FishNormalSetup::set_switchscenetime(::google::protobuf::int32 value) {
  set_has_switchscenetime();
  switchscenetime_ = value;
}

// optional int32 InitSceneIndex = 3;
inline bool FishNormalSetup::has_initsceneindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FishNormalSetup::set_has_initsceneindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FishNormalSetup::clear_has_initsceneindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FishNormalSetup::clear_initsceneindex() {
  initsceneindex_ = 0;
  clear_has_initsceneindex();
}
inline ::google::protobuf::int32 FishNormalSetup::initsceneindex() const {
  return initsceneindex_;
}
inline void FishNormalSetup::set_initsceneindex(::google::protobuf::int32 value) {
  set_has_initsceneindex();
  initsceneindex_ = value;
}

// optional int32 AwardPoolSaveToDBTime = 4;
inline bool FishNormalSetup::has_awardpoolsavetodbtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FishNormalSetup::set_has_awardpoolsavetodbtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FishNormalSetup::clear_has_awardpoolsavetodbtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FishNormalSetup::clear_awardpoolsavetodbtime() {
  awardpoolsavetodbtime_ = 0;
  clear_has_awardpoolsavetodbtime();
}
inline ::google::protobuf::int32 FishNormalSetup::awardpoolsavetodbtime() const {
  return awardpoolsavetodbtime_;
}
inline void FishNormalSetup::set_awardpoolsavetodbtime(::google::protobuf::int32 value) {
  set_has_awardpoolsavetodbtime();
  awardpoolsavetodbtime_ = value;
}

// optional int32 ClearTraceTime = 5;
inline bool FishNormalSetup::has_cleartracetime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FishNormalSetup::set_has_cleartracetime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FishNormalSetup::clear_has_cleartracetime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FishNormalSetup::clear_cleartracetime() {
  cleartracetime_ = 0;
  clear_has_cleartracetime();
}
inline ::google::protobuf::int32 FishNormalSetup::cleartracetime() const {
  return cleartracetime_;
}
inline void FishNormalSetup::set_cleartracetime(::google::protobuf::int32 value) {
  set_has_cleartracetime();
  cleartracetime_ = value;
}

// repeated int32 CannonLevelVal = 6;
inline int FishNormalSetup::cannonlevelval_size() const {
  return cannonlevelval_.size();
}
inline void FishNormalSetup::clear_cannonlevelval() {
  cannonlevelval_.Clear();
}
inline ::google::protobuf::int32 FishNormalSetup::cannonlevelval(int index) const {
  return cannonlevelval_.Get(index);
}
inline void FishNormalSetup::set_cannonlevelval(int index, ::google::protobuf::int32 value) {
  cannonlevelval_.Set(index, value);
}
inline void FishNormalSetup::add_cannonlevelval(::google::protobuf::int32 value) {
  cannonlevelval_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FishNormalSetup::cannonlevelval() const {
  return cannonlevelval_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FishNormalSetup::mutable_cannonlevelval() {
  return &cannonlevelval_;
}

// repeated int32 CannonShowNum = 7;
inline int FishNormalSetup::cannonshownum_size() const {
  return cannonshownum_.size();
}
inline void FishNormalSetup::clear_cannonshownum() {
  cannonshownum_.Clear();
}
inline ::google::protobuf::int32 FishNormalSetup::cannonshownum(int index) const {
  return cannonshownum_.Get(index);
}
inline void FishNormalSetup::set_cannonshownum(int index, ::google::protobuf::int32 value) {
  cannonshownum_.Set(index, value);
}
inline void FishNormalSetup::add_cannonshownum(::google::protobuf::int32 value) {
  cannonshownum_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FishNormalSetup::cannonshownum() const {
  return cannonshownum_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FishNormalSetup::mutable_cannonshownum() {
  return &cannonshownum_;
}

// repeated double BulletHarmAddBFB = 8;
inline int FishNormalSetup::bulletharmaddbfb_size() const {
  return bulletharmaddbfb_.size();
}
inline void FishNormalSetup::clear_bulletharmaddbfb() {
  bulletharmaddbfb_.Clear();
}
inline double FishNormalSetup::bulletharmaddbfb(int index) const {
  return bulletharmaddbfb_.Get(index);
}
inline void FishNormalSetup::set_bulletharmaddbfb(int index, double value) {
  bulletharmaddbfb_.Set(index, value);
}
inline void FishNormalSetup::add_bulletharmaddbfb(double value) {
  bulletharmaddbfb_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
FishNormalSetup::bulletharmaddbfb() const {
  return bulletharmaddbfb_;
}
inline ::google::protobuf::RepeatedField< double >*
FishNormalSetup::mutable_bulletharmaddbfb() {
  return &bulletharmaddbfb_;
}

// optional int32 BulletCountInScreen = 9;
inline bool FishNormalSetup::has_bulletcountinscreen() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FishNormalSetup::set_has_bulletcountinscreen() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FishNormalSetup::clear_has_bulletcountinscreen() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FishNormalSetup::clear_bulletcountinscreen() {
  bulletcountinscreen_ = 0;
  clear_has_bulletcountinscreen();
}
inline ::google::protobuf::int32 FishNormalSetup::bulletcountinscreen() const {
  return bulletcountinscreen_;
}
inline void FishNormalSetup::set_bulletcountinscreen(::google::protobuf::int32 value) {
  set_has_bulletcountinscreen();
  bulletcountinscreen_ = value;
}

// optional int32 TotalSceneCount = 10;
inline bool FishNormalSetup::has_totalscenecount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FishNormalSetup::set_has_totalscenecount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FishNormalSetup::clear_has_totalscenecount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FishNormalSetup::clear_totalscenecount() {
  totalscenecount_ = 0;
  clear_has_totalscenecount();
}
inline ::google::protobuf::int32 FishNormalSetup::totalscenecount() const {
  return totalscenecount_;
}
inline void FishNormalSetup::set_totalscenecount(::google::protobuf::int32 value) {
  set_has_totalscenecount();
  totalscenecount_ = value;
}

// optional int32 ScreenFishMaxCount = 11;
inline bool FishNormalSetup::has_screenfishmaxcount() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FishNormalSetup::set_has_screenfishmaxcount() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FishNormalSetup::clear_has_screenfishmaxcount() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FishNormalSetup::clear_screenfishmaxcount() {
  screenfishmaxcount_ = 0;
  clear_has_screenfishmaxcount();
}
inline ::google::protobuf::int32 FishNormalSetup::screenfishmaxcount() const {
  return screenfishmaxcount_;
}
inline void FishNormalSetup::set_screenfishmaxcount(::google::protobuf::int32 value) {
  set_has_screenfishmaxcount();
  screenfishmaxcount_ = value;
}

// optional int32 ClientNotOperateTipTimes = 12;
inline bool FishNormalSetup::has_clientnotoperatetiptimes() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FishNormalSetup::set_has_clientnotoperatetiptimes() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FishNormalSetup::clear_has_clientnotoperatetiptimes() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FishNormalSetup::clear_clientnotoperatetiptimes() {
  clientnotoperatetiptimes_ = 0;
  clear_has_clientnotoperatetiptimes();
}
inline ::google::protobuf::int32 FishNormalSetup::clientnotoperatetiptimes() const {
  return clientnotoperatetiptimes_;
}
inline void FishNormalSetup::set_clientnotoperatetiptimes(::google::protobuf::int32 value) {
  set_has_clientnotoperatetiptimes();
  clientnotoperatetiptimes_ = value;
}

// optional int32 ClientExitTimes = 13;
inline bool FishNormalSetup::has_clientexittimes() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FishNormalSetup::set_has_clientexittimes() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FishNormalSetup::clear_has_clientexittimes() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FishNormalSetup::clear_clientexittimes() {
  clientexittimes_ = 0;
  clear_has_clientexittimes();
}
inline ::google::protobuf::int32 FishNormalSetup::clientexittimes() const {
  return clientexittimes_;
}
inline void FishNormalSetup::set_clientexittimes(::google::protobuf::int32 value) {
  set_has_clientexittimes();
  clientexittimes_ = value;
}

// optional int32 TestFishMustKilled = 14;
inline bool FishNormalSetup::has_testfishmustkilled() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FishNormalSetup::set_has_testfishmustkilled() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FishNormalSetup::clear_has_testfishmustkilled() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FishNormalSetup::clear_testfishmustkilled() {
  testfishmustkilled_ = 0;
  clear_has_testfishmustkilled();
}
inline ::google::protobuf::int32 FishNormalSetup::testfishmustkilled() const {
  return testfishmustkilled_;
}
inline void FishNormalSetup::set_testfishmustkilled(::google::protobuf::int32 value) {
  set_has_testfishmustkilled();
  testfishmustkilled_ = value;
}

// optional int32 ClientLessMoneyTip = 15;
inline bool FishNormalSetup::has_clientlessmoneytip() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FishNormalSetup::set_has_clientlessmoneytip() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FishNormalSetup::clear_has_clientlessmoneytip() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FishNormalSetup::clear_clientlessmoneytip() {
  clientlessmoneytip_ = 0;
  clear_has_clientlessmoneytip();
}
inline ::google::protobuf::int32 FishNormalSetup::clientlessmoneytip() const {
  return clientlessmoneytip_;
}
inline void FishNormalSetup::set_clientlessmoneytip(::google::protobuf::int32 value) {
  set_has_clientlessmoneytip();
  clientlessmoneytip_ = value;
}

// optional int32 TurnTableCalcMinByOneJu = 16;
inline bool FishNormalSetup::has_turntablecalcminbyoneju() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FishNormalSetup::set_has_turntablecalcminbyoneju() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FishNormalSetup::clear_has_turntablecalcminbyoneju() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FishNormalSetup::clear_turntablecalcminbyoneju() {
  turntablecalcminbyoneju_ = 0;
  clear_has_turntablecalcminbyoneju();
}
inline ::google::protobuf::int32 FishNormalSetup::turntablecalcminbyoneju() const {
  return turntablecalcminbyoneju_;
}
inline void FishNormalSetup::set_turntablecalcminbyoneju(::google::protobuf::int32 value) {
  set_has_turntablecalcminbyoneju();
  turntablecalcminbyoneju_ = value;
}

// optional int32 UserSettlementTimes = 17;
inline bool FishNormalSetup::has_usersettlementtimes() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void FishNormalSetup::set_has_usersettlementtimes() {
  _has_bits_[0] |= 0x00010000u;
}
inline void FishNormalSetup::clear_has_usersettlementtimes() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void FishNormalSetup::clear_usersettlementtimes() {
  usersettlementtimes_ = 0;
  clear_has_usersettlementtimes();
}
inline ::google::protobuf::int32 FishNormalSetup::usersettlementtimes() const {
  return usersettlementtimes_;
}
inline void FishNormalSetup::set_usersettlementtimes(::google::protobuf::int32 value) {
  set_has_usersettlementtimes();
  usersettlementtimes_ = value;
}

// optional int32 TipBaoJiMoney = 18;
inline bool FishNormalSetup::has_tipbaojimoney() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void FishNormalSetup::set_has_tipbaojimoney() {
  _has_bits_[0] |= 0x00020000u;
}
inline void FishNormalSetup::clear_has_tipbaojimoney() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void FishNormalSetup::clear_tipbaojimoney() {
  tipbaojimoney_ = 0;
  clear_has_tipbaojimoney();
}
inline ::google::protobuf::int32 FishNormalSetup::tipbaojimoney() const {
  return tipbaojimoney_;
}
inline void FishNormalSetup::set_tipbaojimoney(::google::protobuf::int32 value) {
  set_has_tipbaojimoney();
  tipbaojimoney_ = value;
}

// optional int32 BatchSendFishesInterval = 19;
inline bool FishNormalSetup::has_batchsendfishesinterval() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void FishNormalSetup::set_has_batchsendfishesinterval() {
  _has_bits_[0] |= 0x00040000u;
}
inline void FishNormalSetup::clear_has_batchsendfishesinterval() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void FishNormalSetup::clear_batchsendfishesinterval() {
  batchsendfishesinterval_ = 0;
  clear_has_batchsendfishesinterval();
}
inline ::google::protobuf::int32 FishNormalSetup::batchsendfishesinterval() const {
  return batchsendfishesinterval_;
}
inline void FishNormalSetup::set_batchsendfishesinterval(::google::protobuf::int32 value) {
  set_has_batchsendfishesinterval();
  batchsendfishesinterval_ = value;
}

// optional int32 BatchSendFishesCount = 20;
inline bool FishNormalSetup::has_batchsendfishescount() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void FishNormalSetup::set_has_batchsendfishescount() {
  _has_bits_[0] |= 0x00080000u;
}
inline void FishNormalSetup::clear_has_batchsendfishescount() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void FishNormalSetup::clear_batchsendfishescount() {
  batchsendfishescount_ = 0;
  clear_has_batchsendfishescount();
}
inline ::google::protobuf::int32 FishNormalSetup::batchsendfishescount() const {
  return batchsendfishescount_;
}
inline void FishNormalSetup::set_batchsendfishescount(::google::protobuf::int32 value) {
  set_has_batchsendfishescount();
  batchsendfishescount_ = value;
}

// optional int32 SwitchScenePrepareTime = 21;
inline bool FishNormalSetup::has_switchscenepreparetime() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void FishNormalSetup::set_has_switchscenepreparetime() {
  _has_bits_[0] |= 0x00100000u;
}
inline void FishNormalSetup::clear_has_switchscenepreparetime() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void FishNormalSetup::clear_switchscenepreparetime() {
  switchscenepreparetime_ = 0;
  clear_has_switchscenepreparetime();
}
inline ::google::protobuf::int32 FishNormalSetup::switchscenepreparetime() const {
  return switchscenepreparetime_;
}
inline void FishNormalSetup::set_switchscenepreparetime(::google::protobuf::int32 value) {
  set_has_switchscenepreparetime();
  switchscenepreparetime_ = value;
}

// optional int32 SwitchSceneFishGoAwayTime = 22;
inline bool FishNormalSetup::has_switchscenefishgoawaytime() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void FishNormalSetup::set_has_switchscenefishgoawaytime() {
  _has_bits_[0] |= 0x00200000u;
}
inline void FishNormalSetup::clear_has_switchscenefishgoawaytime() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void FishNormalSetup::clear_switchscenefishgoawaytime() {
  switchscenefishgoawaytime_ = 0;
  clear_has_switchscenefishgoawaytime();
}
inline ::google::protobuf::int32 FishNormalSetup::switchscenefishgoawaytime() const {
  return switchscenefishgoawaytime_;
}
inline void FishNormalSetup::set_switchscenefishgoawaytime(::google::protobuf::int32 value) {
  set_has_switchscenefishgoawaytime();
  switchscenefishgoawaytime_ = value;
}

// -------------------------------------------------------------------

// FishPoolSaveBaseMul

// repeated int32 value = 1;
inline int FishPoolSaveBaseMul::value_size() const {
  return value_.size();
}
inline void FishPoolSaveBaseMul::clear_value() {
  value_.Clear();
}
inline ::google::protobuf::int32 FishPoolSaveBaseMul::value(int index) const {
  return value_.Get(index);
}
inline void FishPoolSaveBaseMul::set_value(int index, ::google::protobuf::int32 value) {
  value_.Set(index, value);
}
inline void FishPoolSaveBaseMul::add_value(::google::protobuf::int32 value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FishPoolSaveBaseMul::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FishPoolSaveBaseMul::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// FishPoolSaveRelaCount

// repeated int32 value = 1;
inline int FishPoolSaveRelaCount::value_size() const {
  return value_.size();
}
inline void FishPoolSaveRelaCount::clear_value() {
  value_.Clear();
}
inline ::google::protobuf::int32 FishPoolSaveRelaCount::value(int index) const {
  return value_.Get(index);
}
inline void FishPoolSaveRelaCount::set_value(int index, ::google::protobuf::int32 value) {
  value_.Set(index, value);
}
inline void FishPoolSaveRelaCount::add_value(::google::protobuf::int32 value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FishPoolSaveRelaCount::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FishPoolSaveRelaCount::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// FishPoolSaveHitCountCfg

// repeated int32 value = 1;
inline int FishPoolSaveHitCountCfg::value_size() const {
  return value_.size();
}
inline void FishPoolSaveHitCountCfg::clear_value() {
  value_.Clear();
}
inline ::google::protobuf::int32 FishPoolSaveHitCountCfg::value(int index) const {
  return value_.Get(index);
}
inline void FishPoolSaveHitCountCfg::set_value(int index, ::google::protobuf::int32 value) {
  value_.Set(index, value);
}
inline void FishPoolSaveHitCountCfg::add_value(::google::protobuf::int32 value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FishPoolSaveHitCountCfg::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FishPoolSaveHitCountCfg::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// FishPoolSaveConnonHitCount

// repeated double value = 1;
inline int FishPoolSaveConnonHitCount::value_size() const {
  return value_.size();
}
inline void FishPoolSaveConnonHitCount::clear_value() {
  value_.Clear();
}
inline double FishPoolSaveConnonHitCount::value(int index) const {
  return value_.Get(index);
}
inline void FishPoolSaveConnonHitCount::set_value(int index, double value) {
  value_.Set(index, value);
}
inline void FishPoolSaveConnonHitCount::add_value(double value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
FishPoolSaveConnonHitCount::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< double >*
FishPoolSaveConnonHitCount::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// FishPoolSave

// optional int32 dwFishID = 1;
inline bool FishPoolSave::has_dwfishid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FishPoolSave::set_has_dwfishid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FishPoolSave::clear_has_dwfishid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FishPoolSave::clear_dwfishid() {
  dwfishid_ = 0;
  clear_has_dwfishid();
}
inline ::google::protobuf::int32 FishPoolSave::dwfishid() const {
  return dwfishid_;
}
inline void FishPoolSave::set_dwfishid(::google::protobuf::int32 value) {
  set_has_dwfishid();
  dwfishid_ = value;
}

// optional int32 btFishKind = 2;
inline bool FishPoolSave::has_btfishkind() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FishPoolSave::set_has_btfishkind() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FishPoolSave::clear_has_btfishkind() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FishPoolSave::clear_btfishkind() {
  btfishkind_ = 0;
  clear_has_btfishkind();
}
inline ::google::protobuf::int32 FishPoolSave::btfishkind() const {
  return btfishkind_;
}
inline void FishPoolSave::set_btfishkind(::google::protobuf::int32 value) {
  set_has_btfishkind();
  btfishkind_ = value;
}

// optional int32 btFishKindGroup1 = 3;
inline bool FishPoolSave::has_btfishkindgroup1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FishPoolSave::set_has_btfishkindgroup1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FishPoolSave::clear_has_btfishkindgroup1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FishPoolSave::clear_btfishkindgroup1() {
  btfishkindgroup1_ = 0;
  clear_has_btfishkindgroup1();
}
inline ::google::protobuf::int32 FishPoolSave::btfishkindgroup1() const {
  return btfishkindgroup1_;
}
inline void FishPoolSave::set_btfishkindgroup1(::google::protobuf::int32 value) {
  set_has_btfishkindgroup1();
  btfishkindgroup1_ = value;
}

// optional int32 btFishKindGroup2 = 4;
inline bool FishPoolSave::has_btfishkindgroup2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FishPoolSave::set_has_btfishkindgroup2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FishPoolSave::clear_has_btfishkindgroup2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FishPoolSave::clear_btfishkindgroup2() {
  btfishkindgroup2_ = 0;
  clear_has_btfishkindgroup2();
}
inline ::google::protobuf::int32 FishPoolSave::btfishkindgroup2() const {
  return btfishkindgroup2_;
}
inline void FishPoolSave::set_btfishkindgroup2(::google::protobuf::int32 value) {
  set_has_btfishkindgroup2();
  btfishkindgroup2_ = value;
}

// optional int32 btFishKindGroup3 = 5;
inline bool FishPoolSave::has_btfishkindgroup3() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FishPoolSave::set_has_btfishkindgroup3() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FishPoolSave::clear_has_btfishkindgroup3() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FishPoolSave::clear_btfishkindgroup3() {
  btfishkindgroup3_ = 0;
  clear_has_btfishkindgroup3();
}
inline ::google::protobuf::int32 FishPoolSave::btfishkindgroup3() const {
  return btfishkindgroup3_;
}
inline void FishPoolSave::set_btfishkindgroup3(::google::protobuf::int32 value) {
  set_has_btfishkindgroup3();
  btfishkindgroup3_ = value;
}

// optional int32 btFishKindGroup4 = 6;
inline bool FishPoolSave::has_btfishkindgroup4() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FishPoolSave::set_has_btfishkindgroup4() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FishPoolSave::clear_has_btfishkindgroup4() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FishPoolSave::clear_btfishkindgroup4() {
  btfishkindgroup4_ = 0;
  clear_has_btfishkindgroup4();
}
inline ::google::protobuf::int32 FishPoolSave::btfishkindgroup4() const {
  return btfishkindgroup4_;
}
inline void FishPoolSave::set_btfishkindgroup4(::google::protobuf::int32 value) {
  set_has_btfishkindgroup4();
  btfishkindgroup4_ = value;
}

// optional bool bKilled = 7;
inline bool FishPoolSave::has_bkilled() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FishPoolSave::set_has_bkilled() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FishPoolSave::clear_has_bkilled() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FishPoolSave::clear_bkilled() {
  bkilled_ = false;
  clear_has_bkilled();
}
inline bool FishPoolSave::bkilled() const {
  return bkilled_;
}
inline void FishPoolSave::set_bkilled(bool value) {
  set_has_bkilled();
  bkilled_ = value;
}

// optional bool bRobotKilled = 8;
inline bool FishPoolSave::has_brobotkilled() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FishPoolSave::set_has_brobotkilled() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FishPoolSave::clear_has_brobotkilled() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FishPoolSave::clear_brobotkilled() {
  brobotkilled_ = false;
  clear_has_brobotkilled();
}
inline bool FishPoolSave::brobotkilled() const {
  return brobotkilled_;
}
inline void FishPoolSave::set_brobotkilled(bool value) {
  set_has_brobotkilled();
  brobotkilled_ = value;
}

// optional bool bKilledByOtherRela = 9;
inline bool FishPoolSave::has_bkilledbyotherrela() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FishPoolSave::set_has_bkilledbyotherrela() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FishPoolSave::clear_has_bkilledbyotherrela() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FishPoolSave::clear_bkilledbyotherrela() {
  bkilledbyotherrela_ = false;
  clear_has_bkilledbyotherrela();
}
inline bool FishPoolSave::bkilledbyotherrela() const {
  return bkilledbyotherrela_;
}
inline void FishPoolSave::set_bkilledbyotherrela(bool value) {
  set_has_bkilledbyotherrela();
  bkilledbyotherrela_ = value;
}

// optional bool bKilledByAlgoA = 10;
inline bool FishPoolSave::has_bkilledbyalgoa() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FishPoolSave::set_has_bkilledbyalgoa() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FishPoolSave::clear_has_bkilledbyalgoa() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FishPoolSave::clear_bkilledbyalgoa() {
  bkilledbyalgoa_ = false;
  clear_has_bkilledbyalgoa();
}
inline bool FishPoolSave::bkilledbyalgoa() const {
  return bkilledbyalgoa_;
}
inline void FishPoolSave::set_bkilledbyalgoa(bool value) {
  set_has_bkilledbyalgoa();
  bkilledbyalgoa_ = value;
}

// optional int32 btKilledCannonIndex = 11;
inline bool FishPoolSave::has_btkilledcannonindex() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FishPoolSave::set_has_btkilledcannonindex() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FishPoolSave::clear_has_btkilledcannonindex() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FishPoolSave::clear_btkilledcannonindex() {
  btkilledcannonindex_ = 0;
  clear_has_btkilledcannonindex();
}
inline ::google::protobuf::int32 FishPoolSave::btkilledcannonindex() const {
  return btkilledcannonindex_;
}
inline void FishPoolSave::set_btkilledcannonindex(::google::protobuf::int32 value) {
  set_has_btkilledcannonindex();
  btkilledcannonindex_ = value;
}

// optional bool bFloatMul = 12;
inline bool FishPoolSave::has_bfloatmul() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FishPoolSave::set_has_bfloatmul() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FishPoolSave::clear_has_bfloatmul() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FishPoolSave::clear_bfloatmul() {
  bfloatmul_ = false;
  clear_has_bfloatmul();
}
inline bool FishPoolSave::bfloatmul() const {
  return bfloatmul_;
}
inline void FishPoolSave::set_bfloatmul(bool value) {
  set_has_bfloatmul();
  bfloatmul_ = value;
}

// repeated .proto_ff.FishPoolSaveBaseMul arBaseMul = 13;
inline int FishPoolSave::arbasemul_size() const {
  return arbasemul_.size();
}
inline void FishPoolSave::clear_arbasemul() {
  arbasemul_.Clear();
}
inline const ::proto_ff::FishPoolSaveBaseMul& FishPoolSave::arbasemul(int index) const {
  return arbasemul_.Get(index);
}
inline ::proto_ff::FishPoolSaveBaseMul* FishPoolSave::mutable_arbasemul(int index) {
  return arbasemul_.Mutable(index);
}
inline ::proto_ff::FishPoolSaveBaseMul* FishPoolSave::add_arbasemul() {
  return arbasemul_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FishPoolSaveBaseMul >&
FishPoolSave::arbasemul() const {
  return arbasemul_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FishPoolSaveBaseMul >*
FishPoolSave::mutable_arbasemul() {
  return &arbasemul_;
}

// repeated .proto_ff.FishPoolSaveRelaCount arRelaCount = 14;
inline int FishPoolSave::arrelacount_size() const {
  return arrelacount_.size();
}
inline void FishPoolSave::clear_arrelacount() {
  arrelacount_.Clear();
}
inline const ::proto_ff::FishPoolSaveRelaCount& FishPoolSave::arrelacount(int index) const {
  return arrelacount_.Get(index);
}
inline ::proto_ff::FishPoolSaveRelaCount* FishPoolSave::mutable_arrelacount(int index) {
  return arrelacount_.Mutable(index);
}
inline ::proto_ff::FishPoolSaveRelaCount* FishPoolSave::add_arrelacount() {
  return arrelacount_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FishPoolSaveRelaCount >&
FishPoolSave::arrelacount() const {
  return arrelacount_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FishPoolSaveRelaCount >*
FishPoolSave::mutable_arrelacount() {
  return &arrelacount_;
}

// repeated .proto_ff.FishPoolSaveHitCountCfg arHitCountCfg = 15;
inline int FishPoolSave::arhitcountcfg_size() const {
  return arhitcountcfg_.size();
}
inline void FishPoolSave::clear_arhitcountcfg() {
  arhitcountcfg_.Clear();
}
inline const ::proto_ff::FishPoolSaveHitCountCfg& FishPoolSave::arhitcountcfg(int index) const {
  return arhitcountcfg_.Get(index);
}
inline ::proto_ff::FishPoolSaveHitCountCfg* FishPoolSave::mutable_arhitcountcfg(int index) {
  return arhitcountcfg_.Mutable(index);
}
inline ::proto_ff::FishPoolSaveHitCountCfg* FishPoolSave::add_arhitcountcfg() {
  return arhitcountcfg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FishPoolSaveHitCountCfg >&
FishPoolSave::arhitcountcfg() const {
  return arhitcountcfg_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FishPoolSaveHitCountCfg >*
FishPoolSave::mutable_arhitcountcfg() {
  return &arhitcountcfg_;
}

// repeated .proto_ff.FishPoolSaveConnonHitCount arConnonHitCount = 16;
inline int FishPoolSave::arconnonhitcount_size() const {
  return arconnonhitcount_.size();
}
inline void FishPoolSave::clear_arconnonhitcount() {
  arconnonhitcount_.Clear();
}
inline const ::proto_ff::FishPoolSaveConnonHitCount& FishPoolSave::arconnonhitcount(int index) const {
  return arconnonhitcount_.Get(index);
}
inline ::proto_ff::FishPoolSaveConnonHitCount* FishPoolSave::mutable_arconnonhitcount(int index) {
  return arconnonhitcount_.Mutable(index);
}
inline ::proto_ff::FishPoolSaveConnonHitCount* FishPoolSave::add_arconnonhitcount() {
  return arconnonhitcount_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FishPoolSaveConnonHitCount >&
FishPoolSave::arconnonhitcount() const {
  return arconnonhitcount_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FishPoolSaveConnonHitCount >*
FishPoolSave::mutable_arconnonhitcount() {
  return &arconnonhitcount_;
}

// -------------------------------------------------------------------

// FishKindFishPoolSave

// repeated .proto_ff.FishPoolSave fish_pool = 1;
inline int FishKindFishPoolSave::fish_pool_size() const {
  return fish_pool_.size();
}
inline void FishKindFishPoolSave::clear_fish_pool() {
  fish_pool_.Clear();
}
inline const ::proto_ff::FishPoolSave& FishKindFishPoolSave::fish_pool(int index) const {
  return fish_pool_.Get(index);
}
inline ::proto_ff::FishPoolSave* FishKindFishPoolSave::mutable_fish_pool(int index) {
  return fish_pool_.Mutable(index);
}
inline ::proto_ff::FishPoolSave* FishKindFishPoolSave::add_fish_pool() {
  return fish_pool_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FishPoolSave >&
FishKindFishPoolSave::fish_pool() const {
  return fish_pool_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FishPoolSave >*
FishKindFishPoolSave::mutable_fish_pool() {
  return &fish_pool_;
}

// -------------------------------------------------------------------

// FishKindFishPoolSaveArray

// repeated .proto_ff.FishKindFishPoolSave fish_kind = 1;
inline int FishKindFishPoolSaveArray::fish_kind_size() const {
  return fish_kind_.size();
}
inline void FishKindFishPoolSaveArray::clear_fish_kind() {
  fish_kind_.Clear();
}
inline const ::proto_ff::FishKindFishPoolSave& FishKindFishPoolSaveArray::fish_kind(int index) const {
  return fish_kind_.Get(index);
}
inline ::proto_ff::FishKindFishPoolSave* FishKindFishPoolSaveArray::mutable_fish_kind(int index) {
  return fish_kind_.Mutable(index);
}
inline ::proto_ff::FishKindFishPoolSave* FishKindFishPoolSaveArray::add_fish_kind() {
  return fish_kind_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FishKindFishPoolSave >&
FishKindFishPoolSaveArray::fish_kind() const {
  return fish_kind_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FishKindFishPoolSave >*
FishKindFishPoolSaveArray::mutable_fish_kind() {
  return &fish_kind_;
}

// -------------------------------------------------------------------

// GMCtrlLevelDesc

// optional int32 ControlLevel = 1;
inline bool GMCtrlLevelDesc::has_controllevel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMCtrlLevelDesc::set_has_controllevel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMCtrlLevelDesc::clear_has_controllevel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMCtrlLevelDesc::clear_controllevel() {
  controllevel_ = 0;
  clear_has_controllevel();
}
inline ::google::protobuf::int32 GMCtrlLevelDesc::controllevel() const {
  return controllevel_;
}
inline void GMCtrlLevelDesc::set_controllevel(::google::protobuf::int32 value) {
  set_has_controllevel();
  controllevel_ = value;
}

// optional string Name = 2;
inline bool GMCtrlLevelDesc::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMCtrlLevelDesc::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMCtrlLevelDesc::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMCtrlLevelDesc::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GMCtrlLevelDesc::name() const {
  return *name_;
}
inline void GMCtrlLevelDesc::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GMCtrlLevelDesc::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GMCtrlLevelDesc::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GMCtrlLevelDesc::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GMCtrlLevelDesc::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GMCtrlLevelDesc::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 ControlRate = 3;
inline bool GMCtrlLevelDesc::has_controlrate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GMCtrlLevelDesc::set_has_controlrate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GMCtrlLevelDesc::clear_has_controlrate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GMCtrlLevelDesc::clear_controlrate() {
  controlrate_ = 0;
  clear_has_controlrate();
}
inline ::google::protobuf::int32 GMCtrlLevelDesc::controlrate() const {
  return controlrate_;
}
inline void GMCtrlLevelDesc::set_controlrate(::google::protobuf::int32 value) {
  set_has_controlrate();
  controlrate_ = value;
}

// -------------------------------------------------------------------

// Sheet_GMCtrlLevelDesc

// repeated .proto_ff.GMCtrlLevelDesc GMCtrlLevelDesc_List = 1;
inline int Sheet_GMCtrlLevelDesc::gmctrlleveldesc_list_size() const {
  return gmctrlleveldesc_list_.size();
}
inline void Sheet_GMCtrlLevelDesc::clear_gmctrlleveldesc_list() {
  gmctrlleveldesc_list_.Clear();
}
inline const ::proto_ff::GMCtrlLevelDesc& Sheet_GMCtrlLevelDesc::gmctrlleveldesc_list(int index) const {
  return gmctrlleveldesc_list_.Get(index);
}
inline ::proto_ff::GMCtrlLevelDesc* Sheet_GMCtrlLevelDesc::mutable_gmctrlleveldesc_list(int index) {
  return gmctrlleveldesc_list_.Mutable(index);
}
inline ::proto_ff::GMCtrlLevelDesc* Sheet_GMCtrlLevelDesc::add_gmctrlleveldesc_list() {
  return gmctrlleveldesc_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GMCtrlLevelDesc >&
Sheet_GMCtrlLevelDesc::gmctrlleveldesc_list() const {
  return gmctrlleveldesc_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GMCtrlLevelDesc >*
Sheet_GMCtrlLevelDesc::mutable_gmctrlleveldesc_list() {
  return &gmctrlleveldesc_list_;
}

// -------------------------------------------------------------------

// LineGameSystemControlInfo

// optional int32 RoomID = 1;
inline bool LineGameSystemControlInfo::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LineGameSystemControlInfo::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LineGameSystemControlInfo::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LineGameSystemControlInfo::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 LineGameSystemControlInfo::roomid() const {
  return roomid_;
}
inline void LineGameSystemControlInfo::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional int32 AreaID = 2;
inline bool LineGameSystemControlInfo::has_areaid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LineGameSystemControlInfo::set_has_areaid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LineGameSystemControlInfo::clear_has_areaid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LineGameSystemControlInfo::clear_areaid() {
  areaid_ = 0;
  clear_has_areaid();
}
inline ::google::protobuf::int32 LineGameSystemControlInfo::areaid() const {
  return areaid_;
}
inline void LineGameSystemControlInfo::set_areaid(::google::protobuf::int32 value) {
  set_has_areaid();
  areaid_ = value;
}

// optional int64 TotalProfit = 3;
inline bool LineGameSystemControlInfo::has_totalprofit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LineGameSystemControlInfo::set_has_totalprofit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LineGameSystemControlInfo::clear_has_totalprofit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LineGameSystemControlInfo::clear_totalprofit() {
  totalprofit_ = GOOGLE_LONGLONG(0);
  clear_has_totalprofit();
}
inline ::google::protobuf::int64 LineGameSystemControlInfo::totalprofit() const {
  return totalprofit_;
}
inline void LineGameSystemControlInfo::set_totalprofit(::google::protobuf::int64 value) {
  set_has_totalprofit();
  totalprofit_ = value;
}

// optional int32 CurrentSystemControl = 4;
inline bool LineGameSystemControlInfo::has_currentsystemcontrol() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LineGameSystemControlInfo::set_has_currentsystemcontrol() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LineGameSystemControlInfo::clear_has_currentsystemcontrol() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LineGameSystemControlInfo::clear_currentsystemcontrol() {
  currentsystemcontrol_ = 0;
  clear_has_currentsystemcontrol();
}
inline ::google::protobuf::int32 LineGameSystemControlInfo::currentsystemcontrol() const {
  return currentsystemcontrol_;
}
inline void LineGameSystemControlInfo::set_currentsystemcontrol(::google::protobuf::int32 value) {
  set_has_currentsystemcontrol();
  currentsystemcontrol_ = value;
}

// -------------------------------------------------------------------

// Sheet_LineGameSystemControlInfo

// repeated .proto_ff.LineGameSystemControlInfo LineGameSystemControlInfo_List = 1;
inline int Sheet_LineGameSystemControlInfo::linegamesystemcontrolinfo_list_size() const {
  return linegamesystemcontrolinfo_list_.size();
}
inline void Sheet_LineGameSystemControlInfo::clear_linegamesystemcontrolinfo_list() {
  linegamesystemcontrolinfo_list_.Clear();
}
inline const ::proto_ff::LineGameSystemControlInfo& Sheet_LineGameSystemControlInfo::linegamesystemcontrolinfo_list(int index) const {
  return linegamesystemcontrolinfo_list_.Get(index);
}
inline ::proto_ff::LineGameSystemControlInfo* Sheet_LineGameSystemControlInfo::mutable_linegamesystemcontrolinfo_list(int index) {
  return linegamesystemcontrolinfo_list_.Mutable(index);
}
inline ::proto_ff::LineGameSystemControlInfo* Sheet_LineGameSystemControlInfo::add_linegamesystemcontrolinfo_list() {
  return linegamesystemcontrolinfo_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::LineGameSystemControlInfo >&
Sheet_LineGameSystemControlInfo::linegamesystemcontrolinfo_list() const {
  return linegamesystemcontrolinfo_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::LineGameSystemControlInfo >*
Sheet_LineGameSystemControlInfo::mutable_linegamesystemcontrolinfo_list() {
  return &linegamesystemcontrolinfo_list_;
}

// -------------------------------------------------------------------

// LineLevelDesc

// optional int32 LevelID = 1;
inline bool LineLevelDesc::has_levelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LineLevelDesc::set_has_levelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LineLevelDesc::clear_has_levelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LineLevelDesc::clear_levelid() {
  levelid_ = 0;
  clear_has_levelid();
}
inline ::google::protobuf::int32 LineLevelDesc::levelid() const {
  return levelid_;
}
inline void LineLevelDesc::set_levelid(::google::protobuf::int32 value) {
  set_has_levelid();
  levelid_ = value;
}

// optional string LevelName = 2;
inline bool LineLevelDesc::has_levelname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LineLevelDesc::set_has_levelname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LineLevelDesc::clear_has_levelname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LineLevelDesc::clear_levelname() {
  if (levelname_ != &::google::protobuf::internal::kEmptyString) {
    levelname_->clear();
  }
  clear_has_levelname();
}
inline const ::std::string& LineLevelDesc::levelname() const {
  return *levelname_;
}
inline void LineLevelDesc::set_levelname(const ::std::string& value) {
  set_has_levelname();
  if (levelname_ == &::google::protobuf::internal::kEmptyString) {
    levelname_ = new ::std::string;
  }
  levelname_->assign(value);
}
inline void LineLevelDesc::set_levelname(const char* value) {
  set_has_levelname();
  if (levelname_ == &::google::protobuf::internal::kEmptyString) {
    levelname_ = new ::std::string;
  }
  levelname_->assign(value);
}
inline void LineLevelDesc::set_levelname(const char* value, size_t size) {
  set_has_levelname();
  if (levelname_ == &::google::protobuf::internal::kEmptyString) {
    levelname_ = new ::std::string;
  }
  levelname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LineLevelDesc::mutable_levelname() {
  set_has_levelname();
  if (levelname_ == &::google::protobuf::internal::kEmptyString) {
    levelname_ = new ::std::string;
  }
  return levelname_;
}
inline ::std::string* LineLevelDesc::release_levelname() {
  clear_has_levelname();
  if (levelname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = levelname_;
    levelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LineLevelDesc::set_allocated_levelname(::std::string* levelname) {
  if (levelname_ != &::google::protobuf::internal::kEmptyString) {
    delete levelname_;
  }
  if (levelname) {
    set_has_levelname();
    levelname_ = levelname;
  } else {
    clear_has_levelname();
    levelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string CannonLevelVal = 3;
inline bool LineLevelDesc::has_cannonlevelval() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LineLevelDesc::set_has_cannonlevelval() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LineLevelDesc::clear_has_cannonlevelval() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LineLevelDesc::clear_cannonlevelval() {
  if (cannonlevelval_ != &::google::protobuf::internal::kEmptyString) {
    cannonlevelval_->clear();
  }
  clear_has_cannonlevelval();
}
inline const ::std::string& LineLevelDesc::cannonlevelval() const {
  return *cannonlevelval_;
}
inline void LineLevelDesc::set_cannonlevelval(const ::std::string& value) {
  set_has_cannonlevelval();
  if (cannonlevelval_ == &::google::protobuf::internal::kEmptyString) {
    cannonlevelval_ = new ::std::string;
  }
  cannonlevelval_->assign(value);
}
inline void LineLevelDesc::set_cannonlevelval(const char* value) {
  set_has_cannonlevelval();
  if (cannonlevelval_ == &::google::protobuf::internal::kEmptyString) {
    cannonlevelval_ = new ::std::string;
  }
  cannonlevelval_->assign(value);
}
inline void LineLevelDesc::set_cannonlevelval(const char* value, size_t size) {
  set_has_cannonlevelval();
  if (cannonlevelval_ == &::google::protobuf::internal::kEmptyString) {
    cannonlevelval_ = new ::std::string;
  }
  cannonlevelval_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LineLevelDesc::mutable_cannonlevelval() {
  set_has_cannonlevelval();
  if (cannonlevelval_ == &::google::protobuf::internal::kEmptyString) {
    cannonlevelval_ = new ::std::string;
  }
  return cannonlevelval_;
}
inline ::std::string* LineLevelDesc::release_cannonlevelval() {
  clear_has_cannonlevelval();
  if (cannonlevelval_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cannonlevelval_;
    cannonlevelval_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LineLevelDesc::set_allocated_cannonlevelval(::std::string* cannonlevelval) {
  if (cannonlevelval_ != &::google::protobuf::internal::kEmptyString) {
    delete cannonlevelval_;
  }
  if (cannonlevelval) {
    set_has_cannonlevelval();
    cannonlevelval_ = cannonlevelval;
  } else {
    clear_has_cannonlevelval();
    cannonlevelval_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 VecCannonLevelVal = 4;
inline int LineLevelDesc::veccannonlevelval_size() const {
  return veccannonlevelval_.size();
}
inline void LineLevelDesc::clear_veccannonlevelval() {
  veccannonlevelval_.Clear();
}
inline ::google::protobuf::int32 LineLevelDesc::veccannonlevelval(int index) const {
  return veccannonlevelval_.Get(index);
}
inline void LineLevelDesc::set_veccannonlevelval(int index, ::google::protobuf::int32 value) {
  veccannonlevelval_.Set(index, value);
}
inline void LineLevelDesc::add_veccannonlevelval(::google::protobuf::int32 value) {
  veccannonlevelval_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
LineLevelDesc::veccannonlevelval() const {
  return veccannonlevelval_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
LineLevelDesc::mutable_veccannonlevelval() {
  return &veccannonlevelval_;
}

// optional string CannonShowNum = 5;
inline bool LineLevelDesc::has_cannonshownum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LineLevelDesc::set_has_cannonshownum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LineLevelDesc::clear_has_cannonshownum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LineLevelDesc::clear_cannonshownum() {
  if (cannonshownum_ != &::google::protobuf::internal::kEmptyString) {
    cannonshownum_->clear();
  }
  clear_has_cannonshownum();
}
inline const ::std::string& LineLevelDesc::cannonshownum() const {
  return *cannonshownum_;
}
inline void LineLevelDesc::set_cannonshownum(const ::std::string& value) {
  set_has_cannonshownum();
  if (cannonshownum_ == &::google::protobuf::internal::kEmptyString) {
    cannonshownum_ = new ::std::string;
  }
  cannonshownum_->assign(value);
}
inline void LineLevelDesc::set_cannonshownum(const char* value) {
  set_has_cannonshownum();
  if (cannonshownum_ == &::google::protobuf::internal::kEmptyString) {
    cannonshownum_ = new ::std::string;
  }
  cannonshownum_->assign(value);
}
inline void LineLevelDesc::set_cannonshownum(const char* value, size_t size) {
  set_has_cannonshownum();
  if (cannonshownum_ == &::google::protobuf::internal::kEmptyString) {
    cannonshownum_ = new ::std::string;
  }
  cannonshownum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LineLevelDesc::mutable_cannonshownum() {
  set_has_cannonshownum();
  if (cannonshownum_ == &::google::protobuf::internal::kEmptyString) {
    cannonshownum_ = new ::std::string;
  }
  return cannonshownum_;
}
inline ::std::string* LineLevelDesc::release_cannonshownum() {
  clear_has_cannonshownum();
  if (cannonshownum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cannonshownum_;
    cannonshownum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LineLevelDesc::set_allocated_cannonshownum(::std::string* cannonshownum) {
  if (cannonshownum_ != &::google::protobuf::internal::kEmptyString) {
    delete cannonshownum_;
  }
  if (cannonshownum) {
    set_has_cannonshownum();
    cannonshownum_ = cannonshownum;
  } else {
    clear_has_cannonshownum();
    cannonshownum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 VecCannonShowNum = 6;
inline int LineLevelDesc::veccannonshownum_size() const {
  return veccannonshownum_.size();
}
inline void LineLevelDesc::clear_veccannonshownum() {
  veccannonshownum_.Clear();
}
inline ::google::protobuf::int32 LineLevelDesc::veccannonshownum(int index) const {
  return veccannonshownum_.Get(index);
}
inline void LineLevelDesc::set_veccannonshownum(int index, ::google::protobuf::int32 value) {
  veccannonshownum_.Set(index, value);
}
inline void LineLevelDesc::add_veccannonshownum(::google::protobuf::int32 value) {
  veccannonshownum_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
LineLevelDesc::veccannonshownum() const {
  return veccannonshownum_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
LineLevelDesc::mutable_veccannonshownum() {
  return &veccannonshownum_;
}

// optional int32 MinMoney = 7;
inline bool LineLevelDesc::has_minmoney() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LineLevelDesc::set_has_minmoney() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LineLevelDesc::clear_has_minmoney() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LineLevelDesc::clear_minmoney() {
  minmoney_ = 0;
  clear_has_minmoney();
}
inline ::google::protobuf::int32 LineLevelDesc::minmoney() const {
  return minmoney_;
}
inline void LineLevelDesc::set_minmoney(::google::protobuf::int32 value) {
  set_has_minmoney();
  minmoney_ = value;
}

// optional int32 MaxMoney = 8;
inline bool LineLevelDesc::has_maxmoney() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LineLevelDesc::set_has_maxmoney() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LineLevelDesc::clear_has_maxmoney() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LineLevelDesc::clear_maxmoney() {
  maxmoney_ = 0;
  clear_has_maxmoney();
}
inline ::google::protobuf::int32 LineLevelDesc::maxmoney() const {
  return maxmoney_;
}
inline void LineLevelDesc::set_maxmoney(::google::protobuf::int32 value) {
  set_has_maxmoney();
  maxmoney_ = value;
}

// optional int32 StartGame = 9;
inline bool LineLevelDesc::has_startgame() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LineLevelDesc::set_has_startgame() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LineLevelDesc::clear_has_startgame() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LineLevelDesc::clear_startgame() {
  startgame_ = 0;
  clear_has_startgame();
}
inline ::google::protobuf::int32 LineLevelDesc::startgame() const {
  return startgame_;
}
inline void LineLevelDesc::set_startgame(::google::protobuf::int32 value) {
  set_has_startgame();
  startgame_ = value;
}

// optional int32 Flag = 10;
inline bool LineLevelDesc::has_flag() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LineLevelDesc::set_has_flag() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LineLevelDesc::clear_has_flag() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LineLevelDesc::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 LineLevelDesc::flag() const {
  return flag_;
}
inline void LineLevelDesc::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// optional int32 MaxWinTimes = 11;
inline bool LineLevelDesc::has_maxwintimes() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LineLevelDesc::set_has_maxwintimes() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LineLevelDesc::clear_has_maxwintimes() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LineLevelDesc::clear_maxwintimes() {
  maxwintimes_ = 0;
  clear_has_maxwintimes();
}
inline ::google::protobuf::int32 LineLevelDesc::maxwintimes() const {
  return maxwintimes_;
}
inline void LineLevelDesc::set_maxwintimes(::google::protobuf::int32 value) {
  set_has_maxwintimes();
  maxwintimes_ = value;
}

// optional string Chip = 12;
inline bool LineLevelDesc::has_chip() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LineLevelDesc::set_has_chip() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LineLevelDesc::clear_has_chip() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LineLevelDesc::clear_chip() {
  if (chip_ != &::google::protobuf::internal::kEmptyString) {
    chip_->clear();
  }
  clear_has_chip();
}
inline const ::std::string& LineLevelDesc::chip() const {
  return *chip_;
}
inline void LineLevelDesc::set_chip(const ::std::string& value) {
  set_has_chip();
  if (chip_ == &::google::protobuf::internal::kEmptyString) {
    chip_ = new ::std::string;
  }
  chip_->assign(value);
}
inline void LineLevelDesc::set_chip(const char* value) {
  set_has_chip();
  if (chip_ == &::google::protobuf::internal::kEmptyString) {
    chip_ = new ::std::string;
  }
  chip_->assign(value);
}
inline void LineLevelDesc::set_chip(const char* value, size_t size) {
  set_has_chip();
  if (chip_ == &::google::protobuf::internal::kEmptyString) {
    chip_ = new ::std::string;
  }
  chip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LineLevelDesc::mutable_chip() {
  set_has_chip();
  if (chip_ == &::google::protobuf::internal::kEmptyString) {
    chip_ = new ::std::string;
  }
  return chip_;
}
inline ::std::string* LineLevelDesc::release_chip() {
  clear_has_chip();
  if (chip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = chip_;
    chip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LineLevelDesc::set_allocated_chip(::std::string* chip) {
  if (chip_ != &::google::protobuf::internal::kEmptyString) {
    delete chip_;
  }
  if (chip) {
    set_has_chip();
    chip_ = chip;
  } else {
    clear_has_chip();
    chip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int64 VecChips = 13;
inline int LineLevelDesc::vecchips_size() const {
  return vecchips_.size();
}
inline void LineLevelDesc::clear_vecchips() {
  vecchips_.Clear();
}
inline ::google::protobuf::int64 LineLevelDesc::vecchips(int index) const {
  return vecchips_.Get(index);
}
inline void LineLevelDesc::set_vecchips(int index, ::google::protobuf::int64 value) {
  vecchips_.Set(index, value);
}
inline void LineLevelDesc::add_vecchips(::google::protobuf::int64 value) {
  vecchips_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
LineLevelDesc::vecchips() const {
  return vecchips_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
LineLevelDesc::mutable_vecchips() {
  return &vecchips_;
}

// optional string GMLevelRate = 14;
inline bool LineLevelDesc::has_gmlevelrate() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LineLevelDesc::set_has_gmlevelrate() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LineLevelDesc::clear_has_gmlevelrate() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LineLevelDesc::clear_gmlevelrate() {
  if (gmlevelrate_ != &::google::protobuf::internal::kEmptyString) {
    gmlevelrate_->clear();
  }
  clear_has_gmlevelrate();
}
inline const ::std::string& LineLevelDesc::gmlevelrate() const {
  return *gmlevelrate_;
}
inline void LineLevelDesc::set_gmlevelrate(const ::std::string& value) {
  set_has_gmlevelrate();
  if (gmlevelrate_ == &::google::protobuf::internal::kEmptyString) {
    gmlevelrate_ = new ::std::string;
  }
  gmlevelrate_->assign(value);
}
inline void LineLevelDesc::set_gmlevelrate(const char* value) {
  set_has_gmlevelrate();
  if (gmlevelrate_ == &::google::protobuf::internal::kEmptyString) {
    gmlevelrate_ = new ::std::string;
  }
  gmlevelrate_->assign(value);
}
inline void LineLevelDesc::set_gmlevelrate(const char* value, size_t size) {
  set_has_gmlevelrate();
  if (gmlevelrate_ == &::google::protobuf::internal::kEmptyString) {
    gmlevelrate_ = new ::std::string;
  }
  gmlevelrate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LineLevelDesc::mutable_gmlevelrate() {
  set_has_gmlevelrate();
  if (gmlevelrate_ == &::google::protobuf::internal::kEmptyString) {
    gmlevelrate_ = new ::std::string;
  }
  return gmlevelrate_;
}
inline ::std::string* LineLevelDesc::release_gmlevelrate() {
  clear_has_gmlevelrate();
  if (gmlevelrate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gmlevelrate_;
    gmlevelrate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LineLevelDesc::set_allocated_gmlevelrate(::std::string* gmlevelrate) {
  if (gmlevelrate_ != &::google::protobuf::internal::kEmptyString) {
    delete gmlevelrate_;
  }
  if (gmlevelrate) {
    set_has_gmlevelrate();
    gmlevelrate_ = gmlevelrate;
  } else {
    clear_has_gmlevelrate();
    gmlevelrate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 VecGMLevelRate = 15;
inline int LineLevelDesc::vecgmlevelrate_size() const {
  return vecgmlevelrate_.size();
}
inline void LineLevelDesc::clear_vecgmlevelrate() {
  vecgmlevelrate_.Clear();
}
inline ::google::protobuf::int32 LineLevelDesc::vecgmlevelrate(int index) const {
  return vecgmlevelrate_.Get(index);
}
inline void LineLevelDesc::set_vecgmlevelrate(int index, ::google::protobuf::int32 value) {
  vecgmlevelrate_.Set(index, value);
}
inline void LineLevelDesc::add_vecgmlevelrate(::google::protobuf::int32 value) {
  vecgmlevelrate_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
LineLevelDesc::vecgmlevelrate() const {
  return vecgmlevelrate_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
LineLevelDesc::mutable_vecgmlevelrate() {
  return &vecgmlevelrate_;
}

// -------------------------------------------------------------------

// Sheet_LineLevelDesc

// repeated .proto_ff.LineLevelDesc LineLevelDesc_List = 1;
inline int Sheet_LineLevelDesc::lineleveldesc_list_size() const {
  return lineleveldesc_list_.size();
}
inline void Sheet_LineLevelDesc::clear_lineleveldesc_list() {
  lineleveldesc_list_.Clear();
}
inline const ::proto_ff::LineLevelDesc& Sheet_LineLevelDesc::lineleveldesc_list(int index) const {
  return lineleveldesc_list_.Get(index);
}
inline ::proto_ff::LineLevelDesc* Sheet_LineLevelDesc::mutable_lineleveldesc_list(int index) {
  return lineleveldesc_list_.Mutable(index);
}
inline ::proto_ff::LineLevelDesc* Sheet_LineLevelDesc::add_lineleveldesc_list() {
  return lineleveldesc_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::LineLevelDesc >&
Sheet_LineLevelDesc::lineleveldesc_list() const {
  return lineleveldesc_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::LineLevelDesc >*
Sheet_LineLevelDesc::mutable_lineleveldesc_list() {
  return &lineleveldesc_list_;
}

// -------------------------------------------------------------------

// LineDeskInfoDesc

// optional int32 id = 1;
inline bool LineDeskInfoDesc::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LineDeskInfoDesc::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LineDeskInfoDesc::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LineDeskInfoDesc::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 LineDeskInfoDesc::id() const {
  return id_;
}
inline void LineDeskInfoDesc::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 RoomID = 2;
inline bool LineDeskInfoDesc::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LineDeskInfoDesc::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LineDeskInfoDesc::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LineDeskInfoDesc::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 LineDeskInfoDesc::roomid() const {
  return roomid_;
}
inline void LineDeskInfoDesc::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional int32 DeskID = 3;
inline bool LineDeskInfoDesc::has_deskid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LineDeskInfoDesc::set_has_deskid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LineDeskInfoDesc::clear_has_deskid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LineDeskInfoDesc::clear_deskid() {
  deskid_ = 0;
  clear_has_deskid();
}
inline ::google::protobuf::int32 LineDeskInfoDesc::deskid() const {
  return deskid_;
}
inline void LineDeskInfoDesc::set_deskid(::google::protobuf::int32 value) {
  set_has_deskid();
  deskid_ = value;
}

// optional int32 AlgoID = 4;
inline bool LineDeskInfoDesc::has_algoid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LineDeskInfoDesc::set_has_algoid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LineDeskInfoDesc::clear_has_algoid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LineDeskInfoDesc::clear_algoid() {
  algoid_ = 0;
  clear_has_algoid();
}
inline ::google::protobuf::int32 LineDeskInfoDesc::algoid() const {
  return algoid_;
}
inline void LineDeskInfoDesc::set_algoid(::google::protobuf::int32 value) {
  set_has_algoid();
  algoid_ = value;
}

// optional int32 DrawRate = 5;
inline bool LineDeskInfoDesc::has_drawrate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LineDeskInfoDesc::set_has_drawrate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LineDeskInfoDesc::clear_has_drawrate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LineDeskInfoDesc::clear_drawrate() {
  drawrate_ = 0;
  clear_has_drawrate();
}
inline ::google::protobuf::int32 LineDeskInfoDesc::drawrate() const {
  return drawrate_;
}
inline void LineDeskInfoDesc::set_drawrate(::google::protobuf::int32 value) {
  set_has_drawrate();
  drawrate_ = value;
}

// -------------------------------------------------------------------

// Sheet_LineDeskInfoDesc

// repeated .proto_ff.LineDeskInfoDesc LineDeskInfoDesc_List = 1;
inline int Sheet_LineDeskInfoDesc::linedeskinfodesc_list_size() const {
  return linedeskinfodesc_list_.size();
}
inline void Sheet_LineDeskInfoDesc::clear_linedeskinfodesc_list() {
  linedeskinfodesc_list_.Clear();
}
inline const ::proto_ff::LineDeskInfoDesc& Sheet_LineDeskInfoDesc::linedeskinfodesc_list(int index) const {
  return linedeskinfodesc_list_.Get(index);
}
inline ::proto_ff::LineDeskInfoDesc* Sheet_LineDeskInfoDesc::mutable_linedeskinfodesc_list(int index) {
  return linedeskinfodesc_list_.Mutable(index);
}
inline ::proto_ff::LineDeskInfoDesc* Sheet_LineDeskInfoDesc::add_linedeskinfodesc_list() {
  return linedeskinfodesc_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::LineDeskInfoDesc >&
Sheet_LineDeskInfoDesc::linedeskinfodesc_list() const {
  return linedeskinfodesc_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::LineDeskInfoDesc >*
Sheet_LineDeskInfoDesc::mutable_linedeskinfodesc_list() {
  return &linedeskinfodesc_list_;
}

// -------------------------------------------------------------------

// LineAlgoDesc

// optional int32 AlgoID = 1;
inline bool LineAlgoDesc::has_algoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LineAlgoDesc::set_has_algoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LineAlgoDesc::clear_has_algoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LineAlgoDesc::clear_algoid() {
  algoid_ = 0;
  clear_has_algoid();
}
inline ::google::protobuf::int32 LineAlgoDesc::algoid() const {
  return algoid_;
}
inline void LineAlgoDesc::set_algoid(::google::protobuf::int32 value) {
  set_has_algoid();
  algoid_ = value;
}

// optional string AlgoName = 2;
inline bool LineAlgoDesc::has_algoname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LineAlgoDesc::set_has_algoname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LineAlgoDesc::clear_has_algoname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LineAlgoDesc::clear_algoname() {
  if (algoname_ != &::google::protobuf::internal::kEmptyString) {
    algoname_->clear();
  }
  clear_has_algoname();
}
inline const ::std::string& LineAlgoDesc::algoname() const {
  return *algoname_;
}
inline void LineAlgoDesc::set_algoname(const ::std::string& value) {
  set_has_algoname();
  if (algoname_ == &::google::protobuf::internal::kEmptyString) {
    algoname_ = new ::std::string;
  }
  algoname_->assign(value);
}
inline void LineAlgoDesc::set_algoname(const char* value) {
  set_has_algoname();
  if (algoname_ == &::google::protobuf::internal::kEmptyString) {
    algoname_ = new ::std::string;
  }
  algoname_->assign(value);
}
inline void LineAlgoDesc::set_algoname(const char* value, size_t size) {
  set_has_algoname();
  if (algoname_ == &::google::protobuf::internal::kEmptyString) {
    algoname_ = new ::std::string;
  }
  algoname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LineAlgoDesc::mutable_algoname() {
  set_has_algoname();
  if (algoname_ == &::google::protobuf::internal::kEmptyString) {
    algoname_ = new ::std::string;
  }
  return algoname_;
}
inline ::std::string* LineAlgoDesc::release_algoname() {
  clear_has_algoname();
  if (algoname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = algoname_;
    algoname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LineAlgoDesc::set_allocated_algoname(::std::string* algoname) {
  if (algoname_ != &::google::protobuf::internal::kEmptyString) {
    delete algoname_;
  }
  if (algoname) {
    set_has_algoname();
    algoname_ = algoname;
  } else {
    clear_has_algoname();
    algoname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string AlgoDesc = 3;
inline bool LineAlgoDesc::has_algodesc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LineAlgoDesc::set_has_algodesc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LineAlgoDesc::clear_has_algodesc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LineAlgoDesc::clear_algodesc() {
  if (algodesc_ != &::google::protobuf::internal::kEmptyString) {
    algodesc_->clear();
  }
  clear_has_algodesc();
}
inline const ::std::string& LineAlgoDesc::algodesc() const {
  return *algodesc_;
}
inline void LineAlgoDesc::set_algodesc(const ::std::string& value) {
  set_has_algodesc();
  if (algodesc_ == &::google::protobuf::internal::kEmptyString) {
    algodesc_ = new ::std::string;
  }
  algodesc_->assign(value);
}
inline void LineAlgoDesc::set_algodesc(const char* value) {
  set_has_algodesc();
  if (algodesc_ == &::google::protobuf::internal::kEmptyString) {
    algodesc_ = new ::std::string;
  }
  algodesc_->assign(value);
}
inline void LineAlgoDesc::set_algodesc(const char* value, size_t size) {
  set_has_algodesc();
  if (algodesc_ == &::google::protobuf::internal::kEmptyString) {
    algodesc_ = new ::std::string;
  }
  algodesc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LineAlgoDesc::mutable_algodesc() {
  set_has_algodesc();
  if (algodesc_ == &::google::protobuf::internal::kEmptyString) {
    algodesc_ = new ::std::string;
  }
  return algodesc_;
}
inline ::std::string* LineAlgoDesc::release_algodesc() {
  clear_has_algodesc();
  if (algodesc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = algodesc_;
    algodesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LineAlgoDesc::set_allocated_algodesc(::std::string* algodesc) {
  if (algodesc_ != &::google::protobuf::internal::kEmptyString) {
    delete algodesc_;
  }
  if (algodesc) {
    set_has_algodesc();
    algodesc_ = algodesc;
  } else {
    clear_has_algodesc();
    algodesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 Level_Chi5 = 4;
inline bool LineAlgoDesc::has_level_chi5() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LineAlgoDesc::set_has_level_chi5() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LineAlgoDesc::clear_has_level_chi5() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LineAlgoDesc::clear_level_chi5() {
  level_chi5_ = GOOGLE_LONGLONG(0);
  clear_has_level_chi5();
}
inline ::google::protobuf::int64 LineAlgoDesc::level_chi5() const {
  return level_chi5_;
}
inline void LineAlgoDesc::set_level_chi5(::google::protobuf::int64 value) {
  set_has_level_chi5();
  level_chi5_ = value;
}

// optional int64 Level_Chi4 = 5;
inline bool LineAlgoDesc::has_level_chi4() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LineAlgoDesc::set_has_level_chi4() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LineAlgoDesc::clear_has_level_chi4() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LineAlgoDesc::clear_level_chi4() {
  level_chi4_ = GOOGLE_LONGLONG(0);
  clear_has_level_chi4();
}
inline ::google::protobuf::int64 LineAlgoDesc::level_chi4() const {
  return level_chi4_;
}
inline void LineAlgoDesc::set_level_chi4(::google::protobuf::int64 value) {
  set_has_level_chi4();
  level_chi4_ = value;
}

// optional int64 Level_Chi3 = 6;
inline bool LineAlgoDesc::has_level_chi3() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LineAlgoDesc::set_has_level_chi3() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LineAlgoDesc::clear_has_level_chi3() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LineAlgoDesc::clear_level_chi3() {
  level_chi3_ = GOOGLE_LONGLONG(0);
  clear_has_level_chi3();
}
inline ::google::protobuf::int64 LineAlgoDesc::level_chi3() const {
  return level_chi3_;
}
inline void LineAlgoDesc::set_level_chi3(::google::protobuf::int64 value) {
  set_has_level_chi3();
  level_chi3_ = value;
}

// optional int64 Level_Chi2 = 7;
inline bool LineAlgoDesc::has_level_chi2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LineAlgoDesc::set_has_level_chi2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LineAlgoDesc::clear_has_level_chi2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LineAlgoDesc::clear_level_chi2() {
  level_chi2_ = GOOGLE_LONGLONG(0);
  clear_has_level_chi2();
}
inline ::google::protobuf::int64 LineAlgoDesc::level_chi2() const {
  return level_chi2_;
}
inline void LineAlgoDesc::set_level_chi2(::google::protobuf::int64 value) {
  set_has_level_chi2();
  level_chi2_ = value;
}

// optional int64 Level_Chi1 = 8;
inline bool LineAlgoDesc::has_level_chi1() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LineAlgoDesc::set_has_level_chi1() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LineAlgoDesc::clear_has_level_chi1() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LineAlgoDesc::clear_level_chi1() {
  level_chi1_ = GOOGLE_LONGLONG(0);
  clear_has_level_chi1();
}
inline ::google::protobuf::int64 LineAlgoDesc::level_chi1() const {
  return level_chi1_;
}
inline void LineAlgoDesc::set_level_chi1(::google::protobuf::int64 value) {
  set_has_level_chi1();
  level_chi1_ = value;
}

// optional int64 Level_Fang1 = 9;
inline bool LineAlgoDesc::has_level_fang1() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LineAlgoDesc::set_has_level_fang1() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LineAlgoDesc::clear_has_level_fang1() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LineAlgoDesc::clear_level_fang1() {
  level_fang1_ = GOOGLE_LONGLONG(0);
  clear_has_level_fang1();
}
inline ::google::protobuf::int64 LineAlgoDesc::level_fang1() const {
  return level_fang1_;
}
inline void LineAlgoDesc::set_level_fang1(::google::protobuf::int64 value) {
  set_has_level_fang1();
  level_fang1_ = value;
}

// optional int64 Level_Fang2 = 10;
inline bool LineAlgoDesc::has_level_fang2() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LineAlgoDesc::set_has_level_fang2() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LineAlgoDesc::clear_has_level_fang2() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LineAlgoDesc::clear_level_fang2() {
  level_fang2_ = GOOGLE_LONGLONG(0);
  clear_has_level_fang2();
}
inline ::google::protobuf::int64 LineAlgoDesc::level_fang2() const {
  return level_fang2_;
}
inline void LineAlgoDesc::set_level_fang2(::google::protobuf::int64 value) {
  set_has_level_fang2();
  level_fang2_ = value;
}

// optional int64 Level_Fang3 = 11;
inline bool LineAlgoDesc::has_level_fang3() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LineAlgoDesc::set_has_level_fang3() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LineAlgoDesc::clear_has_level_fang3() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LineAlgoDesc::clear_level_fang3() {
  level_fang3_ = GOOGLE_LONGLONG(0);
  clear_has_level_fang3();
}
inline ::google::protobuf::int64 LineAlgoDesc::level_fang3() const {
  return level_fang3_;
}
inline void LineAlgoDesc::set_level_fang3(::google::protobuf::int64 value) {
  set_has_level_fang3();
  level_fang3_ = value;
}

// optional int64 Level_Fang4 = 12;
inline bool LineAlgoDesc::has_level_fang4() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LineAlgoDesc::set_has_level_fang4() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LineAlgoDesc::clear_has_level_fang4() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LineAlgoDesc::clear_level_fang4() {
  level_fang4_ = GOOGLE_LONGLONG(0);
  clear_has_level_fang4();
}
inline ::google::protobuf::int64 LineAlgoDesc::level_fang4() const {
  return level_fang4_;
}
inline void LineAlgoDesc::set_level_fang4(::google::protobuf::int64 value) {
  set_has_level_fang4();
  level_fang4_ = value;
}

// optional int64 Level_Fang5 = 13;
inline bool LineAlgoDesc::has_level_fang5() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LineAlgoDesc::set_has_level_fang5() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LineAlgoDesc::clear_has_level_fang5() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LineAlgoDesc::clear_level_fang5() {
  level_fang5_ = GOOGLE_LONGLONG(0);
  clear_has_level_fang5();
}
inline ::google::protobuf::int64 LineAlgoDesc::level_fang5() const {
  return level_fang5_;
}
inline void LineAlgoDesc::set_level_fang5(::google::protobuf::int64 value) {
  set_has_level_fang5();
  level_fang5_ = value;
}

// optional string UserLuckSection = 14;
inline bool LineAlgoDesc::has_userlucksection() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LineAlgoDesc::set_has_userlucksection() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LineAlgoDesc::clear_has_userlucksection() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LineAlgoDesc::clear_userlucksection() {
  if (userlucksection_ != &::google::protobuf::internal::kEmptyString) {
    userlucksection_->clear();
  }
  clear_has_userlucksection();
}
inline const ::std::string& LineAlgoDesc::userlucksection() const {
  return *userlucksection_;
}
inline void LineAlgoDesc::set_userlucksection(const ::std::string& value) {
  set_has_userlucksection();
  if (userlucksection_ == &::google::protobuf::internal::kEmptyString) {
    userlucksection_ = new ::std::string;
  }
  userlucksection_->assign(value);
}
inline void LineAlgoDesc::set_userlucksection(const char* value) {
  set_has_userlucksection();
  if (userlucksection_ == &::google::protobuf::internal::kEmptyString) {
    userlucksection_ = new ::std::string;
  }
  userlucksection_->assign(value);
}
inline void LineAlgoDesc::set_userlucksection(const char* value, size_t size) {
  set_has_userlucksection();
  if (userlucksection_ == &::google::protobuf::internal::kEmptyString) {
    userlucksection_ = new ::std::string;
  }
  userlucksection_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LineAlgoDesc::mutable_userlucksection() {
  set_has_userlucksection();
  if (userlucksection_ == &::google::protobuf::internal::kEmptyString) {
    userlucksection_ = new ::std::string;
  }
  return userlucksection_;
}
inline ::std::string* LineAlgoDesc::release_userlucksection() {
  clear_has_userlucksection();
  if (userlucksection_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userlucksection_;
    userlucksection_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LineAlgoDesc::set_allocated_userlucksection(::std::string* userlucksection) {
  if (userlucksection_ != &::google::protobuf::internal::kEmptyString) {
    delete userlucksection_;
  }
  if (userlucksection) {
    set_has_userlucksection();
    userlucksection_ = userlucksection;
  } else {
    clear_has_userlucksection();
    userlucksection_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 VecUserLuckSection = 15;
inline int LineAlgoDesc::vecuserlucksection_size() const {
  return vecuserlucksection_.size();
}
inline void LineAlgoDesc::clear_vecuserlucksection() {
  vecuserlucksection_.Clear();
}
inline ::google::protobuf::int32 LineAlgoDesc::vecuserlucksection(int index) const {
  return vecuserlucksection_.Get(index);
}
inline void LineAlgoDesc::set_vecuserlucksection(int index, ::google::protobuf::int32 value) {
  vecuserlucksection_.Set(index, value);
}
inline void LineAlgoDesc::add_vecuserlucksection(::google::protobuf::int32 value) {
  vecuserlucksection_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
LineAlgoDesc::vecuserlucksection() const {
  return vecuserlucksection_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
LineAlgoDesc::mutable_vecuserlucksection() {
  return &vecuserlucksection_;
}

// optional string UserNewSection = 16;
inline bool LineAlgoDesc::has_usernewsection() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LineAlgoDesc::set_has_usernewsection() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LineAlgoDesc::clear_has_usernewsection() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LineAlgoDesc::clear_usernewsection() {
  if (usernewsection_ != &::google::protobuf::internal::kEmptyString) {
    usernewsection_->clear();
  }
  clear_has_usernewsection();
}
inline const ::std::string& LineAlgoDesc::usernewsection() const {
  return *usernewsection_;
}
inline void LineAlgoDesc::set_usernewsection(const ::std::string& value) {
  set_has_usernewsection();
  if (usernewsection_ == &::google::protobuf::internal::kEmptyString) {
    usernewsection_ = new ::std::string;
  }
  usernewsection_->assign(value);
}
inline void LineAlgoDesc::set_usernewsection(const char* value) {
  set_has_usernewsection();
  if (usernewsection_ == &::google::protobuf::internal::kEmptyString) {
    usernewsection_ = new ::std::string;
  }
  usernewsection_->assign(value);
}
inline void LineAlgoDesc::set_usernewsection(const char* value, size_t size) {
  set_has_usernewsection();
  if (usernewsection_ == &::google::protobuf::internal::kEmptyString) {
    usernewsection_ = new ::std::string;
  }
  usernewsection_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LineAlgoDesc::mutable_usernewsection() {
  set_has_usernewsection();
  if (usernewsection_ == &::google::protobuf::internal::kEmptyString) {
    usernewsection_ = new ::std::string;
  }
  return usernewsection_;
}
inline ::std::string* LineAlgoDesc::release_usernewsection() {
  clear_has_usernewsection();
  if (usernewsection_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = usernewsection_;
    usernewsection_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LineAlgoDesc::set_allocated_usernewsection(::std::string* usernewsection) {
  if (usernewsection_ != &::google::protobuf::internal::kEmptyString) {
    delete usernewsection_;
  }
  if (usernewsection) {
    set_has_usernewsection();
    usernewsection_ = usernewsection;
  } else {
    clear_has_usernewsection();
    usernewsection_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 VecUserNewSection = 17;
inline int LineAlgoDesc::vecusernewsection_size() const {
  return vecusernewsection_.size();
}
inline void LineAlgoDesc::clear_vecusernewsection() {
  vecusernewsection_.Clear();
}
inline ::google::protobuf::int32 LineAlgoDesc::vecusernewsection(int index) const {
  return vecusernewsection_.Get(index);
}
inline void LineAlgoDesc::set_vecusernewsection(int index, ::google::protobuf::int32 value) {
  vecusernewsection_.Set(index, value);
}
inline void LineAlgoDesc::add_vecusernewsection(::google::protobuf::int32 value) {
  vecusernewsection_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
LineAlgoDesc::vecusernewsection() const {
  return vecusernewsection_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
LineAlgoDesc::mutable_vecusernewsection() {
  return &vecusernewsection_;
}

// optional string UserNewLuckVal = 18;
inline bool LineAlgoDesc::has_usernewluckval() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void LineAlgoDesc::set_has_usernewluckval() {
  _has_bits_[0] |= 0x00020000u;
}
inline void LineAlgoDesc::clear_has_usernewluckval() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void LineAlgoDesc::clear_usernewluckval() {
  if (usernewluckval_ != &::google::protobuf::internal::kEmptyString) {
    usernewluckval_->clear();
  }
  clear_has_usernewluckval();
}
inline const ::std::string& LineAlgoDesc::usernewluckval() const {
  return *usernewluckval_;
}
inline void LineAlgoDesc::set_usernewluckval(const ::std::string& value) {
  set_has_usernewluckval();
  if (usernewluckval_ == &::google::protobuf::internal::kEmptyString) {
    usernewluckval_ = new ::std::string;
  }
  usernewluckval_->assign(value);
}
inline void LineAlgoDesc::set_usernewluckval(const char* value) {
  set_has_usernewluckval();
  if (usernewluckval_ == &::google::protobuf::internal::kEmptyString) {
    usernewluckval_ = new ::std::string;
  }
  usernewluckval_->assign(value);
}
inline void LineAlgoDesc::set_usernewluckval(const char* value, size_t size) {
  set_has_usernewluckval();
  if (usernewluckval_ == &::google::protobuf::internal::kEmptyString) {
    usernewluckval_ = new ::std::string;
  }
  usernewluckval_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LineAlgoDesc::mutable_usernewluckval() {
  set_has_usernewluckval();
  if (usernewluckval_ == &::google::protobuf::internal::kEmptyString) {
    usernewluckval_ = new ::std::string;
  }
  return usernewluckval_;
}
inline ::std::string* LineAlgoDesc::release_usernewluckval() {
  clear_has_usernewluckval();
  if (usernewluckval_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = usernewluckval_;
    usernewluckval_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LineAlgoDesc::set_allocated_usernewluckval(::std::string* usernewluckval) {
  if (usernewluckval_ != &::google::protobuf::internal::kEmptyString) {
    delete usernewluckval_;
  }
  if (usernewluckval) {
    set_has_usernewluckval();
    usernewluckval_ = usernewluckval;
  } else {
    clear_has_usernewluckval();
    usernewluckval_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 VecUserNewLuckVal = 19;
inline int LineAlgoDesc::vecusernewluckval_size() const {
  return vecusernewluckval_.size();
}
inline void LineAlgoDesc::clear_vecusernewluckval() {
  vecusernewluckval_.Clear();
}
inline ::google::protobuf::int32 LineAlgoDesc::vecusernewluckval(int index) const {
  return vecusernewluckval_.Get(index);
}
inline void LineAlgoDesc::set_vecusernewluckval(int index, ::google::protobuf::int32 value) {
  vecusernewluckval_.Set(index, value);
}
inline void LineAlgoDesc::add_vecusernewluckval(::google::protobuf::int32 value) {
  vecusernewluckval_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
LineAlgoDesc::vecusernewluckval() const {
  return vecusernewluckval_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
LineAlgoDesc::mutable_vecusernewluckval() {
  return &vecusernewluckval_;
}

// optional string UserRechargeSection = 20;
inline bool LineAlgoDesc::has_userrechargesection() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void LineAlgoDesc::set_has_userrechargesection() {
  _has_bits_[0] |= 0x00080000u;
}
inline void LineAlgoDesc::clear_has_userrechargesection() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void LineAlgoDesc::clear_userrechargesection() {
  if (userrechargesection_ != &::google::protobuf::internal::kEmptyString) {
    userrechargesection_->clear();
  }
  clear_has_userrechargesection();
}
inline const ::std::string& LineAlgoDesc::userrechargesection() const {
  return *userrechargesection_;
}
inline void LineAlgoDesc::set_userrechargesection(const ::std::string& value) {
  set_has_userrechargesection();
  if (userrechargesection_ == &::google::protobuf::internal::kEmptyString) {
    userrechargesection_ = new ::std::string;
  }
  userrechargesection_->assign(value);
}
inline void LineAlgoDesc::set_userrechargesection(const char* value) {
  set_has_userrechargesection();
  if (userrechargesection_ == &::google::protobuf::internal::kEmptyString) {
    userrechargesection_ = new ::std::string;
  }
  userrechargesection_->assign(value);
}
inline void LineAlgoDesc::set_userrechargesection(const char* value, size_t size) {
  set_has_userrechargesection();
  if (userrechargesection_ == &::google::protobuf::internal::kEmptyString) {
    userrechargesection_ = new ::std::string;
  }
  userrechargesection_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LineAlgoDesc::mutable_userrechargesection() {
  set_has_userrechargesection();
  if (userrechargesection_ == &::google::protobuf::internal::kEmptyString) {
    userrechargesection_ = new ::std::string;
  }
  return userrechargesection_;
}
inline ::std::string* LineAlgoDesc::release_userrechargesection() {
  clear_has_userrechargesection();
  if (userrechargesection_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userrechargesection_;
    userrechargesection_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LineAlgoDesc::set_allocated_userrechargesection(::std::string* userrechargesection) {
  if (userrechargesection_ != &::google::protobuf::internal::kEmptyString) {
    delete userrechargesection_;
  }
  if (userrechargesection) {
    set_has_userrechargesection();
    userrechargesection_ = userrechargesection;
  } else {
    clear_has_userrechargesection();
    userrechargesection_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 VecUserRechargeSection = 21;
inline int LineAlgoDesc::vecuserrechargesection_size() const {
  return vecuserrechargesection_.size();
}
inline void LineAlgoDesc::clear_vecuserrechargesection() {
  vecuserrechargesection_.Clear();
}
inline ::google::protobuf::int32 LineAlgoDesc::vecuserrechargesection(int index) const {
  return vecuserrechargesection_.Get(index);
}
inline void LineAlgoDesc::set_vecuserrechargesection(int index, ::google::protobuf::int32 value) {
  vecuserrechargesection_.Set(index, value);
}
inline void LineAlgoDesc::add_vecuserrechargesection(::google::protobuf::int32 value) {
  vecuserrechargesection_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
LineAlgoDesc::vecuserrechargesection() const {
  return vecuserrechargesection_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
LineAlgoDesc::mutable_vecuserrechargesection() {
  return &vecuserrechargesection_;
}

// optional string UserRechargeLuckyVal = 22;
inline bool LineAlgoDesc::has_userrechargeluckyval() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void LineAlgoDesc::set_has_userrechargeluckyval() {
  _has_bits_[0] |= 0x00200000u;
}
inline void LineAlgoDesc::clear_has_userrechargeluckyval() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void LineAlgoDesc::clear_userrechargeluckyval() {
  if (userrechargeluckyval_ != &::google::protobuf::internal::kEmptyString) {
    userrechargeluckyval_->clear();
  }
  clear_has_userrechargeluckyval();
}
inline const ::std::string& LineAlgoDesc::userrechargeluckyval() const {
  return *userrechargeluckyval_;
}
inline void LineAlgoDesc::set_userrechargeluckyval(const ::std::string& value) {
  set_has_userrechargeluckyval();
  if (userrechargeluckyval_ == &::google::protobuf::internal::kEmptyString) {
    userrechargeluckyval_ = new ::std::string;
  }
  userrechargeluckyval_->assign(value);
}
inline void LineAlgoDesc::set_userrechargeluckyval(const char* value) {
  set_has_userrechargeluckyval();
  if (userrechargeluckyval_ == &::google::protobuf::internal::kEmptyString) {
    userrechargeluckyval_ = new ::std::string;
  }
  userrechargeluckyval_->assign(value);
}
inline void LineAlgoDesc::set_userrechargeluckyval(const char* value, size_t size) {
  set_has_userrechargeluckyval();
  if (userrechargeluckyval_ == &::google::protobuf::internal::kEmptyString) {
    userrechargeluckyval_ = new ::std::string;
  }
  userrechargeluckyval_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LineAlgoDesc::mutable_userrechargeluckyval() {
  set_has_userrechargeluckyval();
  if (userrechargeluckyval_ == &::google::protobuf::internal::kEmptyString) {
    userrechargeluckyval_ = new ::std::string;
  }
  return userrechargeluckyval_;
}
inline ::std::string* LineAlgoDesc::release_userrechargeluckyval() {
  clear_has_userrechargeluckyval();
  if (userrechargeluckyval_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userrechargeluckyval_;
    userrechargeluckyval_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LineAlgoDesc::set_allocated_userrechargeluckyval(::std::string* userrechargeluckyval) {
  if (userrechargeluckyval_ != &::google::protobuf::internal::kEmptyString) {
    delete userrechargeluckyval_;
  }
  if (userrechargeluckyval) {
    set_has_userrechargeluckyval();
    userrechargeluckyval_ = userrechargeluckyval;
  } else {
    clear_has_userrechargeluckyval();
    userrechargeluckyval_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 VecUserRechargeLuckyVal = 23;
inline int LineAlgoDesc::vecuserrechargeluckyval_size() const {
  return vecuserrechargeluckyval_.size();
}
inline void LineAlgoDesc::clear_vecuserrechargeluckyval() {
  vecuserrechargeluckyval_.Clear();
}
inline ::google::protobuf::int32 LineAlgoDesc::vecuserrechargeluckyval(int index) const {
  return vecuserrechargeluckyval_.Get(index);
}
inline void LineAlgoDesc::set_vecuserrechargeluckyval(int index, ::google::protobuf::int32 value) {
  vecuserrechargeluckyval_.Set(index, value);
}
inline void LineAlgoDesc::add_vecuserrechargeluckyval(::google::protobuf::int32 value) {
  vecuserrechargeluckyval_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
LineAlgoDesc::vecuserrechargeluckyval() const {
  return vecuserrechargeluckyval_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
LineAlgoDesc::mutable_vecuserrechargeluckyval() {
  return &vecuserrechargeluckyval_;
}

// optional int32 UserLuceFlag = 24;
inline bool LineAlgoDesc::has_userluceflag() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void LineAlgoDesc::set_has_userluceflag() {
  _has_bits_[0] |= 0x00800000u;
}
inline void LineAlgoDesc::clear_has_userluceflag() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void LineAlgoDesc::clear_userluceflag() {
  userluceflag_ = 0;
  clear_has_userluceflag();
}
inline ::google::protobuf::int32 LineAlgoDesc::userluceflag() const {
  return userluceflag_;
}
inline void LineAlgoDesc::set_userluceflag(::google::protobuf::int32 value) {
  set_has_userluceflag();
  userluceflag_ = value;
}

// -------------------------------------------------------------------

// Sheet_LineAlgoDesc

// repeated .proto_ff.LineAlgoDesc LineAlgoDesc_List = 1;
inline int Sheet_LineAlgoDesc::linealgodesc_list_size() const {
  return linealgodesc_list_.size();
}
inline void Sheet_LineAlgoDesc::clear_linealgodesc_list() {
  linealgodesc_list_.Clear();
}
inline const ::proto_ff::LineAlgoDesc& Sheet_LineAlgoDesc::linealgodesc_list(int index) const {
  return linealgodesc_list_.Get(index);
}
inline ::proto_ff::LineAlgoDesc* Sheet_LineAlgoDesc::mutable_linealgodesc_list(int index) {
  return linealgodesc_list_.Mutable(index);
}
inline ::proto_ff::LineAlgoDesc* Sheet_LineAlgoDesc::add_linealgodesc_list() {
  return linealgodesc_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::LineAlgoDesc >&
Sheet_LineAlgoDesc::linealgodesc_list() const {
  return linealgodesc_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::LineAlgoDesc >*
Sheet_LineAlgoDesc::mutable_linealgodesc_list() {
  return &linealgodesc_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FishResMeta_2eproto__INCLUDED
