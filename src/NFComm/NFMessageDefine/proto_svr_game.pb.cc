// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_svr_game.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto_svr_game.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* Proto_GameTSns_GamePlayerAchInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_GameTSns_GamePlayerAchInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_GameTSns_GameRoomStatInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_GameTSns_GameRoomStatInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_GameTSns_WriteBackUserManagerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_GameTSns_WriteBackUserManagerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_GameTSns_FinishGMCtrlGiveData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_GameTSns_FinishGMCtrlGiveData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_SnsTGame_SetUserManagerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_SnsTGame_SetUserManagerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_SnsTGame_SetGmCtrlGiveData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_SnsTGame_SetGmCtrlGiveData_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyLogicPlayerEnterGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyLogicPlayerEnterGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyLogicPlayerExitGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyLogicPlayerExitGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifySnsPlayerEnterGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifySnsPlayerEnterGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifySnsPlayerExitGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifySnsPlayerExitGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_QueryCoinBalanceReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_QueryCoinBalanceReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_QueryCoinBalanceRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_QueryCoinBalanceRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_UpdateCoinBalanceNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_UpdateCoinBalanceNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_UpdateJettonReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_UpdateJettonReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_UpdateJettonRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_UpdateJettonRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_NotifyServerPlayerExitGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_NotifyServerPlayerExitGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameRoomRegReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameRoomRegReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameRoomUnRegReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameRoomUnRegReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameRoomUpdateOnlineCountReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameRoomUpdateOnlineCountReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameRoomLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameRoomLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameRoomLoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameRoomLoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClearAllGamePlayerNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClearAllGamePlayerNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameServerDumpNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameServerDumpNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_LTSRedeemCodeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_LTSRedeemCodeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_STLRedeemCodeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_STLRedeemCodeRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Proto_GameSvrMsgID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_5fsvr_5fgame_2eproto() {
  protobuf_AddDesc_proto_5fsvr_5fgame_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto_svr_game.proto");
  GOOGLE_CHECK(file != NULL);
  Proto_GameTSns_GamePlayerAchInfoReq_descriptor_ = file->message_type(0);
  static const int Proto_GameTSns_GamePlayerAchInfoReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_GameTSns_GamePlayerAchInfoReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_GameTSns_GamePlayerAchInfoReq, ach_data_),
  };
  Proto_GameTSns_GamePlayerAchInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_GameTSns_GamePlayerAchInfoReq_descriptor_,
      Proto_GameTSns_GamePlayerAchInfoReq::default_instance_,
      Proto_GameTSns_GamePlayerAchInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_GameTSns_GamePlayerAchInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_GameTSns_GamePlayerAchInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_GameTSns_GamePlayerAchInfoReq));
  Proto_GameTSns_GameRoomStatInfoReq_descriptor_ = file->message_type(1);
  static const int Proto_GameTSns_GameRoomStatInfoReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_GameTSns_GameRoomStatInfoReq, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_GameTSns_GameRoomStatInfoReq, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_GameTSns_GameRoomStatInfoReq, is_exe_scene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_GameTSns_GameRoomStatInfoReq, stat_info_),
  };
  Proto_GameTSns_GameRoomStatInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_GameTSns_GameRoomStatInfoReq_descriptor_,
      Proto_GameTSns_GameRoomStatInfoReq::default_instance_,
      Proto_GameTSns_GameRoomStatInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_GameTSns_GameRoomStatInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_GameTSns_GameRoomStatInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_GameTSns_GameRoomStatInfoReq));
  Proto_GameTSns_WriteBackUserManagerInfo_descriptor_ = file->message_type(2);
  static const int Proto_GameTSns_WriteBackUserManagerInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_GameTSns_WriteBackUserManagerInfo, user_manager_data_),
  };
  Proto_GameTSns_WriteBackUserManagerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_GameTSns_WriteBackUserManagerInfo_descriptor_,
      Proto_GameTSns_WriteBackUserManagerInfo::default_instance_,
      Proto_GameTSns_WriteBackUserManagerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_GameTSns_WriteBackUserManagerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_GameTSns_WriteBackUserManagerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_GameTSns_WriteBackUserManagerInfo));
  Proto_GameTSns_FinishGMCtrlGiveData_descriptor_ = file->message_type(3);
  static const int Proto_GameTSns_FinishGMCtrlGiveData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_GameTSns_FinishGMCtrlGiveData, gm_ctrl_data_),
  };
  Proto_GameTSns_FinishGMCtrlGiveData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_GameTSns_FinishGMCtrlGiveData_descriptor_,
      Proto_GameTSns_FinishGMCtrlGiveData::default_instance_,
      Proto_GameTSns_FinishGMCtrlGiveData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_GameTSns_FinishGMCtrlGiveData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_GameTSns_FinishGMCtrlGiveData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_GameTSns_FinishGMCtrlGiveData));
  Proto_SnsTGame_SetUserManagerInfo_descriptor_ = file->message_type(4);
  static const int Proto_SnsTGame_SetUserManagerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SnsTGame_SetUserManagerInfo, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SnsTGame_SetUserManagerInfo, user_manager_data_),
  };
  Proto_SnsTGame_SetUserManagerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_SnsTGame_SetUserManagerInfo_descriptor_,
      Proto_SnsTGame_SetUserManagerInfo::default_instance_,
      Proto_SnsTGame_SetUserManagerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SnsTGame_SetUserManagerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SnsTGame_SetUserManagerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_SnsTGame_SetUserManagerInfo));
  Proto_SnsTGame_SetGmCtrlGiveData_descriptor_ = file->message_type(5);
  static const int Proto_SnsTGame_SetGmCtrlGiveData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SnsTGame_SetGmCtrlGiveData, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SnsTGame_SetGmCtrlGiveData, gm_ctrl_data_),
  };
  Proto_SnsTGame_SetGmCtrlGiveData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_SnsTGame_SetGmCtrlGiveData_descriptor_,
      Proto_SnsTGame_SetGmCtrlGiveData::default_instance_,
      Proto_SnsTGame_SetGmCtrlGiveData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SnsTGame_SetGmCtrlGiveData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SnsTGame_SetGmCtrlGiveData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_SnsTGame_SetGmCtrlGiveData));
  NotifyLogicPlayerEnterGame_descriptor_ = file->message_type(6);
  static const int NotifyLogicPlayerEnterGame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicPlayerEnterGame, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicPlayerEnterGame, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicPlayerEnterGame, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicPlayerEnterGame, game_bus_id_),
  };
  NotifyLogicPlayerEnterGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyLogicPlayerEnterGame_descriptor_,
      NotifyLogicPlayerEnterGame::default_instance_,
      NotifyLogicPlayerEnterGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicPlayerEnterGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicPlayerEnterGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyLogicPlayerEnterGame));
  NotifyLogicPlayerExitGame_descriptor_ = file->message_type(7);
  static const int NotifyLogicPlayerExitGame_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicPlayerExitGame, player_id_),
  };
  NotifyLogicPlayerExitGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyLogicPlayerExitGame_descriptor_,
      NotifyLogicPlayerExitGame::default_instance_,
      NotifyLogicPlayerExitGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicPlayerExitGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicPlayerExitGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyLogicPlayerExitGame));
  NotifySnsPlayerEnterGame_descriptor_ = file->message_type(8);
  static const int NotifySnsPlayerEnterGame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySnsPlayerEnterGame, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySnsPlayerEnterGame, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySnsPlayerEnterGame, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySnsPlayerEnterGame, game_bus_id_),
  };
  NotifySnsPlayerEnterGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifySnsPlayerEnterGame_descriptor_,
      NotifySnsPlayerEnterGame::default_instance_,
      NotifySnsPlayerEnterGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySnsPlayerEnterGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySnsPlayerEnterGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifySnsPlayerEnterGame));
  NotifySnsPlayerExitGame_descriptor_ = file->message_type(9);
  static const int NotifySnsPlayerExitGame_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySnsPlayerExitGame, player_id_),
  };
  NotifySnsPlayerExitGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifySnsPlayerExitGame_descriptor_,
      NotifySnsPlayerExitGame::default_instance_,
      NotifySnsPlayerExitGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySnsPlayerExitGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySnsPlayerExitGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifySnsPlayerExitGame));
  Proto_QueryCoinBalanceReq_descriptor_ = file->message_type(10);
  static const int Proto_QueryCoinBalanceReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_QueryCoinBalanceReq, player_id_),
  };
  Proto_QueryCoinBalanceReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_QueryCoinBalanceReq_descriptor_,
      Proto_QueryCoinBalanceReq::default_instance_,
      Proto_QueryCoinBalanceReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_QueryCoinBalanceReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_QueryCoinBalanceReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_QueryCoinBalanceReq));
  Proto_QueryCoinBalanceRsp_descriptor_ = file->message_type(11);
  static const int Proto_QueryCoinBalanceRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_QueryCoinBalanceRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_QueryCoinBalanceRsp, player_detail_),
  };
  Proto_QueryCoinBalanceRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_QueryCoinBalanceRsp_descriptor_,
      Proto_QueryCoinBalanceRsp::default_instance_,
      Proto_QueryCoinBalanceRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_QueryCoinBalanceRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_QueryCoinBalanceRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_QueryCoinBalanceRsp));
  Proto_UpdateCoinBalanceNotify_descriptor_ = file->message_type(12);
  static const int Proto_UpdateCoinBalanceNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UpdateCoinBalanceNotify, player_detail_),
  };
  Proto_UpdateCoinBalanceNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_UpdateCoinBalanceNotify_descriptor_,
      Proto_UpdateCoinBalanceNotify::default_instance_,
      Proto_UpdateCoinBalanceNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UpdateCoinBalanceNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UpdateCoinBalanceNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_UpdateCoinBalanceNotify));
  Proto_UpdateJettonReq_descriptor_ = file->message_type(13);
  static const int Proto_UpdateJettonReq_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UpdateJettonReq, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UpdateJettonReq, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UpdateJettonReq, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UpdateJettonReq, desk_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UpdateJettonReq, chair_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UpdateJettonReq, account_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UpdateJettonReq, opt_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UpdateJettonReq, opt_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UpdateJettonReq, change_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UpdateJettonReq, money_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UpdateJettonReq, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UpdateJettonReq, add_or_deduce_),
  };
  Proto_UpdateJettonReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_UpdateJettonReq_descriptor_,
      Proto_UpdateJettonReq::default_instance_,
      Proto_UpdateJettonReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UpdateJettonReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UpdateJettonReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_UpdateJettonReq));
  Proto_UpdateJettonRsp_descriptor_ = file->message_type(14);
  static const int Proto_UpdateJettonRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UpdateJettonRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UpdateJettonRsp, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UpdateJettonRsp, money_),
  };
  Proto_UpdateJettonRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_UpdateJettonRsp_descriptor_,
      Proto_UpdateJettonRsp::default_instance_,
      Proto_UpdateJettonRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UpdateJettonRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_UpdateJettonRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_UpdateJettonRsp));
  Proto_NotifyServerPlayerExitGame_descriptor_ = file->message_type(15);
  static const int Proto_NotifyServerPlayerExitGame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_NotifyServerPlayerExitGame, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_NotifyServerPlayerExitGame, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_NotifyServerPlayerExitGame, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_NotifyServerPlayerExitGame, desk_id_),
  };
  Proto_NotifyServerPlayerExitGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_NotifyServerPlayerExitGame_descriptor_,
      Proto_NotifyServerPlayerExitGame::default_instance_,
      Proto_NotifyServerPlayerExitGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_NotifyServerPlayerExitGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_NotifyServerPlayerExitGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_NotifyServerPlayerExitGame));
  GameRoomRegReq_descriptor_ = file->message_type(16);
  static const int GameRoomRegReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomRegReq, room_info_),
  };
  GameRoomRegReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameRoomRegReq_descriptor_,
      GameRoomRegReq::default_instance_,
      GameRoomRegReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomRegReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomRegReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameRoomRegReq));
  GameRoomUnRegReq_descriptor_ = file->message_type(17);
  static const int GameRoomUnRegReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomUnRegReq, room_info_),
  };
  GameRoomUnRegReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameRoomUnRegReq_descriptor_,
      GameRoomUnRegReq::default_instance_,
      GameRoomUnRegReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomUnRegReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomUnRegReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameRoomUnRegReq));
  GameRoomUpdateOnlineCountReq_descriptor_ = file->message_type(18);
  static const int GameRoomUpdateOnlineCountReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomUpdateOnlineCountReq, room_info_),
  };
  GameRoomUpdateOnlineCountReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameRoomUpdateOnlineCountReq_descriptor_,
      GameRoomUpdateOnlineCountReq::default_instance_,
      GameRoomUpdateOnlineCountReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomUpdateOnlineCountReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomUpdateOnlineCountReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameRoomUpdateOnlineCountReq));
  GameRoomLoginReq_descriptor_ = file->message_type(19);
  static const int GameRoomLoginReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomLoginReq, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomLoginReq, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomLoginReq, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomLoginReq, proxy_id_),
  };
  GameRoomLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameRoomLoginReq_descriptor_,
      GameRoomLoginReq::default_instance_,
      GameRoomLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameRoomLoginReq));
  GameRoomLoginRsp_descriptor_ = file->message_type(20);
  static const int GameRoomLoginRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomLoginRsp, result_),
  };
  GameRoomLoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameRoomLoginRsp_descriptor_,
      GameRoomLoginRsp::default_instance_,
      GameRoomLoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomLoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRoomLoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameRoomLoginRsp));
  ClearAllGamePlayerNotify_descriptor_ = file->message_type(21);
  static const int ClearAllGamePlayerNotify_offsets_[1] = {
  };
  ClearAllGamePlayerNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClearAllGamePlayerNotify_descriptor_,
      ClearAllGamePlayerNotify::default_instance_,
      ClearAllGamePlayerNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearAllGamePlayerNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearAllGamePlayerNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClearAllGamePlayerNotify));
  GameServerDumpNotify_descriptor_ = file->message_type(22);
  static const int GameServerDumpNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerDumpNotify, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerDumpNotify, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerDumpNotify, bus_id_),
  };
  GameServerDumpNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameServerDumpNotify_descriptor_,
      GameServerDumpNotify::default_instance_,
      GameServerDumpNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerDumpNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameServerDumpNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameServerDumpNotify));
  Proto_LTSRedeemCodeReq_descriptor_ = file->message_type(23);
  static const int Proto_LTSRedeemCodeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSRedeemCodeReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSRedeemCodeReq, user_id_),
  };
  Proto_LTSRedeemCodeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_LTSRedeemCodeReq_descriptor_,
      Proto_LTSRedeemCodeReq::default_instance_,
      Proto_LTSRedeemCodeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSRedeemCodeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSRedeemCodeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_LTSRedeemCodeReq));
  Proto_STLRedeemCodeRsp_descriptor_ = file->message_type(24);
  static const int Proto_STLRedeemCodeRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLRedeemCodeRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLRedeemCodeRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLRedeemCodeRsp, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLRedeemCodeRsp, add_gold_),
  };
  Proto_STLRedeemCodeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_STLRedeemCodeRsp_descriptor_,
      Proto_STLRedeemCodeRsp::default_instance_,
      Proto_STLRedeemCodeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLRedeemCodeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLRedeemCodeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_STLRedeemCodeRsp));
  Proto_GameSvrMsgID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_5fsvr_5fgame_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_GameTSns_GamePlayerAchInfoReq_descriptor_, &Proto_GameTSns_GamePlayerAchInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_GameTSns_GameRoomStatInfoReq_descriptor_, &Proto_GameTSns_GameRoomStatInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_GameTSns_WriteBackUserManagerInfo_descriptor_, &Proto_GameTSns_WriteBackUserManagerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_GameTSns_FinishGMCtrlGiveData_descriptor_, &Proto_GameTSns_FinishGMCtrlGiveData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_SnsTGame_SetUserManagerInfo_descriptor_, &Proto_SnsTGame_SetUserManagerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_SnsTGame_SetGmCtrlGiveData_descriptor_, &Proto_SnsTGame_SetGmCtrlGiveData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyLogicPlayerEnterGame_descriptor_, &NotifyLogicPlayerEnterGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyLogicPlayerExitGame_descriptor_, &NotifyLogicPlayerExitGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifySnsPlayerEnterGame_descriptor_, &NotifySnsPlayerEnterGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifySnsPlayerExitGame_descriptor_, &NotifySnsPlayerExitGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_QueryCoinBalanceReq_descriptor_, &Proto_QueryCoinBalanceReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_QueryCoinBalanceRsp_descriptor_, &Proto_QueryCoinBalanceRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_UpdateCoinBalanceNotify_descriptor_, &Proto_UpdateCoinBalanceNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_UpdateJettonReq_descriptor_, &Proto_UpdateJettonReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_UpdateJettonRsp_descriptor_, &Proto_UpdateJettonRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_NotifyServerPlayerExitGame_descriptor_, &Proto_NotifyServerPlayerExitGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameRoomRegReq_descriptor_, &GameRoomRegReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameRoomUnRegReq_descriptor_, &GameRoomUnRegReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameRoomUpdateOnlineCountReq_descriptor_, &GameRoomUpdateOnlineCountReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameRoomLoginReq_descriptor_, &GameRoomLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameRoomLoginRsp_descriptor_, &GameRoomLoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClearAllGamePlayerNotify_descriptor_, &ClearAllGamePlayerNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameServerDumpNotify_descriptor_, &GameServerDumpNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_LTSRedeemCodeReq_descriptor_, &Proto_LTSRedeemCodeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_STLRedeemCodeRsp_descriptor_, &Proto_STLRedeemCodeRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_5fsvr_5fgame_2eproto() {
  delete Proto_GameTSns_GamePlayerAchInfoReq::default_instance_;
  delete Proto_GameTSns_GamePlayerAchInfoReq_reflection_;
  delete Proto_GameTSns_GameRoomStatInfoReq::default_instance_;
  delete Proto_GameTSns_GameRoomStatInfoReq_reflection_;
  delete Proto_GameTSns_WriteBackUserManagerInfo::default_instance_;
  delete Proto_GameTSns_WriteBackUserManagerInfo_reflection_;
  delete Proto_GameTSns_FinishGMCtrlGiveData::default_instance_;
  delete Proto_GameTSns_FinishGMCtrlGiveData_reflection_;
  delete Proto_SnsTGame_SetUserManagerInfo::default_instance_;
  delete Proto_SnsTGame_SetUserManagerInfo_reflection_;
  delete Proto_SnsTGame_SetGmCtrlGiveData::default_instance_;
  delete Proto_SnsTGame_SetGmCtrlGiveData_reflection_;
  delete NotifyLogicPlayerEnterGame::default_instance_;
  delete NotifyLogicPlayerEnterGame_reflection_;
  delete NotifyLogicPlayerExitGame::default_instance_;
  delete NotifyLogicPlayerExitGame_reflection_;
  delete NotifySnsPlayerEnterGame::default_instance_;
  delete NotifySnsPlayerEnterGame_reflection_;
  delete NotifySnsPlayerExitGame::default_instance_;
  delete NotifySnsPlayerExitGame_reflection_;
  delete Proto_QueryCoinBalanceReq::default_instance_;
  delete Proto_QueryCoinBalanceReq_reflection_;
  delete Proto_QueryCoinBalanceRsp::default_instance_;
  delete Proto_QueryCoinBalanceRsp_reflection_;
  delete Proto_UpdateCoinBalanceNotify::default_instance_;
  delete Proto_UpdateCoinBalanceNotify_reflection_;
  delete Proto_UpdateJettonReq::default_instance_;
  delete Proto_UpdateJettonReq_reflection_;
  delete Proto_UpdateJettonRsp::default_instance_;
  delete Proto_UpdateJettonRsp_reflection_;
  delete Proto_NotifyServerPlayerExitGame::default_instance_;
  delete Proto_NotifyServerPlayerExitGame_reflection_;
  delete GameRoomRegReq::default_instance_;
  delete GameRoomRegReq_reflection_;
  delete GameRoomUnRegReq::default_instance_;
  delete GameRoomUnRegReq_reflection_;
  delete GameRoomUpdateOnlineCountReq::default_instance_;
  delete GameRoomUpdateOnlineCountReq_reflection_;
  delete GameRoomLoginReq::default_instance_;
  delete GameRoomLoginReq_reflection_;
  delete GameRoomLoginRsp::default_instance_;
  delete GameRoomLoginRsp_reflection_;
  delete ClearAllGamePlayerNotify::default_instance_;
  delete ClearAllGamePlayerNotify_reflection_;
  delete GameServerDumpNotify::default_instance_;
  delete GameServerDumpNotify_reflection_;
  delete Proto_LTSRedeemCodeReq::default_instance_;
  delete Proto_LTSRedeemCodeReq_reflection_;
  delete Proto_STLRedeemCodeRsp::default_instance_;
  delete Proto_STLRedeemCodeRsp_reflection_;
}

void protobuf_AddDesc_proto_5fsvr_5fgame_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_proto_5fcommon_2eproto();
  ::proto_game::protobuf_AddDesc_proto_5fcs_5fgame_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024proto_svr_game.proto\022\010proto_ff\032\025yd_fie"
    "ldoptions.proto\032\022proto_common.proto\032\023pro"
    "to_cs_game.proto\"m\n#Proto_GameTSns_GameP"
    "layerAchInfoReq\022\017\n\007user_id\030\001 \001(\004\0225\n\010ach_"
    "data\030\002 \001(\0132#.proto_ff.GamePlayerAchievem"
    "entData\"\207\001\n\"Proto_GameTSns_GameRoomStatI"
    "nfoReq\022\017\n\007game_id\030\001 \001(\004\022\017\n\007room_id\030\002 \001(\004"
    "\022\024\n\014is_exe_scene\030\003 \001(\010\022)\n\tstat_info\030\004 \001("
    "\0132\026.proto_ff.GameRoomStat\"e\n\'Proto_GameT"
    "Sns_WriteBackUserManagerInfo\022:\n\021user_man"
    "ager_data\030\001 \001(\0132\037.proto_ff.tbGameUserMan"
    "agerData\"[\n#Proto_GameTSns_FinishGMCtrlG"
    "iveData\0224\n\014gm_ctrl_data\030\001 \001(\0132\036.proto_ff"
    ".tbGmCtrlGiveCtrlData\"r\n!Proto_SnsTGame_"
    "SetUserManagerInfo\022\021\n\tplayer_id\030\001 \001(\004\022:\n"
    "\021user_manager_data\030\002 \001(\0132\037.proto_ff.tbGa"
    "meUserManagerData\"k\n Proto_SnsTGame_SetG"
    "mCtrlGiveData\022\021\n\tplayer_id\030\001 \001(\004\0224\n\014gm_c"
    "trl_data\030\002 \001(\0132\036.proto_ff.tbGmCtrlGiveCt"
    "rlData\"f\n\032NotifyLogicPlayerEnterGame\022\021\n\t"
    "player_id\030\001 \001(\004\022\017\n\007game_id\030\002 \001(\r\022\017\n\007room"
    "_id\030\003 \001(\r\022\023\n\013game_bus_id\030\004 \001(\r\".\n\031Notify"
    "LogicPlayerExitGame\022\021\n\tplayer_id\030\001 \001(\004\"d"
    "\n\030NotifySnsPlayerEnterGame\022\021\n\tplayer_id\030"
    "\001 \001(\004\022\017\n\007game_id\030\002 \001(\r\022\017\n\007room_id\030\003 \001(\r\022"
    "\023\n\013game_bus_id\030\004 \001(\r\",\n\027NotifySnsPlayerE"
    "xitGame\022\021\n\tplayer_id\030\001 \001(\004\".\n\031Proto_Quer"
    "yCoinBalanceReq\022\021\n\tplayer_id\030\001 \001(\004\"b\n\031Pr"
    "oto_QueryCoinBalanceRsp\022\016\n\006result\030\001 \001(\005\022"
    "5\n\rplayer_detail\030\002 \001(\0132\036.proto_ff.GamePl"
    "ayerDetailData\"V\n\035Proto_UpdateCoinBalanc"
    "eNotify\0225\n\rplayer_detail\030\001 \001(\0132\036.proto_f"
    "f.GamePlayerDetailData\"\373\001\n\025Proto_UpdateJ"
    "ettonReq\022\021\n\tplayer_id\030\001 \001(\004\022\017\n\007game_id\030\002"
    " \001(\r\022\017\n\007room_id\030\003 \001(\r\022\017\n\007desk_id\030\004 \001(\r\022\020"
    "\n\010chair_id\030\005 \001(\r\022\024\n\014account_type\030\006 \001(\r\022\020"
    "\n\010opt_type\030\007 \001(\r\022\022\n\nopt_reason\030\010 \001(\r\022\023\n\013"
    "change_type\030\t \001(\r\022\024\n\014money_change\030\n \001(\003\022"
    "\014\n\004time\030\013 \001(\r\022\025\n\radd_or_deduce\030\014 \001(\010\"I\n\025"
    "Proto_UpdateJettonRsp\022\016\n\006result\030\001 \001(\r\022\021\n"
    "\tplayer_id\030\002 \001(\004\022\r\n\005money\030\003 \001(\003\"h\n Proto"
    "_NotifyServerPlayerExitGame\022\021\n\tplayer_id"
    "\030\001 \001(\004\022\017\n\007game_id\030\002 \001(\r\022\017\n\007room_id\030\003 \001(\r"
    "\022\017\n\007desk_id\030\004 \001(\r\"A\n\016GameRoomRegReq\022/\n\tr"
    "oom_info\030\001 \001(\0132\034.proto_ff.GameServerRoom"
    "Info\"C\n\020GameRoomUnRegReq\022/\n\troom_info\030\001 "
    "\001(\0132\034.proto_ff.GameServerRoomInfo\"O\n\034Gam"
    "eRoomUpdateOnlineCountReq\022/\n\troom_info\030\001"
    " \001(\0132\034.proto_ff.GameServerRoomInfo\"Y\n\020Ga"
    "meRoomLoginReq\022\017\n\007game_id\030\001 \001(\r\022\017\n\007room_"
    "id\030\002 \001(\r\022\021\n\tplayer_id\030\003 \001(\004\022\020\n\010proxy_id\030"
    "\004 \001(\r\"\"\n\020GameRoomLoginRsp\022\016\n\006result\030\001 \001("
    "\r\"\032\n\030ClearAllGamePlayerNotify\"H\n\024GameSer"
    "verDumpNotify\022\017\n\007game_id\030\001 \001(\r\022\017\n\007room_i"
    "d\030\002 \001(\r\022\016\n\006bus_id\030\003 \001(\r\"5\n\026Proto_LTSRede"
    "emCodeReq\022\n\n\002id\030\001 \001(\t\022\017\n\007user_id\030\002 \001(\004\"W"
    "\n\026Proto_STLRedeemCodeRsp\022\016\n\006result\030\001 \001(\005"
    "\022\n\n\002id\030\002 \001(\t\022\017\n\007user_id\030\003 \001(\004\022\020\n\010add_gol"
    "d\030\004 \001(\004*\314\010\n\022Proto_GameSvrMsgID\022\035\n\030NF_GTW"
    "_ROOM_REGISTER_REQ\020\334\001\022\035\n\030NF_GTW_ROOM_REG"
    "ISTER_RSP\020\335\001\022\037\n\032NF_GTW_ROOM_UNREGISTER_R"
    "EQ\020\336\001\022\037\n\032NF_GTW_ROOM_UNREGISTER_RSP\020\337\001\022("
    "\n#NF_GTW_ROOM_UPDATE_ONLINE_COUNT_REQ\020\340\001"
    "\022(\n#NF_GTW_ROOM_UPDATE_ONLINE_COUNT_RSP\020"
    "\341\001\022\032\n\025NF_WTG_LOGIN_ROOM_REQ\020\342\001\022\032\n\025NF_GTW"
    "_LOGIN_ROOM_RSP\020\343\001\022\034\n\027E_GTL_UPDATE_JETTO"
    "N_REQ\020\372\001\022\034\n\027E_LTG_UPDATE_JETTON_RSP\020\373\001\022\037"
    "\n\032E_LTW_UPDATE_JETTON_NOTIFY\020\374\001\022#\n\036E_WTL"
    "_NOTIFY_PLAYER_ENTER_GAME\020\375\001\022\"\n\035E_WTL_NO"
    "TIFY_PLAYER_EXIT_GAME\020\376\001\022!\n\034E_GTL_COIN_Q"
    "UERY_BALANCE_REQ\020\377\001\022!\n\034E_GTL_COIN_QUERY_"
    "BALANCE_RPS\020\200\002\022!\n\034E_STS_GAME_PLAYER_LEAV"
    "E_GAME\020\201\002\022\'\n\"E_STS_CLEAR_ALL_GAME_PLAYER"
    "_NOTIFY\020\202\002\022\"\n\035E_STS_GAME_SERVER_DUMP_NOT"
    "IFY\020\203\002\022%\n E_LTSns_NOTIFY_PLAYER_ENTER_GA"
    "ME\020\204\002\022$\n\037E_LTSns_NOTIFY_PLAYER_EXIT_GAME"
    "\020\205\002\022%\n E_SnsTGame_SET_USER_MANAGER_INFO\020"
    "\206\002\022,\n\'E_GameTSns_WRITE_BACK_USER_MANAGER"
    "_IFNO\020\207\002\022%\n E_WorldTSns_GAME_ROOM_REG_NO"
    "TIFY\020\210\002\022(\n#E_GameTSns_GAME_ROOM_STAT_INF"
    "O_SEND\020\211\002\022)\n$E_GameTSns_GAME_PLAYER_ACH_"
    "INFO_SEND\020\213\002\022+\n&E_LogicTGame_UPDATE_PLAY"
    "ER_COINBALANCE\020\214\002\022%\n E_SnsTGame_SET_GM_C"
    "TRL_GIVE_DATA\020\215\002\022(\n#E_GameTSns_FINISH_GM"
    "_CTRL_GIVE_DATA\020\216\002\022\030\n\023E_LTS_RedeemCodeRe"
    "q\020\217\002\022\030\n\023E_STL_RedeemCodeRsp\020\220\002", 3430);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto_svr_game.proto", &protobuf_RegisterTypes);
  Proto_GameTSns_GamePlayerAchInfoReq::default_instance_ = new Proto_GameTSns_GamePlayerAchInfoReq();
  Proto_GameTSns_GameRoomStatInfoReq::default_instance_ = new Proto_GameTSns_GameRoomStatInfoReq();
  Proto_GameTSns_WriteBackUserManagerInfo::default_instance_ = new Proto_GameTSns_WriteBackUserManagerInfo();
  Proto_GameTSns_FinishGMCtrlGiveData::default_instance_ = new Proto_GameTSns_FinishGMCtrlGiveData();
  Proto_SnsTGame_SetUserManagerInfo::default_instance_ = new Proto_SnsTGame_SetUserManagerInfo();
  Proto_SnsTGame_SetGmCtrlGiveData::default_instance_ = new Proto_SnsTGame_SetGmCtrlGiveData();
  NotifyLogicPlayerEnterGame::default_instance_ = new NotifyLogicPlayerEnterGame();
  NotifyLogicPlayerExitGame::default_instance_ = new NotifyLogicPlayerExitGame();
  NotifySnsPlayerEnterGame::default_instance_ = new NotifySnsPlayerEnterGame();
  NotifySnsPlayerExitGame::default_instance_ = new NotifySnsPlayerExitGame();
  Proto_QueryCoinBalanceReq::default_instance_ = new Proto_QueryCoinBalanceReq();
  Proto_QueryCoinBalanceRsp::default_instance_ = new Proto_QueryCoinBalanceRsp();
  Proto_UpdateCoinBalanceNotify::default_instance_ = new Proto_UpdateCoinBalanceNotify();
  Proto_UpdateJettonReq::default_instance_ = new Proto_UpdateJettonReq();
  Proto_UpdateJettonRsp::default_instance_ = new Proto_UpdateJettonRsp();
  Proto_NotifyServerPlayerExitGame::default_instance_ = new Proto_NotifyServerPlayerExitGame();
  GameRoomRegReq::default_instance_ = new GameRoomRegReq();
  GameRoomUnRegReq::default_instance_ = new GameRoomUnRegReq();
  GameRoomUpdateOnlineCountReq::default_instance_ = new GameRoomUpdateOnlineCountReq();
  GameRoomLoginReq::default_instance_ = new GameRoomLoginReq();
  GameRoomLoginRsp::default_instance_ = new GameRoomLoginRsp();
  ClearAllGamePlayerNotify::default_instance_ = new ClearAllGamePlayerNotify();
  GameServerDumpNotify::default_instance_ = new GameServerDumpNotify();
  Proto_LTSRedeemCodeReq::default_instance_ = new Proto_LTSRedeemCodeReq();
  Proto_STLRedeemCodeRsp::default_instance_ = new Proto_STLRedeemCodeRsp();
  Proto_GameTSns_GamePlayerAchInfoReq::default_instance_->InitAsDefaultInstance();
  Proto_GameTSns_GameRoomStatInfoReq::default_instance_->InitAsDefaultInstance();
  Proto_GameTSns_WriteBackUserManagerInfo::default_instance_->InitAsDefaultInstance();
  Proto_GameTSns_FinishGMCtrlGiveData::default_instance_->InitAsDefaultInstance();
  Proto_SnsTGame_SetUserManagerInfo::default_instance_->InitAsDefaultInstance();
  Proto_SnsTGame_SetGmCtrlGiveData::default_instance_->InitAsDefaultInstance();
  NotifyLogicPlayerEnterGame::default_instance_->InitAsDefaultInstance();
  NotifyLogicPlayerExitGame::default_instance_->InitAsDefaultInstance();
  NotifySnsPlayerEnterGame::default_instance_->InitAsDefaultInstance();
  NotifySnsPlayerExitGame::default_instance_->InitAsDefaultInstance();
  Proto_QueryCoinBalanceReq::default_instance_->InitAsDefaultInstance();
  Proto_QueryCoinBalanceRsp::default_instance_->InitAsDefaultInstance();
  Proto_UpdateCoinBalanceNotify::default_instance_->InitAsDefaultInstance();
  Proto_UpdateJettonReq::default_instance_->InitAsDefaultInstance();
  Proto_UpdateJettonRsp::default_instance_->InitAsDefaultInstance();
  Proto_NotifyServerPlayerExitGame::default_instance_->InitAsDefaultInstance();
  GameRoomRegReq::default_instance_->InitAsDefaultInstance();
  GameRoomUnRegReq::default_instance_->InitAsDefaultInstance();
  GameRoomUpdateOnlineCountReq::default_instance_->InitAsDefaultInstance();
  GameRoomLoginReq::default_instance_->InitAsDefaultInstance();
  GameRoomLoginRsp::default_instance_->InitAsDefaultInstance();
  ClearAllGamePlayerNotify::default_instance_->InitAsDefaultInstance();
  GameServerDumpNotify::default_instance_->InitAsDefaultInstance();
  Proto_LTSRedeemCodeReq::default_instance_->InitAsDefaultInstance();
  Proto_STLRedeemCodeRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_5fsvr_5fgame_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_5fsvr_5fgame_2eproto {
  StaticDescriptorInitializer_proto_5fsvr_5fgame_2eproto() {
    protobuf_AddDesc_proto_5fsvr_5fgame_2eproto();
  }
} static_descriptor_initializer_proto_5fsvr_5fgame_2eproto_;
const ::google::protobuf::EnumDescriptor* Proto_GameSvrMsgID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_GameSvrMsgID_descriptor_;
}
bool Proto_GameSvrMsgID_IsValid(int value) {
  switch(value) {
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
    case 272:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_GameTSns_GamePlayerAchInfoReq::kUserIdFieldNumber;
const int Proto_GameTSns_GamePlayerAchInfoReq::kAchDataFieldNumber;
#endif  // !_MSC_VER

Proto_GameTSns_GamePlayerAchInfoReq::Proto_GameTSns_GamePlayerAchInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_GameTSns_GamePlayerAchInfoReq::InitAsDefaultInstance() {
  ach_data_ = const_cast< ::proto_ff::GamePlayerAchievementData*>(&::proto_ff::GamePlayerAchievementData::default_instance());
}

Proto_GameTSns_GamePlayerAchInfoReq::Proto_GameTSns_GamePlayerAchInfoReq(const Proto_GameTSns_GamePlayerAchInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_GameTSns_GamePlayerAchInfoReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  ach_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_GameTSns_GamePlayerAchInfoReq::~Proto_GameTSns_GamePlayerAchInfoReq() {
  SharedDtor();
}

void Proto_GameTSns_GamePlayerAchInfoReq::SharedDtor() {
  if (this != default_instance_) {
    delete ach_data_;
  }
}

void Proto_GameTSns_GamePlayerAchInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_GameTSns_GamePlayerAchInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_GameTSns_GamePlayerAchInfoReq_descriptor_;
}

const Proto_GameTSns_GamePlayerAchInfoReq& Proto_GameTSns_GamePlayerAchInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fgame_2eproto();
  return *default_instance_;
}

Proto_GameTSns_GamePlayerAchInfoReq* Proto_GameTSns_GamePlayerAchInfoReq::default_instance_ = NULL;

Proto_GameTSns_GamePlayerAchInfoReq* Proto_GameTSns_GamePlayerAchInfoReq::New() const {
  return new Proto_GameTSns_GamePlayerAchInfoReq;
}

void Proto_GameTSns_GamePlayerAchInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_ach_data()) {
      if (ach_data_ != NULL) ach_data_->::proto_ff::GamePlayerAchievementData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_GameTSns_GamePlayerAchInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ach_data;
        break;
      }

      // optional .proto_ff.GamePlayerAchievementData ach_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ach_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_GameTSns_GamePlayerAchInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional .proto_ff.GamePlayerAchievementData ach_data = 2;
  if (has_ach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ach_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_GameTSns_GamePlayerAchInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional .proto_ff.GamePlayerAchievementData ach_data = 2;
  if (has_ach_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ach_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_GameTSns_GamePlayerAchInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional .proto_ff.GamePlayerAchievementData ach_data = 2;
    if (has_ach_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ach_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_GameTSns_GamePlayerAchInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_GameTSns_GamePlayerAchInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_GameTSns_GamePlayerAchInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_GameTSns_GamePlayerAchInfoReq::MergeFrom(const Proto_GameTSns_GamePlayerAchInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_ach_data()) {
      mutable_ach_data()->::proto_ff::GamePlayerAchievementData::MergeFrom(from.ach_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_GameTSns_GamePlayerAchInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_GameTSns_GamePlayerAchInfoReq::CopyFrom(const Proto_GameTSns_GamePlayerAchInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_GameTSns_GamePlayerAchInfoReq::IsInitialized() const {

  return true;
}

void Proto_GameTSns_GamePlayerAchInfoReq::Swap(Proto_GameTSns_GamePlayerAchInfoReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(ach_data_, other->ach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_GameTSns_GamePlayerAchInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_GameTSns_GamePlayerAchInfoReq_descriptor_;
  metadata.reflection = Proto_GameTSns_GamePlayerAchInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_GameTSns_GameRoomStatInfoReq::kGameIdFieldNumber;
const int Proto_GameTSns_GameRoomStatInfoReq::kRoomIdFieldNumber;
const int Proto_GameTSns_GameRoomStatInfoReq::kIsExeSceneFieldNumber;
const int Proto_GameTSns_GameRoomStatInfoReq::kStatInfoFieldNumber;
#endif  // !_MSC_VER

Proto_GameTSns_GameRoomStatInfoReq::Proto_GameTSns_GameRoomStatInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_GameTSns_GameRoomStatInfoReq::InitAsDefaultInstance() {
  stat_info_ = const_cast< ::proto_ff::GameRoomStat*>(&::proto_ff::GameRoomStat::default_instance());
}

Proto_GameTSns_GameRoomStatInfoReq::Proto_GameTSns_GameRoomStatInfoReq(const Proto_GameTSns_GameRoomStatInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_GameTSns_GameRoomStatInfoReq::SharedCtor() {
  _cached_size_ = 0;
  game_id_ = GOOGLE_ULONGLONG(0);
  room_id_ = GOOGLE_ULONGLONG(0);
  is_exe_scene_ = false;
  stat_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_GameTSns_GameRoomStatInfoReq::~Proto_GameTSns_GameRoomStatInfoReq() {
  SharedDtor();
}

void Proto_GameTSns_GameRoomStatInfoReq::SharedDtor() {
  if (this != default_instance_) {
    delete stat_info_;
  }
}

void Proto_GameTSns_GameRoomStatInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_GameTSns_GameRoomStatInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_GameTSns_GameRoomStatInfoReq_descriptor_;
}

const Proto_GameTSns_GameRoomStatInfoReq& Proto_GameTSns_GameRoomStatInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fgame_2eproto();
  return *default_instance_;
}

Proto_GameTSns_GameRoomStatInfoReq* Proto_GameTSns_GameRoomStatInfoReq::default_instance_ = NULL;

Proto_GameTSns_GameRoomStatInfoReq* Proto_GameTSns_GameRoomStatInfoReq::New() const {
  return new Proto_GameTSns_GameRoomStatInfoReq;
}

void Proto_GameTSns_GameRoomStatInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_id_ = GOOGLE_ULONGLONG(0);
    room_id_ = GOOGLE_ULONGLONG(0);
    is_exe_scene_ = false;
    if (has_stat_info()) {
      if (stat_info_ != NULL) stat_info_->::proto_ff::GameRoomStat::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_GameTSns_GameRoomStatInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 game_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional uint64 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_exe_scene;
        break;
      }

      // optional bool is_exe_scene = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_exe_scene:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_exe_scene_)));
          set_has_is_exe_scene();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stat_info;
        break;
      }

      // optional .proto_ff.GameRoomStat stat_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stat_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stat_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_GameTSns_GameRoomStatInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 game_id = 1;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->game_id(), output);
  }

  // optional uint64 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->room_id(), output);
  }

  // optional bool is_exe_scene = 3;
  if (has_is_exe_scene()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_exe_scene(), output);
  }

  // optional .proto_ff.GameRoomStat stat_info = 4;
  if (has_stat_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stat_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_GameTSns_GameRoomStatInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 game_id = 1;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->game_id(), target);
  }

  // optional uint64 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->room_id(), target);
  }

  // optional bool is_exe_scene = 3;
  if (has_is_exe_scene()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_exe_scene(), target);
  }

  // optional .proto_ff.GameRoomStat stat_info = 4;
  if (has_stat_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stat_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_GameTSns_GameRoomStatInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 game_id = 1;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->game_id());
    }

    // optional uint64 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->room_id());
    }

    // optional bool is_exe_scene = 3;
    if (has_is_exe_scene()) {
      total_size += 1 + 1;
    }

    // optional .proto_ff.GameRoomStat stat_info = 4;
    if (has_stat_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stat_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_GameTSns_GameRoomStatInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_GameTSns_GameRoomStatInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_GameTSns_GameRoomStatInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_GameTSns_GameRoomStatInfoReq::MergeFrom(const Proto_GameTSns_GameRoomStatInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_is_exe_scene()) {
      set_is_exe_scene(from.is_exe_scene());
    }
    if (from.has_stat_info()) {
      mutable_stat_info()->::proto_ff::GameRoomStat::MergeFrom(from.stat_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_GameTSns_GameRoomStatInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_GameTSns_GameRoomStatInfoReq::CopyFrom(const Proto_GameTSns_GameRoomStatInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_GameTSns_GameRoomStatInfoReq::IsInitialized() const {

  return true;
}

void Proto_GameTSns_GameRoomStatInfoReq::Swap(Proto_GameTSns_GameRoomStatInfoReq* other) {
  if (other != this) {
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(is_exe_scene_, other->is_exe_scene_);
    std::swap(stat_info_, other->stat_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_GameTSns_GameRoomStatInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_GameTSns_GameRoomStatInfoReq_descriptor_;
  metadata.reflection = Proto_GameTSns_GameRoomStatInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_GameTSns_WriteBackUserManagerInfo::kUserManagerDataFieldNumber;
#endif  // !_MSC_VER

Proto_GameTSns_WriteBackUserManagerInfo::Proto_GameTSns_WriteBackUserManagerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_GameTSns_WriteBackUserManagerInfo::InitAsDefaultInstance() {
  user_manager_data_ = const_cast< ::proto_ff::tbGameUserManagerData*>(&::proto_ff::tbGameUserManagerData::default_instance());
}

Proto_GameTSns_WriteBackUserManagerInfo::Proto_GameTSns_WriteBackUserManagerInfo(const Proto_GameTSns_WriteBackUserManagerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_GameTSns_WriteBackUserManagerInfo::SharedCtor() {
  _cached_size_ = 0;
  user_manager_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_GameTSns_WriteBackUserManagerInfo::~Proto_GameTSns_WriteBackUserManagerInfo() {
  SharedDtor();
}

void Proto_GameTSns_WriteBackUserManagerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete user_manager_data_;
  }
}

void Proto_GameTSns_WriteBackUserManagerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_GameTSns_WriteBackUserManagerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_GameTSns_WriteBackUserManagerInfo_descriptor_;
}

const Proto_GameTSns_WriteBackUserManagerInfo& Proto_GameTSns_WriteBackUserManagerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fgame_2eproto();
  return *default_instance_;
}

Proto_GameTSns_WriteBackUserManagerInfo* Proto_GameTSns_WriteBackUserManagerInfo::default_instance_ = NULL;

Proto_GameTSns_WriteBackUserManagerInfo* Proto_GameTSns_WriteBackUserManagerInfo::New() const {
  return new Proto_GameTSns_WriteBackUserManagerInfo;
}

void Proto_GameTSns_WriteBackUserManagerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_manager_data()) {
      if (user_manager_data_ != NULL) user_manager_data_->::proto_ff::tbGameUserManagerData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_GameTSns_WriteBackUserManagerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.tbGameUserManagerData user_manager_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_manager_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_GameTSns_WriteBackUserManagerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.tbGameUserManagerData user_manager_data = 1;
  if (has_user_manager_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_manager_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_GameTSns_WriteBackUserManagerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.tbGameUserManagerData user_manager_data = 1;
  if (has_user_manager_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_manager_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_GameTSns_WriteBackUserManagerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.tbGameUserManagerData user_manager_data = 1;
    if (has_user_manager_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_manager_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_GameTSns_WriteBackUserManagerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_GameTSns_WriteBackUserManagerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_GameTSns_WriteBackUserManagerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_GameTSns_WriteBackUserManagerInfo::MergeFrom(const Proto_GameTSns_WriteBackUserManagerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_manager_data()) {
      mutable_user_manager_data()->::proto_ff::tbGameUserManagerData::MergeFrom(from.user_manager_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_GameTSns_WriteBackUserManagerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_GameTSns_WriteBackUserManagerInfo::CopyFrom(const Proto_GameTSns_WriteBackUserManagerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_GameTSns_WriteBackUserManagerInfo::IsInitialized() const {

  return true;
}

void Proto_GameTSns_WriteBackUserManagerInfo::Swap(Proto_GameTSns_WriteBackUserManagerInfo* other) {
  if (other != this) {
    std::swap(user_manager_data_, other->user_manager_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_GameTSns_WriteBackUserManagerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_GameTSns_WriteBackUserManagerInfo_descriptor_;
  metadata.reflection = Proto_GameTSns_WriteBackUserManagerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_GameTSns_FinishGMCtrlGiveData::kGmCtrlDataFieldNumber;
#endif  // !_MSC_VER

Proto_GameTSns_FinishGMCtrlGiveData::Proto_GameTSns_FinishGMCtrlGiveData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_GameTSns_FinishGMCtrlGiveData::InitAsDefaultInstance() {
  gm_ctrl_data_ = const_cast< ::proto_ff::tbGmCtrlGiveCtrlData*>(&::proto_ff::tbGmCtrlGiveCtrlData::default_instance());
}

Proto_GameTSns_FinishGMCtrlGiveData::Proto_GameTSns_FinishGMCtrlGiveData(const Proto_GameTSns_FinishGMCtrlGiveData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_GameTSns_FinishGMCtrlGiveData::SharedCtor() {
  _cached_size_ = 0;
  gm_ctrl_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_GameTSns_FinishGMCtrlGiveData::~Proto_GameTSns_FinishGMCtrlGiveData() {
  SharedDtor();
}

void Proto_GameTSns_FinishGMCtrlGiveData::SharedDtor() {
  if (this != default_instance_) {
    delete gm_ctrl_data_;
  }
}

void Proto_GameTSns_FinishGMCtrlGiveData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_GameTSns_FinishGMCtrlGiveData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_GameTSns_FinishGMCtrlGiveData_descriptor_;
}

const Proto_GameTSns_FinishGMCtrlGiveData& Proto_GameTSns_FinishGMCtrlGiveData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fgame_2eproto();
  return *default_instance_;
}

Proto_GameTSns_FinishGMCtrlGiveData* Proto_GameTSns_FinishGMCtrlGiveData::default_instance_ = NULL;

Proto_GameTSns_FinishGMCtrlGiveData* Proto_GameTSns_FinishGMCtrlGiveData::New() const {
  return new Proto_GameTSns_FinishGMCtrlGiveData;
}

void Proto_GameTSns_FinishGMCtrlGiveData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gm_ctrl_data()) {
      if (gm_ctrl_data_ != NULL) gm_ctrl_data_->::proto_ff::tbGmCtrlGiveCtrlData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_GameTSns_FinishGMCtrlGiveData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.tbGmCtrlGiveCtrlData gm_ctrl_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gm_ctrl_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_GameTSns_FinishGMCtrlGiveData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.tbGmCtrlGiveCtrlData gm_ctrl_data = 1;
  if (has_gm_ctrl_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gm_ctrl_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_GameTSns_FinishGMCtrlGiveData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.tbGmCtrlGiveCtrlData gm_ctrl_data = 1;
  if (has_gm_ctrl_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gm_ctrl_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_GameTSns_FinishGMCtrlGiveData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.tbGmCtrlGiveCtrlData gm_ctrl_data = 1;
    if (has_gm_ctrl_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gm_ctrl_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_GameTSns_FinishGMCtrlGiveData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_GameTSns_FinishGMCtrlGiveData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_GameTSns_FinishGMCtrlGiveData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_GameTSns_FinishGMCtrlGiveData::MergeFrom(const Proto_GameTSns_FinishGMCtrlGiveData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gm_ctrl_data()) {
      mutable_gm_ctrl_data()->::proto_ff::tbGmCtrlGiveCtrlData::MergeFrom(from.gm_ctrl_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_GameTSns_FinishGMCtrlGiveData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_GameTSns_FinishGMCtrlGiveData::CopyFrom(const Proto_GameTSns_FinishGMCtrlGiveData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_GameTSns_FinishGMCtrlGiveData::IsInitialized() const {

  return true;
}

void Proto_GameTSns_FinishGMCtrlGiveData::Swap(Proto_GameTSns_FinishGMCtrlGiveData* other) {
  if (other != this) {
    std::swap(gm_ctrl_data_, other->gm_ctrl_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_GameTSns_FinishGMCtrlGiveData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_GameTSns_FinishGMCtrlGiveData_descriptor_;
  metadata.reflection = Proto_GameTSns_FinishGMCtrlGiveData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_SnsTGame_SetUserManagerInfo::kPlayerIdFieldNumber;
const int Proto_SnsTGame_SetUserManagerInfo::kUserManagerDataFieldNumber;
#endif  // !_MSC_VER

Proto_SnsTGame_SetUserManagerInfo::Proto_SnsTGame_SetUserManagerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_SnsTGame_SetUserManagerInfo::InitAsDefaultInstance() {
  user_manager_data_ = const_cast< ::proto_ff::tbGameUserManagerData*>(&::proto_ff::tbGameUserManagerData::default_instance());
}

Proto_SnsTGame_SetUserManagerInfo::Proto_SnsTGame_SetUserManagerInfo(const Proto_SnsTGame_SetUserManagerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_SnsTGame_SetUserManagerInfo::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  user_manager_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_SnsTGame_SetUserManagerInfo::~Proto_SnsTGame_SetUserManagerInfo() {
  SharedDtor();
}

void Proto_SnsTGame_SetUserManagerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete user_manager_data_;
  }
}

void Proto_SnsTGame_SetUserManagerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_SnsTGame_SetUserManagerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_SnsTGame_SetUserManagerInfo_descriptor_;
}

const Proto_SnsTGame_SetUserManagerInfo& Proto_SnsTGame_SetUserManagerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fgame_2eproto();
  return *default_instance_;
}

Proto_SnsTGame_SetUserManagerInfo* Proto_SnsTGame_SetUserManagerInfo::default_instance_ = NULL;

Proto_SnsTGame_SetUserManagerInfo* Proto_SnsTGame_SetUserManagerInfo::New() const {
  return new Proto_SnsTGame_SetUserManagerInfo;
}

void Proto_SnsTGame_SetUserManagerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    if (has_user_manager_data()) {
      if (user_manager_data_ != NULL) user_manager_data_->::proto_ff::tbGameUserManagerData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_SnsTGame_SetUserManagerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_manager_data;
        break;
      }

      // optional .proto_ff.tbGameUserManagerData user_manager_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_manager_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_manager_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_SnsTGame_SetUserManagerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional .proto_ff.tbGameUserManagerData user_manager_data = 2;
  if (has_user_manager_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_manager_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_SnsTGame_SetUserManagerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional .proto_ff.tbGameUserManagerData user_manager_data = 2;
  if (has_user_manager_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_manager_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_SnsTGame_SetUserManagerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional .proto_ff.tbGameUserManagerData user_manager_data = 2;
    if (has_user_manager_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_manager_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_SnsTGame_SetUserManagerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_SnsTGame_SetUserManagerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_SnsTGame_SetUserManagerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_SnsTGame_SetUserManagerInfo::MergeFrom(const Proto_SnsTGame_SetUserManagerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_user_manager_data()) {
      mutable_user_manager_data()->::proto_ff::tbGameUserManagerData::MergeFrom(from.user_manager_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_SnsTGame_SetUserManagerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_SnsTGame_SetUserManagerInfo::CopyFrom(const Proto_SnsTGame_SetUserManagerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_SnsTGame_SetUserManagerInfo::IsInitialized() const {

  return true;
}

void Proto_SnsTGame_SetUserManagerInfo::Swap(Proto_SnsTGame_SetUserManagerInfo* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(user_manager_data_, other->user_manager_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_SnsTGame_SetUserManagerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_SnsTGame_SetUserManagerInfo_descriptor_;
  metadata.reflection = Proto_SnsTGame_SetUserManagerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_SnsTGame_SetGmCtrlGiveData::kPlayerIdFieldNumber;
const int Proto_SnsTGame_SetGmCtrlGiveData::kGmCtrlDataFieldNumber;
#endif  // !_MSC_VER

Proto_SnsTGame_SetGmCtrlGiveData::Proto_SnsTGame_SetGmCtrlGiveData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_SnsTGame_SetGmCtrlGiveData::InitAsDefaultInstance() {
  gm_ctrl_data_ = const_cast< ::proto_ff::tbGmCtrlGiveCtrlData*>(&::proto_ff::tbGmCtrlGiveCtrlData::default_instance());
}

Proto_SnsTGame_SetGmCtrlGiveData::Proto_SnsTGame_SetGmCtrlGiveData(const Proto_SnsTGame_SetGmCtrlGiveData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_SnsTGame_SetGmCtrlGiveData::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  gm_ctrl_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_SnsTGame_SetGmCtrlGiveData::~Proto_SnsTGame_SetGmCtrlGiveData() {
  SharedDtor();
}

void Proto_SnsTGame_SetGmCtrlGiveData::SharedDtor() {
  if (this != default_instance_) {
    delete gm_ctrl_data_;
  }
}

void Proto_SnsTGame_SetGmCtrlGiveData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_SnsTGame_SetGmCtrlGiveData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_SnsTGame_SetGmCtrlGiveData_descriptor_;
}

const Proto_SnsTGame_SetGmCtrlGiveData& Proto_SnsTGame_SetGmCtrlGiveData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fgame_2eproto();
  return *default_instance_;
}

Proto_SnsTGame_SetGmCtrlGiveData* Proto_SnsTGame_SetGmCtrlGiveData::default_instance_ = NULL;

Proto_SnsTGame_SetGmCtrlGiveData* Proto_SnsTGame_SetGmCtrlGiveData::New() const {
  return new Proto_SnsTGame_SetGmCtrlGiveData;
}

void Proto_SnsTGame_SetGmCtrlGiveData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    if (has_gm_ctrl_data()) {
      if (gm_ctrl_data_ != NULL) gm_ctrl_data_->::proto_ff::tbGmCtrlGiveCtrlData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_SnsTGame_SetGmCtrlGiveData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gm_ctrl_data;
        break;
      }

      // optional .proto_ff.tbGmCtrlGiveCtrlData gm_ctrl_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gm_ctrl_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gm_ctrl_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_SnsTGame_SetGmCtrlGiveData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional .proto_ff.tbGmCtrlGiveCtrlData gm_ctrl_data = 2;
  if (has_gm_ctrl_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gm_ctrl_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_SnsTGame_SetGmCtrlGiveData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional .proto_ff.tbGmCtrlGiveCtrlData gm_ctrl_data = 2;
  if (has_gm_ctrl_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gm_ctrl_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_SnsTGame_SetGmCtrlGiveData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional .proto_ff.tbGmCtrlGiveCtrlData gm_ctrl_data = 2;
    if (has_gm_ctrl_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gm_ctrl_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_SnsTGame_SetGmCtrlGiveData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_SnsTGame_SetGmCtrlGiveData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_SnsTGame_SetGmCtrlGiveData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_SnsTGame_SetGmCtrlGiveData::MergeFrom(const Proto_SnsTGame_SetGmCtrlGiveData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_gm_ctrl_data()) {
      mutable_gm_ctrl_data()->::proto_ff::tbGmCtrlGiveCtrlData::MergeFrom(from.gm_ctrl_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_SnsTGame_SetGmCtrlGiveData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_SnsTGame_SetGmCtrlGiveData::CopyFrom(const Proto_SnsTGame_SetGmCtrlGiveData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_SnsTGame_SetGmCtrlGiveData::IsInitialized() const {

  return true;
}

void Proto_SnsTGame_SetGmCtrlGiveData::Swap(Proto_SnsTGame_SetGmCtrlGiveData* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(gm_ctrl_data_, other->gm_ctrl_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_SnsTGame_SetGmCtrlGiveData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_SnsTGame_SetGmCtrlGiveData_descriptor_;
  metadata.reflection = Proto_SnsTGame_SetGmCtrlGiveData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyLogicPlayerEnterGame::kPlayerIdFieldNumber;
const int NotifyLogicPlayerEnterGame::kGameIdFieldNumber;
const int NotifyLogicPlayerEnterGame::kRoomIdFieldNumber;
const int NotifyLogicPlayerEnterGame::kGameBusIdFieldNumber;
#endif  // !_MSC_VER

NotifyLogicPlayerEnterGame::NotifyLogicPlayerEnterGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyLogicPlayerEnterGame::InitAsDefaultInstance() {
}

NotifyLogicPlayerEnterGame::NotifyLogicPlayerEnterGame(const NotifyLogicPlayerEnterGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyLogicPlayerEnterGame::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  game_id_ = 0u;
  room_id_ = 0u;
  game_bus_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyLogicPlayerEnterGame::~NotifyLogicPlayerEnterGame() {
  SharedDtor();
}

void NotifyLogicPlayerEnterGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyLogicPlayerEnterGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyLogicPlayerEnterGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyLogicPlayerEnterGame_descriptor_;
}

const NotifyLogicPlayerEnterGame& NotifyLogicPlayerEnterGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fgame_2eproto();
  return *default_instance_;
}

NotifyLogicPlayerEnterGame* NotifyLogicPlayerEnterGame::default_instance_ = NULL;

NotifyLogicPlayerEnterGame* NotifyLogicPlayerEnterGame::New() const {
  return new NotifyLogicPlayerEnterGame;
}

void NotifyLogicPlayerEnterGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    game_id_ = 0u;
    room_id_ = 0u;
    game_bus_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyLogicPlayerEnterGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_bus_id;
        break;
      }

      // optional uint32 game_bus_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_bus_id_)));
          set_has_game_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyLogicPlayerEnterGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_id(), output);
  }

  // optional uint32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->room_id(), output);
  }

  // optional uint32 game_bus_id = 4;
  if (has_game_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_bus_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyLogicPlayerEnterGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_id(), target);
  }

  // optional uint32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->room_id(), target);
  }

  // optional uint32 game_bus_id = 4;
  if (has_game_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_bus_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyLogicPlayerEnterGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional uint32 game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional uint32 game_bus_id = 4;
    if (has_game_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_bus_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyLogicPlayerEnterGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyLogicPlayerEnterGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyLogicPlayerEnterGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyLogicPlayerEnterGame::MergeFrom(const NotifyLogicPlayerEnterGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_game_bus_id()) {
      set_game_bus_id(from.game_bus_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyLogicPlayerEnterGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyLogicPlayerEnterGame::CopyFrom(const NotifyLogicPlayerEnterGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyLogicPlayerEnterGame::IsInitialized() const {

  return true;
}

void NotifyLogicPlayerEnterGame::Swap(NotifyLogicPlayerEnterGame* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(game_bus_id_, other->game_bus_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyLogicPlayerEnterGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyLogicPlayerEnterGame_descriptor_;
  metadata.reflection = NotifyLogicPlayerEnterGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyLogicPlayerExitGame::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

NotifyLogicPlayerExitGame::NotifyLogicPlayerExitGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyLogicPlayerExitGame::InitAsDefaultInstance() {
}

NotifyLogicPlayerExitGame::NotifyLogicPlayerExitGame(const NotifyLogicPlayerExitGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyLogicPlayerExitGame::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyLogicPlayerExitGame::~NotifyLogicPlayerExitGame() {
  SharedDtor();
}

void NotifyLogicPlayerExitGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyLogicPlayerExitGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyLogicPlayerExitGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyLogicPlayerExitGame_descriptor_;
}

const NotifyLogicPlayerExitGame& NotifyLogicPlayerExitGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fgame_2eproto();
  return *default_instance_;
}

NotifyLogicPlayerExitGame* NotifyLogicPlayerExitGame::default_instance_ = NULL;

NotifyLogicPlayerExitGame* NotifyLogicPlayerExitGame::New() const {
  return new NotifyLogicPlayerExitGame;
}

void NotifyLogicPlayerExitGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyLogicPlayerExitGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyLogicPlayerExitGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyLogicPlayerExitGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyLogicPlayerExitGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyLogicPlayerExitGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyLogicPlayerExitGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyLogicPlayerExitGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyLogicPlayerExitGame::MergeFrom(const NotifyLogicPlayerExitGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyLogicPlayerExitGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyLogicPlayerExitGame::CopyFrom(const NotifyLogicPlayerExitGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyLogicPlayerExitGame::IsInitialized() const {

  return true;
}

void NotifyLogicPlayerExitGame::Swap(NotifyLogicPlayerExitGame* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyLogicPlayerExitGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyLogicPlayerExitGame_descriptor_;
  metadata.reflection = NotifyLogicPlayerExitGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifySnsPlayerEnterGame::kPlayerIdFieldNumber;
const int NotifySnsPlayerEnterGame::kGameIdFieldNumber;
const int NotifySnsPlayerEnterGame::kRoomIdFieldNumber;
const int NotifySnsPlayerEnterGame::kGameBusIdFieldNumber;
#endif  // !_MSC_VER

NotifySnsPlayerEnterGame::NotifySnsPlayerEnterGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifySnsPlayerEnterGame::InitAsDefaultInstance() {
}

NotifySnsPlayerEnterGame::NotifySnsPlayerEnterGame(const NotifySnsPlayerEnterGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifySnsPlayerEnterGame::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  game_id_ = 0u;
  room_id_ = 0u;
  game_bus_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifySnsPlayerEnterGame::~NotifySnsPlayerEnterGame() {
  SharedDtor();
}

void NotifySnsPlayerEnterGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifySnsPlayerEnterGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifySnsPlayerEnterGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifySnsPlayerEnterGame_descriptor_;
}

const NotifySnsPlayerEnterGame& NotifySnsPlayerEnterGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fgame_2eproto();
  return *default_instance_;
}

NotifySnsPlayerEnterGame* NotifySnsPlayerEnterGame::default_instance_ = NULL;

NotifySnsPlayerEnterGame* NotifySnsPlayerEnterGame::New() const {
  return new NotifySnsPlayerEnterGame;
}

void NotifySnsPlayerEnterGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    game_id_ = 0u;
    room_id_ = 0u;
    game_bus_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifySnsPlayerEnterGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_bus_id;
        break;
      }

      // optional uint32 game_bus_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_bus_id_)));
          set_has_game_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifySnsPlayerEnterGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_id(), output);
  }

  // optional uint32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->room_id(), output);
  }

  // optional uint32 game_bus_id = 4;
  if (has_game_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_bus_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifySnsPlayerEnterGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_id(), target);
  }

  // optional uint32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->room_id(), target);
  }

  // optional uint32 game_bus_id = 4;
  if (has_game_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_bus_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifySnsPlayerEnterGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional uint32 game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional uint32 game_bus_id = 4;
    if (has_game_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_bus_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifySnsPlayerEnterGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifySnsPlayerEnterGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifySnsPlayerEnterGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifySnsPlayerEnterGame::MergeFrom(const NotifySnsPlayerEnterGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_game_bus_id()) {
      set_game_bus_id(from.game_bus_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifySnsPlayerEnterGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifySnsPlayerEnterGame::CopyFrom(const NotifySnsPlayerEnterGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifySnsPlayerEnterGame::IsInitialized() const {

  return true;
}

void NotifySnsPlayerEnterGame::Swap(NotifySnsPlayerEnterGame* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(game_bus_id_, other->game_bus_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifySnsPlayerEnterGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifySnsPlayerEnterGame_descriptor_;
  metadata.reflection = NotifySnsPlayerEnterGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifySnsPlayerExitGame::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

NotifySnsPlayerExitGame::NotifySnsPlayerExitGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifySnsPlayerExitGame::InitAsDefaultInstance() {
}

NotifySnsPlayerExitGame::NotifySnsPlayerExitGame(const NotifySnsPlayerExitGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifySnsPlayerExitGame::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifySnsPlayerExitGame::~NotifySnsPlayerExitGame() {
  SharedDtor();
}

void NotifySnsPlayerExitGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifySnsPlayerExitGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifySnsPlayerExitGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifySnsPlayerExitGame_descriptor_;
}

const NotifySnsPlayerExitGame& NotifySnsPlayerExitGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fgame_2eproto();
  return *default_instance_;
}

NotifySnsPlayerExitGame* NotifySnsPlayerExitGame::default_instance_ = NULL;

NotifySnsPlayerExitGame* NotifySnsPlayerExitGame::New() const {
  return new NotifySnsPlayerExitGame;
}

void NotifySnsPlayerExitGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifySnsPlayerExitGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifySnsPlayerExitGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifySnsPlayerExitGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifySnsPlayerExitGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifySnsPlayerExitGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifySnsPlayerExitGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifySnsPlayerExitGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifySnsPlayerExitGame::MergeFrom(const NotifySnsPlayerExitGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifySnsPlayerExitGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifySnsPlayerExitGame::CopyFrom(const NotifySnsPlayerExitGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifySnsPlayerExitGame::IsInitialized() const {

  return true;
}

void NotifySnsPlayerExitGame::Swap(NotifySnsPlayerExitGame* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifySnsPlayerExitGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifySnsPlayerExitGame_descriptor_;
  metadata.reflection = NotifySnsPlayerExitGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_QueryCoinBalanceReq::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

Proto_QueryCoinBalanceReq::Proto_QueryCoinBalanceReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_QueryCoinBalanceReq::InitAsDefaultInstance() {
}

Proto_QueryCoinBalanceReq::Proto_QueryCoinBalanceReq(const Proto_QueryCoinBalanceReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_QueryCoinBalanceReq::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_QueryCoinBalanceReq::~Proto_QueryCoinBalanceReq() {
  SharedDtor();
}

void Proto_QueryCoinBalanceReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_QueryCoinBalanceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_QueryCoinBalanceReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_QueryCoinBalanceReq_descriptor_;
}

const Proto_QueryCoinBalanceReq& Proto_QueryCoinBalanceReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fgame_2eproto();
  return *default_instance_;
}

Proto_QueryCoinBalanceReq* Proto_QueryCoinBalanceReq::default_instance_ = NULL;

Proto_QueryCoinBalanceReq* Proto_QueryCoinBalanceReq::New() const {
  return new Proto_QueryCoinBalanceReq;
}

void Proto_QueryCoinBalanceReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_QueryCoinBalanceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_QueryCoinBalanceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_QueryCoinBalanceReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_QueryCoinBalanceReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_QueryCoinBalanceReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_QueryCoinBalanceReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_QueryCoinBalanceReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_QueryCoinBalanceReq::MergeFrom(const Proto_QueryCoinBalanceReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_QueryCoinBalanceReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_QueryCoinBalanceReq::CopyFrom(const Proto_QueryCoinBalanceReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_QueryCoinBalanceReq::IsInitialized() const {

  return true;
}

void Proto_QueryCoinBalanceReq::Swap(Proto_QueryCoinBalanceReq* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_QueryCoinBalanceReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_QueryCoinBalanceReq_descriptor_;
  metadata.reflection = Proto_QueryCoinBalanceReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_QueryCoinBalanceRsp::kResultFieldNumber;
const int Proto_QueryCoinBalanceRsp::kPlayerDetailFieldNumber;
#endif  // !_MSC_VER

Proto_QueryCoinBalanceRsp::Proto_QueryCoinBalanceRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_QueryCoinBalanceRsp::InitAsDefaultInstance() {
  player_detail_ = const_cast< ::proto_ff::GamePlayerDetailData*>(&::proto_ff::GamePlayerDetailData::default_instance());
}

Proto_QueryCoinBalanceRsp::Proto_QueryCoinBalanceRsp(const Proto_QueryCoinBalanceRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_QueryCoinBalanceRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  player_detail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_QueryCoinBalanceRsp::~Proto_QueryCoinBalanceRsp() {
  SharedDtor();
}

void Proto_QueryCoinBalanceRsp::SharedDtor() {
  if (this != default_instance_) {
    delete player_detail_;
  }
}

void Proto_QueryCoinBalanceRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_QueryCoinBalanceRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_QueryCoinBalanceRsp_descriptor_;
}

const Proto_QueryCoinBalanceRsp& Proto_QueryCoinBalanceRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fgame_2eproto();
  return *default_instance_;
}

Proto_QueryCoinBalanceRsp* Proto_QueryCoinBalanceRsp::default_instance_ = NULL;

Proto_QueryCoinBalanceRsp* Proto_QueryCoinBalanceRsp::New() const {
  return new Proto_QueryCoinBalanceRsp;
}

void Proto_QueryCoinBalanceRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_player_detail()) {
      if (player_detail_ != NULL) player_detail_->::proto_ff::GamePlayerDetailData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_QueryCoinBalanceRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_detail;
        break;
      }

      // optional .proto_ff.GamePlayerDetailData player_detail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_QueryCoinBalanceRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .proto_ff.GamePlayerDetailData player_detail = 2;
  if (has_player_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player_detail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_QueryCoinBalanceRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .proto_ff.GamePlayerDetailData player_detail = 2;
  if (has_player_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player_detail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_QueryCoinBalanceRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .proto_ff.GamePlayerDetailData player_detail = 2;
    if (has_player_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_detail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_QueryCoinBalanceRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_QueryCoinBalanceRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_QueryCoinBalanceRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_QueryCoinBalanceRsp::MergeFrom(const Proto_QueryCoinBalanceRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_player_detail()) {
      mutable_player_detail()->::proto_ff::GamePlayerDetailData::MergeFrom(from.player_detail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_QueryCoinBalanceRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_QueryCoinBalanceRsp::CopyFrom(const Proto_QueryCoinBalanceRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_QueryCoinBalanceRsp::IsInitialized() const {

  return true;
}

void Proto_QueryCoinBalanceRsp::Swap(Proto_QueryCoinBalanceRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(player_detail_, other->player_detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_QueryCoinBalanceRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_QueryCoinBalanceRsp_descriptor_;
  metadata.reflection = Proto_QueryCoinBalanceRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_UpdateCoinBalanceNotify::kPlayerDetailFieldNumber;
#endif  // !_MSC_VER

Proto_UpdateCoinBalanceNotify::Proto_UpdateCoinBalanceNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_UpdateCoinBalanceNotify::InitAsDefaultInstance() {
  player_detail_ = const_cast< ::proto_ff::GamePlayerDetailData*>(&::proto_ff::GamePlayerDetailData::default_instance());
}

Proto_UpdateCoinBalanceNotify::Proto_UpdateCoinBalanceNotify(const Proto_UpdateCoinBalanceNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_UpdateCoinBalanceNotify::SharedCtor() {
  _cached_size_ = 0;
  player_detail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_UpdateCoinBalanceNotify::~Proto_UpdateCoinBalanceNotify() {
  SharedDtor();
}

void Proto_UpdateCoinBalanceNotify::SharedDtor() {
  if (this != default_instance_) {
    delete player_detail_;
  }
}

void Proto_UpdateCoinBalanceNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_UpdateCoinBalanceNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_UpdateCoinBalanceNotify_descriptor_;
}

const Proto_UpdateCoinBalanceNotify& Proto_UpdateCoinBalanceNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fgame_2eproto();
  return *default_instance_;
}

Proto_UpdateCoinBalanceNotify* Proto_UpdateCoinBalanceNotify::default_instance_ = NULL;

Proto_UpdateCoinBalanceNotify* Proto_UpdateCoinBalanceNotify::New() const {
  return new Proto_UpdateCoinBalanceNotify;
}

void Proto_UpdateCoinBalanceNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_detail()) {
      if (player_detail_ != NULL) player_detail_->::proto_ff::GamePlayerDetailData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_UpdateCoinBalanceNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.GamePlayerDetailData player_detail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_UpdateCoinBalanceNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.GamePlayerDetailData player_detail = 1;
  if (has_player_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_detail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_UpdateCoinBalanceNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.GamePlayerDetailData player_detail = 1;
  if (has_player_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_detail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_UpdateCoinBalanceNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.GamePlayerDetailData player_detail = 1;
    if (has_player_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_detail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_UpdateCoinBalanceNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_UpdateCoinBalanceNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_UpdateCoinBalanceNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_UpdateCoinBalanceNotify::MergeFrom(const Proto_UpdateCoinBalanceNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_detail()) {
      mutable_player_detail()->::proto_ff::GamePlayerDetailData::MergeFrom(from.player_detail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_UpdateCoinBalanceNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_UpdateCoinBalanceNotify::CopyFrom(const Proto_UpdateCoinBalanceNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_UpdateCoinBalanceNotify::IsInitialized() const {

  return true;
}

void Proto_UpdateCoinBalanceNotify::Swap(Proto_UpdateCoinBalanceNotify* other) {
  if (other != this) {
    std::swap(player_detail_, other->player_detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_UpdateCoinBalanceNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_UpdateCoinBalanceNotify_descriptor_;
  metadata.reflection = Proto_UpdateCoinBalanceNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_UpdateJettonReq::kPlayerIdFieldNumber;
const int Proto_UpdateJettonReq::kGameIdFieldNumber;
const int Proto_UpdateJettonReq::kRoomIdFieldNumber;
const int Proto_UpdateJettonReq::kDeskIdFieldNumber;
const int Proto_UpdateJettonReq::kChairIdFieldNumber;
const int Proto_UpdateJettonReq::kAccountTypeFieldNumber;
const int Proto_UpdateJettonReq::kOptTypeFieldNumber;
const int Proto_UpdateJettonReq::kOptReasonFieldNumber;
const int Proto_UpdateJettonReq::kChangeTypeFieldNumber;
const int Proto_UpdateJettonReq::kMoneyChangeFieldNumber;
const int Proto_UpdateJettonReq::kTimeFieldNumber;
const int Proto_UpdateJettonReq::kAddOrDeduceFieldNumber;
#endif  // !_MSC_VER

Proto_UpdateJettonReq::Proto_UpdateJettonReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_UpdateJettonReq::InitAsDefaultInstance() {
}

Proto_UpdateJettonReq::Proto_UpdateJettonReq(const Proto_UpdateJettonReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_UpdateJettonReq::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  game_id_ = 0u;
  room_id_ = 0u;
  desk_id_ = 0u;
  chair_id_ = 0u;
  account_type_ = 0u;
  opt_type_ = 0u;
  opt_reason_ = 0u;
  change_type_ = 0u;
  money_change_ = GOOGLE_LONGLONG(0);
  time_ = 0u;
  add_or_deduce_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_UpdateJettonReq::~Proto_UpdateJettonReq() {
  SharedDtor();
}

void Proto_UpdateJettonReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_UpdateJettonReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_UpdateJettonReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_UpdateJettonReq_descriptor_;
}

const Proto_UpdateJettonReq& Proto_UpdateJettonReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fgame_2eproto();
  return *default_instance_;
}

Proto_UpdateJettonReq* Proto_UpdateJettonReq::default_instance_ = NULL;

Proto_UpdateJettonReq* Proto_UpdateJettonReq::New() const {
  return new Proto_UpdateJettonReq;
}

void Proto_UpdateJettonReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    game_id_ = 0u;
    room_id_ = 0u;
    desk_id_ = 0u;
    chair_id_ = 0u;
    account_type_ = 0u;
    opt_type_ = 0u;
    opt_reason_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    change_type_ = 0u;
    money_change_ = GOOGLE_LONGLONG(0);
    time_ = 0u;
    add_or_deduce_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_UpdateJettonReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_desk_id;
        break;
      }

      // optional uint32 desk_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_desk_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desk_id_)));
          set_has_desk_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_chair_id;
        break;
      }

      // optional uint32 chair_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chair_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chair_id_)));
          set_has_chair_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_account_type;
        break;
      }

      // optional uint32 account_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_type_)));
          set_has_account_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_opt_type;
        break;
      }

      // optional uint32 opt_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opt_type_)));
          set_has_opt_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_opt_reason;
        break;
      }

      // optional uint32 opt_reason = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opt_reason_)));
          set_has_opt_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_change_type;
        break;
      }

      // optional uint32 change_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &change_type_)));
          set_has_change_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_money_change;
        break;
      }

      // optional int64 money_change = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_change_)));
          set_has_money_change();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_time;
        break;
      }

      // optional uint32 time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_add_or_deduce;
        break;
      }

      // optional bool add_or_deduce = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_or_deduce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &add_or_deduce_)));
          set_has_add_or_deduce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_UpdateJettonReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_id(), output);
  }

  // optional uint32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->room_id(), output);
  }

  // optional uint32 desk_id = 4;
  if (has_desk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->desk_id(), output);
  }

  // optional uint32 chair_id = 5;
  if (has_chair_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->chair_id(), output);
  }

  // optional uint32 account_type = 6;
  if (has_account_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->account_type(), output);
  }

  // optional uint32 opt_type = 7;
  if (has_opt_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->opt_type(), output);
  }

  // optional uint32 opt_reason = 8;
  if (has_opt_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->opt_reason(), output);
  }

  // optional uint32 change_type = 9;
  if (has_change_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->change_type(), output);
  }

  // optional int64 money_change = 10;
  if (has_money_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->money_change(), output);
  }

  // optional uint32 time = 11;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->time(), output);
  }

  // optional bool add_or_deduce = 12;
  if (has_add_or_deduce()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->add_or_deduce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_UpdateJettonReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_id(), target);
  }

  // optional uint32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->room_id(), target);
  }

  // optional uint32 desk_id = 4;
  if (has_desk_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->desk_id(), target);
  }

  // optional uint32 chair_id = 5;
  if (has_chair_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->chair_id(), target);
  }

  // optional uint32 account_type = 6;
  if (has_account_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->account_type(), target);
  }

  // optional uint32 opt_type = 7;
  if (has_opt_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->opt_type(), target);
  }

  // optional uint32 opt_reason = 8;
  if (has_opt_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->opt_reason(), target);
  }

  // optional uint32 change_type = 9;
  if (has_change_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->change_type(), target);
  }

  // optional int64 money_change = 10;
  if (has_money_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->money_change(), target);
  }

  // optional uint32 time = 11;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->time(), target);
  }

  // optional bool add_or_deduce = 12;
  if (has_add_or_deduce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->add_or_deduce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_UpdateJettonReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional uint32 game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional uint32 desk_id = 4;
    if (has_desk_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desk_id());
    }

    // optional uint32 chair_id = 5;
    if (has_chair_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chair_id());
    }

    // optional uint32 account_type = 6;
    if (has_account_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_type());
    }

    // optional uint32 opt_type = 7;
    if (has_opt_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opt_type());
    }

    // optional uint32 opt_reason = 8;
    if (has_opt_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opt_reason());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 change_type = 9;
    if (has_change_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->change_type());
    }

    // optional int64 money_change = 10;
    if (has_money_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money_change());
    }

    // optional uint32 time = 11;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional bool add_or_deduce = 12;
    if (has_add_or_deduce()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_UpdateJettonReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_UpdateJettonReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_UpdateJettonReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_UpdateJettonReq::MergeFrom(const Proto_UpdateJettonReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_desk_id()) {
      set_desk_id(from.desk_id());
    }
    if (from.has_chair_id()) {
      set_chair_id(from.chair_id());
    }
    if (from.has_account_type()) {
      set_account_type(from.account_type());
    }
    if (from.has_opt_type()) {
      set_opt_type(from.opt_type());
    }
    if (from.has_opt_reason()) {
      set_opt_reason(from.opt_reason());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_change_type()) {
      set_change_type(from.change_type());
    }
    if (from.has_money_change()) {
      set_money_change(from.money_change());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_add_or_deduce()) {
      set_add_or_deduce(from.add_or_deduce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_UpdateJettonReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_UpdateJettonReq::CopyFrom(const Proto_UpdateJettonReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_UpdateJettonReq::IsInitialized() const {

  return true;
}

void Proto_UpdateJettonReq::Swap(Proto_UpdateJettonReq* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(desk_id_, other->desk_id_);
    std::swap(chair_id_, other->chair_id_);
    std::swap(account_type_, other->account_type_);
    std::swap(opt_type_, other->opt_type_);
    std::swap(opt_reason_, other->opt_reason_);
    std::swap(change_type_, other->change_type_);
    std::swap(money_change_, other->money_change_);
    std::swap(time_, other->time_);
    std::swap(add_or_deduce_, other->add_or_deduce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_UpdateJettonReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_UpdateJettonReq_descriptor_;
  metadata.reflection = Proto_UpdateJettonReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_UpdateJettonRsp::kResultFieldNumber;
const int Proto_UpdateJettonRsp::kPlayerIdFieldNumber;
const int Proto_UpdateJettonRsp::kMoneyFieldNumber;
#endif  // !_MSC_VER

Proto_UpdateJettonRsp::Proto_UpdateJettonRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_UpdateJettonRsp::InitAsDefaultInstance() {
}

Proto_UpdateJettonRsp::Proto_UpdateJettonRsp(const Proto_UpdateJettonRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_UpdateJettonRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  player_id_ = GOOGLE_ULONGLONG(0);
  money_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_UpdateJettonRsp::~Proto_UpdateJettonRsp() {
  SharedDtor();
}

void Proto_UpdateJettonRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_UpdateJettonRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_UpdateJettonRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_UpdateJettonRsp_descriptor_;
}

const Proto_UpdateJettonRsp& Proto_UpdateJettonRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fgame_2eproto();
  return *default_instance_;
}

Proto_UpdateJettonRsp* Proto_UpdateJettonRsp::default_instance_ = NULL;

Proto_UpdateJettonRsp* Proto_UpdateJettonRsp::New() const {
  return new Proto_UpdateJettonRsp;
}

void Proto_UpdateJettonRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    player_id_ = GOOGLE_ULONGLONG(0);
    money_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_UpdateJettonRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // optional uint64 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_money;
        break;
      }

      // optional int64 money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_UpdateJettonRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint64 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->player_id(), output);
  }

  // optional int64 money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_UpdateJettonRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint64 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->player_id(), target);
  }

  // optional int64 money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_UpdateJettonRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint64 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional int64 money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_UpdateJettonRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_UpdateJettonRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_UpdateJettonRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_UpdateJettonRsp::MergeFrom(const Proto_UpdateJettonRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_UpdateJettonRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_UpdateJettonRsp::CopyFrom(const Proto_UpdateJettonRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_UpdateJettonRsp::IsInitialized() const {

  return true;
}

void Proto_UpdateJettonRsp::Swap(Proto_UpdateJettonRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(player_id_, other->player_id_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_UpdateJettonRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_UpdateJettonRsp_descriptor_;
  metadata.reflection = Proto_UpdateJettonRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_NotifyServerPlayerExitGame::kPlayerIdFieldNumber;
const int Proto_NotifyServerPlayerExitGame::kGameIdFieldNumber;
const int Proto_NotifyServerPlayerExitGame::kRoomIdFieldNumber;
const int Proto_NotifyServerPlayerExitGame::kDeskIdFieldNumber;
#endif  // !_MSC_VER

Proto_NotifyServerPlayerExitGame::Proto_NotifyServerPlayerExitGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_NotifyServerPlayerExitGame::InitAsDefaultInstance() {
}

Proto_NotifyServerPlayerExitGame::Proto_NotifyServerPlayerExitGame(const Proto_NotifyServerPlayerExitGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_NotifyServerPlayerExitGame::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  game_id_ = 0u;
  room_id_ = 0u;
  desk_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_NotifyServerPlayerExitGame::~Proto_NotifyServerPlayerExitGame() {
  SharedDtor();
}

void Proto_NotifyServerPlayerExitGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_NotifyServerPlayerExitGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_NotifyServerPlayerExitGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_NotifyServerPlayerExitGame_descriptor_;
}

const Proto_NotifyServerPlayerExitGame& Proto_NotifyServerPlayerExitGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fgame_2eproto();
  return *default_instance_;
}

Proto_NotifyServerPlayerExitGame* Proto_NotifyServerPlayerExitGame::default_instance_ = NULL;

Proto_NotifyServerPlayerExitGame* Proto_NotifyServerPlayerExitGame::New() const {
  return new Proto_NotifyServerPlayerExitGame;
}

void Proto_NotifyServerPlayerExitGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    game_id_ = 0u;
    room_id_ = 0u;
    desk_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_NotifyServerPlayerExitGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // optional uint32 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_desk_id;
        break;
      }

      // optional uint32 desk_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_desk_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desk_id_)));
          set_has_desk_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_NotifyServerPlayerExitGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_id(), output);
  }

  // optional uint32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->room_id(), output);
  }

  // optional uint32 desk_id = 4;
  if (has_desk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->desk_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_NotifyServerPlayerExitGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional uint32 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_id(), target);
  }

  // optional uint32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->room_id(), target);
  }

  // optional uint32 desk_id = 4;
  if (has_desk_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->desk_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_NotifyServerPlayerExitGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional uint32 game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional uint32 desk_id = 4;
    if (has_desk_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desk_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_NotifyServerPlayerExitGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_NotifyServerPlayerExitGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_NotifyServerPlayerExitGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_NotifyServerPlayerExitGame::MergeFrom(const Proto_NotifyServerPlayerExitGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_desk_id()) {
      set_desk_id(from.desk_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_NotifyServerPlayerExitGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_NotifyServerPlayerExitGame::CopyFrom(const Proto_NotifyServerPlayerExitGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_NotifyServerPlayerExitGame::IsInitialized() const {

  return true;
}

void Proto_NotifyServerPlayerExitGame::Swap(Proto_NotifyServerPlayerExitGame* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(desk_id_, other->desk_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_NotifyServerPlayerExitGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_NotifyServerPlayerExitGame_descriptor_;
  metadata.reflection = Proto_NotifyServerPlayerExitGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameRoomRegReq::kRoomInfoFieldNumber;
#endif  // !_MSC_VER

GameRoomRegReq::GameRoomRegReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameRoomRegReq::InitAsDefaultInstance() {
  room_info_ = const_cast< ::proto_ff::GameServerRoomInfo*>(&::proto_ff::GameServerRoomInfo::default_instance());
}

GameRoomRegReq::GameRoomRegReq(const GameRoomRegReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameRoomRegReq::SharedCtor() {
  _cached_size_ = 0;
  room_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameRoomRegReq::~GameRoomRegReq() {
  SharedDtor();
}

void GameRoomRegReq::SharedDtor() {
  if (this != default_instance_) {
    delete room_info_;
  }
}

void GameRoomRegReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameRoomRegReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameRoomRegReq_descriptor_;
}

const GameRoomRegReq& GameRoomRegReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fgame_2eproto();
  return *default_instance_;
}

GameRoomRegReq* GameRoomRegReq::default_instance_ = NULL;

GameRoomRegReq* GameRoomRegReq::New() const {
  return new GameRoomRegReq;
}

void GameRoomRegReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_room_info()) {
      if (room_info_ != NULL) room_info_->::proto_ff::GameServerRoomInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameRoomRegReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.GameServerRoomInfo room_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameRoomRegReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.GameServerRoomInfo room_info = 1;
  if (has_room_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->room_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameRoomRegReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.GameServerRoomInfo room_info = 1;
  if (has_room_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->room_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameRoomRegReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.GameServerRoomInfo room_info = 1;
    if (has_room_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameRoomRegReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameRoomRegReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameRoomRegReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameRoomRegReq::MergeFrom(const GameRoomRegReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_info()) {
      mutable_room_info()->::proto_ff::GameServerRoomInfo::MergeFrom(from.room_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameRoomRegReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameRoomRegReq::CopyFrom(const GameRoomRegReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameRoomRegReq::IsInitialized() const {

  return true;
}

void GameRoomRegReq::Swap(GameRoomRegReq* other) {
  if (other != this) {
    std::swap(room_info_, other->room_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameRoomRegReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameRoomRegReq_descriptor_;
  metadata.reflection = GameRoomRegReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameRoomUnRegReq::kRoomInfoFieldNumber;
#endif  // !_MSC_VER

GameRoomUnRegReq::GameRoomUnRegReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameRoomUnRegReq::InitAsDefaultInstance() {
  room_info_ = const_cast< ::proto_ff::GameServerRoomInfo*>(&::proto_ff::GameServerRoomInfo::default_instance());
}

GameRoomUnRegReq::GameRoomUnRegReq(const GameRoomUnRegReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameRoomUnRegReq::SharedCtor() {
  _cached_size_ = 0;
  room_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameRoomUnRegReq::~GameRoomUnRegReq() {
  SharedDtor();
}

void GameRoomUnRegReq::SharedDtor() {
  if (this != default_instance_) {
    delete room_info_;
  }
}

void GameRoomUnRegReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameRoomUnRegReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameRoomUnRegReq_descriptor_;
}

const GameRoomUnRegReq& GameRoomUnRegReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fgame_2eproto();
  return *default_instance_;
}

GameRoomUnRegReq* GameRoomUnRegReq::default_instance_ = NULL;

GameRoomUnRegReq* GameRoomUnRegReq::New() const {
  return new GameRoomUnRegReq;
}

void GameRoomUnRegReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_room_info()) {
      if (room_info_ != NULL) room_info_->::proto_ff::GameServerRoomInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameRoomUnRegReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.GameServerRoomInfo room_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameRoomUnRegReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.GameServerRoomInfo room_info = 1;
  if (has_room_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->room_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameRoomUnRegReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.GameServerRoomInfo room_info = 1;
  if (has_room_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->room_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameRoomUnRegReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.GameServerRoomInfo room_info = 1;
    if (has_room_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameRoomUnRegReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameRoomUnRegReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameRoomUnRegReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameRoomUnRegReq::MergeFrom(const GameRoomUnRegReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_info()) {
      mutable_room_info()->::proto_ff::GameServerRoomInfo::MergeFrom(from.room_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameRoomUnRegReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameRoomUnRegReq::CopyFrom(const GameRoomUnRegReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameRoomUnRegReq::IsInitialized() const {

  return true;
}

void GameRoomUnRegReq::Swap(GameRoomUnRegReq* other) {
  if (other != this) {
    std::swap(room_info_, other->room_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameRoomUnRegReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameRoomUnRegReq_descriptor_;
  metadata.reflection = GameRoomUnRegReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameRoomUpdateOnlineCountReq::kRoomInfoFieldNumber;
#endif  // !_MSC_VER

GameRoomUpdateOnlineCountReq::GameRoomUpdateOnlineCountReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameRoomUpdateOnlineCountReq::InitAsDefaultInstance() {
  room_info_ = const_cast< ::proto_ff::GameServerRoomInfo*>(&::proto_ff::GameServerRoomInfo::default_instance());
}

GameRoomUpdateOnlineCountReq::GameRoomUpdateOnlineCountReq(const GameRoomUpdateOnlineCountReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameRoomUpdateOnlineCountReq::SharedCtor() {
  _cached_size_ = 0;
  room_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameRoomUpdateOnlineCountReq::~GameRoomUpdateOnlineCountReq() {
  SharedDtor();
}

void GameRoomUpdateOnlineCountReq::SharedDtor() {
  if (this != default_instance_) {
    delete room_info_;
  }
}

void GameRoomUpdateOnlineCountReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameRoomUpdateOnlineCountReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameRoomUpdateOnlineCountReq_descriptor_;
}

const GameRoomUpdateOnlineCountReq& GameRoomUpdateOnlineCountReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fgame_2eproto();
  return *default_instance_;
}

GameRoomUpdateOnlineCountReq* GameRoomUpdateOnlineCountReq::default_instance_ = NULL;

GameRoomUpdateOnlineCountReq* GameRoomUpdateOnlineCountReq::New() const {
  return new GameRoomUpdateOnlineCountReq;
}

void GameRoomUpdateOnlineCountReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_room_info()) {
      if (room_info_ != NULL) room_info_->::proto_ff::GameServerRoomInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameRoomUpdateOnlineCountReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.GameServerRoomInfo room_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameRoomUpdateOnlineCountReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.GameServerRoomInfo room_info = 1;
  if (has_room_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->room_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameRoomUpdateOnlineCountReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.GameServerRoomInfo room_info = 1;
  if (has_room_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->room_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameRoomUpdateOnlineCountReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.GameServerRoomInfo room_info = 1;
    if (has_room_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameRoomUpdateOnlineCountReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameRoomUpdateOnlineCountReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameRoomUpdateOnlineCountReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameRoomUpdateOnlineCountReq::MergeFrom(const GameRoomUpdateOnlineCountReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_info()) {
      mutable_room_info()->::proto_ff::GameServerRoomInfo::MergeFrom(from.room_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameRoomUpdateOnlineCountReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameRoomUpdateOnlineCountReq::CopyFrom(const GameRoomUpdateOnlineCountReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameRoomUpdateOnlineCountReq::IsInitialized() const {

  return true;
}

void GameRoomUpdateOnlineCountReq::Swap(GameRoomUpdateOnlineCountReq* other) {
  if (other != this) {
    std::swap(room_info_, other->room_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameRoomUpdateOnlineCountReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameRoomUpdateOnlineCountReq_descriptor_;
  metadata.reflection = GameRoomUpdateOnlineCountReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameRoomLoginReq::kGameIdFieldNumber;
const int GameRoomLoginReq::kRoomIdFieldNumber;
const int GameRoomLoginReq::kPlayerIdFieldNumber;
const int GameRoomLoginReq::kProxyIdFieldNumber;
#endif  // !_MSC_VER

GameRoomLoginReq::GameRoomLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameRoomLoginReq::InitAsDefaultInstance() {
}

GameRoomLoginReq::GameRoomLoginReq(const GameRoomLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameRoomLoginReq::SharedCtor() {
  _cached_size_ = 0;
  game_id_ = 0u;
  room_id_ = 0u;
  player_id_ = GOOGLE_ULONGLONG(0);
  proxy_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameRoomLoginReq::~GameRoomLoginReq() {
  SharedDtor();
}

void GameRoomLoginReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameRoomLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameRoomLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameRoomLoginReq_descriptor_;
}

const GameRoomLoginReq& GameRoomLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fgame_2eproto();
  return *default_instance_;
}

GameRoomLoginReq* GameRoomLoginReq::default_instance_ = NULL;

GameRoomLoginReq* GameRoomLoginReq::New() const {
  return new GameRoomLoginReq;
}

void GameRoomLoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_id_ = 0u;
    room_id_ = 0u;
    player_id_ = GOOGLE_ULONGLONG(0);
    proxy_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameRoomLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_id;
        break;
      }

      // optional uint64 player_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_proxy_id;
        break;
      }

      // optional uint32 proxy_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proxy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proxy_id_)));
          set_has_proxy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameRoomLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 game_id = 1;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_id(), output);
  }

  // optional uint32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->room_id(), output);
  }

  // optional uint64 player_id = 3;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->player_id(), output);
  }

  // optional uint32 proxy_id = 4;
  if (has_proxy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->proxy_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameRoomLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 game_id = 1;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_id(), target);
  }

  // optional uint32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->room_id(), target);
  }

  // optional uint64 player_id = 3;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->player_id(), target);
  }

  // optional uint32 proxy_id = 4;
  if (has_proxy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->proxy_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameRoomLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 game_id = 1;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional uint64 player_id = 3;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_id());
    }

    // optional uint32 proxy_id = 4;
    if (has_proxy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proxy_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameRoomLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameRoomLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameRoomLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameRoomLoginReq::MergeFrom(const GameRoomLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_proxy_id()) {
      set_proxy_id(from.proxy_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameRoomLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameRoomLoginReq::CopyFrom(const GameRoomLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameRoomLoginReq::IsInitialized() const {

  return true;
}

void GameRoomLoginReq::Swap(GameRoomLoginReq* other) {
  if (other != this) {
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(player_id_, other->player_id_);
    std::swap(proxy_id_, other->proxy_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameRoomLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameRoomLoginReq_descriptor_;
  metadata.reflection = GameRoomLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameRoomLoginRsp::kResultFieldNumber;
#endif  // !_MSC_VER

GameRoomLoginRsp::GameRoomLoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameRoomLoginRsp::InitAsDefaultInstance() {
}

GameRoomLoginRsp::GameRoomLoginRsp(const GameRoomLoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameRoomLoginRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameRoomLoginRsp::~GameRoomLoginRsp() {
  SharedDtor();
}

void GameRoomLoginRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameRoomLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameRoomLoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameRoomLoginRsp_descriptor_;
}

const GameRoomLoginRsp& GameRoomLoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fgame_2eproto();
  return *default_instance_;
}

GameRoomLoginRsp* GameRoomLoginRsp::default_instance_ = NULL;

GameRoomLoginRsp* GameRoomLoginRsp::New() const {
  return new GameRoomLoginRsp;
}

void GameRoomLoginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameRoomLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameRoomLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameRoomLoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameRoomLoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameRoomLoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameRoomLoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameRoomLoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameRoomLoginRsp::MergeFrom(const GameRoomLoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameRoomLoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameRoomLoginRsp::CopyFrom(const GameRoomLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameRoomLoginRsp::IsInitialized() const {

  return true;
}

void GameRoomLoginRsp::Swap(GameRoomLoginRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameRoomLoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameRoomLoginRsp_descriptor_;
  metadata.reflection = GameRoomLoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ClearAllGamePlayerNotify::ClearAllGamePlayerNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClearAllGamePlayerNotify::InitAsDefaultInstance() {
}

ClearAllGamePlayerNotify::ClearAllGamePlayerNotify(const ClearAllGamePlayerNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClearAllGamePlayerNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClearAllGamePlayerNotify::~ClearAllGamePlayerNotify() {
  SharedDtor();
}

void ClearAllGamePlayerNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClearAllGamePlayerNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClearAllGamePlayerNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClearAllGamePlayerNotify_descriptor_;
}

const ClearAllGamePlayerNotify& ClearAllGamePlayerNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fgame_2eproto();
  return *default_instance_;
}

ClearAllGamePlayerNotify* ClearAllGamePlayerNotify::default_instance_ = NULL;

ClearAllGamePlayerNotify* ClearAllGamePlayerNotify::New() const {
  return new ClearAllGamePlayerNotify;
}

void ClearAllGamePlayerNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClearAllGamePlayerNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ClearAllGamePlayerNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClearAllGamePlayerNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClearAllGamePlayerNotify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClearAllGamePlayerNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClearAllGamePlayerNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClearAllGamePlayerNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClearAllGamePlayerNotify::MergeFrom(const ClearAllGamePlayerNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClearAllGamePlayerNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearAllGamePlayerNotify::CopyFrom(const ClearAllGamePlayerNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearAllGamePlayerNotify::IsInitialized() const {

  return true;
}

void ClearAllGamePlayerNotify::Swap(ClearAllGamePlayerNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClearAllGamePlayerNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClearAllGamePlayerNotify_descriptor_;
  metadata.reflection = ClearAllGamePlayerNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameServerDumpNotify::kGameIdFieldNumber;
const int GameServerDumpNotify::kRoomIdFieldNumber;
const int GameServerDumpNotify::kBusIdFieldNumber;
#endif  // !_MSC_VER

GameServerDumpNotify::GameServerDumpNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameServerDumpNotify::InitAsDefaultInstance() {
}

GameServerDumpNotify::GameServerDumpNotify(const GameServerDumpNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameServerDumpNotify::SharedCtor() {
  _cached_size_ = 0;
  game_id_ = 0u;
  room_id_ = 0u;
  bus_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameServerDumpNotify::~GameServerDumpNotify() {
  SharedDtor();
}

void GameServerDumpNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameServerDumpNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameServerDumpNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameServerDumpNotify_descriptor_;
}

const GameServerDumpNotify& GameServerDumpNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fgame_2eproto();
  return *default_instance_;
}

GameServerDumpNotify* GameServerDumpNotify::default_instance_ = NULL;

GameServerDumpNotify* GameServerDumpNotify::New() const {
  return new GameServerDumpNotify;
}

void GameServerDumpNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_id_ = 0u;
    room_id_ = 0u;
    bus_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameServerDumpNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bus_id;
        break;
      }

      // optional uint32 bus_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bus_id_)));
          set_has_bus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameServerDumpNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 game_id = 1;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_id(), output);
  }

  // optional uint32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->room_id(), output);
  }

  // optional uint32 bus_id = 3;
  if (has_bus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bus_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameServerDumpNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 game_id = 1;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_id(), target);
  }

  // optional uint32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->room_id(), target);
  }

  // optional uint32 bus_id = 3;
  if (has_bus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bus_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameServerDumpNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 game_id = 1;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

    // optional uint32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional uint32 bus_id = 3;
    if (has_bus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bus_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameServerDumpNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameServerDumpNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameServerDumpNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameServerDumpNotify::MergeFrom(const GameServerDumpNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_bus_id()) {
      set_bus_id(from.bus_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameServerDumpNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerDumpNotify::CopyFrom(const GameServerDumpNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerDumpNotify::IsInitialized() const {

  return true;
}

void GameServerDumpNotify::Swap(GameServerDumpNotify* other) {
  if (other != this) {
    std::swap(game_id_, other->game_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(bus_id_, other->bus_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameServerDumpNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameServerDumpNotify_descriptor_;
  metadata.reflection = GameServerDumpNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_LTSRedeemCodeReq::kIdFieldNumber;
const int Proto_LTSRedeemCodeReq::kUserIdFieldNumber;
#endif  // !_MSC_VER

Proto_LTSRedeemCodeReq::Proto_LTSRedeemCodeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_LTSRedeemCodeReq::InitAsDefaultInstance() {
}

Proto_LTSRedeemCodeReq::Proto_LTSRedeemCodeReq(const Proto_LTSRedeemCodeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_LTSRedeemCodeReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_LTSRedeemCodeReq::~Proto_LTSRedeemCodeReq() {
  SharedDtor();
}

void Proto_LTSRedeemCodeReq::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void Proto_LTSRedeemCodeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_LTSRedeemCodeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_LTSRedeemCodeReq_descriptor_;
}

const Proto_LTSRedeemCodeReq& Proto_LTSRedeemCodeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fgame_2eproto();
  return *default_instance_;
}

Proto_LTSRedeemCodeReq* Proto_LTSRedeemCodeReq::default_instance_ = NULL;

Proto_LTSRedeemCodeReq* Proto_LTSRedeemCodeReq::New() const {
  return new Proto_LTSRedeemCodeReq;
}

void Proto_LTSRedeemCodeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    user_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_LTSRedeemCodeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_LTSRedeemCodeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_LTSRedeemCodeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_LTSRedeemCodeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_LTSRedeemCodeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_LTSRedeemCodeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_LTSRedeemCodeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_LTSRedeemCodeReq::MergeFrom(const Proto_LTSRedeemCodeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_LTSRedeemCodeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_LTSRedeemCodeReq::CopyFrom(const Proto_LTSRedeemCodeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_LTSRedeemCodeReq::IsInitialized() const {

  return true;
}

void Proto_LTSRedeemCodeReq::Swap(Proto_LTSRedeemCodeReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_LTSRedeemCodeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_LTSRedeemCodeReq_descriptor_;
  metadata.reflection = Proto_LTSRedeemCodeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_STLRedeemCodeRsp::kResultFieldNumber;
const int Proto_STLRedeemCodeRsp::kIdFieldNumber;
const int Proto_STLRedeemCodeRsp::kUserIdFieldNumber;
const int Proto_STLRedeemCodeRsp::kAddGoldFieldNumber;
#endif  // !_MSC_VER

Proto_STLRedeemCodeRsp::Proto_STLRedeemCodeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_STLRedeemCodeRsp::InitAsDefaultInstance() {
}

Proto_STLRedeemCodeRsp::Proto_STLRedeemCodeRsp(const Proto_STLRedeemCodeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_STLRedeemCodeRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = GOOGLE_ULONGLONG(0);
  add_gold_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_STLRedeemCodeRsp::~Proto_STLRedeemCodeRsp() {
  SharedDtor();
}

void Proto_STLRedeemCodeRsp::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void Proto_STLRedeemCodeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_STLRedeemCodeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_STLRedeemCodeRsp_descriptor_;
}

const Proto_STLRedeemCodeRsp& Proto_STLRedeemCodeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5fgame_2eproto();
  return *default_instance_;
}

Proto_STLRedeemCodeRsp* Proto_STLRedeemCodeRsp::default_instance_ = NULL;

Proto_STLRedeemCodeRsp* Proto_STLRedeemCodeRsp::New() const {
  return new Proto_STLRedeemCodeRsp;
}

void Proto_STLRedeemCodeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    user_id_ = GOOGLE_ULONGLONG(0);
    add_gold_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_STLRedeemCodeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // optional string id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_add_gold;
        break;
      }

      // optional uint64 add_gold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &add_gold_)));
          set_has_add_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_STLRedeemCodeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->id(), output);
  }

  // optional uint64 user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->user_id(), output);
  }

  // optional uint64 add_gold = 4;
  if (has_add_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->add_gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_STLRedeemCodeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // optional uint64 user_id = 3;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->user_id(), target);
  }

  // optional uint64 add_gold = 4;
  if (has_add_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->add_gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_STLRedeemCodeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional uint64 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 add_gold = 4;
    if (has_add_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->add_gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_STLRedeemCodeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_STLRedeemCodeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_STLRedeemCodeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_STLRedeemCodeRsp::MergeFrom(const Proto_STLRedeemCodeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_add_gold()) {
      set_add_gold(from.add_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_STLRedeemCodeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_STLRedeemCodeRsp::CopyFrom(const Proto_STLRedeemCodeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_STLRedeemCodeRsp::IsInitialized() const {

  return true;
}

void Proto_STLRedeemCodeRsp::Swap(Proto_STLRedeemCodeRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(user_id_, other->user_id_);
    std::swap(add_gold_, other->add_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_STLRedeemCodeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_STLRedeemCodeRsp_descriptor_;
  metadata.reflection = Proto_STLRedeemCodeRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
