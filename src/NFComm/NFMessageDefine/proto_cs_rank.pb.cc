// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_cs_rank.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto_cs_rank.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_rank {

namespace {

const ::google::protobuf::Descriptor* RankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_CSGetCommonRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_CSGetCommonRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_SCGetCommonRankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_SCGetCommonRankRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Proto_RANK_CS_CMD_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_5fcs_5frank_2eproto() {
  protobuf_AddDesc_proto_5fcs_5frank_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto_cs_rank.proto");
  GOOGLE_CHECK(file != NULL);
  RankInfo_descriptor_ = file->message_type(0);
  static const int RankInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, face_id_),
  };
  RankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankInfo_descriptor_,
      RankInfo::default_instance_,
      RankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankInfo));
  Proto_CSGetCommonRankReq_descriptor_ = file->message_type(1);
  static const int Proto_CSGetCommonRankReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSGetCommonRankReq, rank_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSGetCommonRankReq, rank_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSGetCommonRankReq, rank_to_),
  };
  Proto_CSGetCommonRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_CSGetCommonRankReq_descriptor_,
      Proto_CSGetCommonRankReq::default_instance_,
      Proto_CSGetCommonRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSGetCommonRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_CSGetCommonRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_CSGetCommonRankReq));
  Proto_SCGetCommonRankRsp_descriptor_ = file->message_type(2);
  static const int Proto_SCGetCommonRankRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCGetCommonRankRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCGetCommonRankRsp, rank_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCGetCommonRankRsp, rank_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCGetCommonRankRsp, my_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCGetCommonRankRsp, my_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCGetCommonRankRsp, rank_max_),
  };
  Proto_SCGetCommonRankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_SCGetCommonRankRsp_descriptor_,
      Proto_SCGetCommonRankRsp::default_instance_,
      Proto_SCGetCommonRankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCGetCommonRankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SCGetCommonRankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_SCGetCommonRankRsp));
  Proto_RANK_CS_CMD_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_5fcs_5frank_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankInfo_descriptor_, &RankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_CSGetCommonRankReq_descriptor_, &Proto_CSGetCommonRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_SCGetCommonRankRsp_descriptor_, &Proto_SCGetCommonRankRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_5fcs_5frank_2eproto() {
  delete RankInfo::default_instance_;
  delete RankInfo_reflection_;
  delete Proto_CSGetCommonRankReq::default_instance_;
  delete Proto_CSGetCommonRankReq_reflection_;
  delete Proto_SCGetCommonRankRsp::default_instance_;
  delete Proto_SCGetCommonRankRsp_reflection_;
}

void protobuf_AddDesc_proto_5fcs_5frank_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023proto_cs_rank.proto\022\nproto_rank\"\\\n\010Ran"
    "kInfo\022\014\n\004rank\030\001 \001(\005\022\017\n\007user_id\030\002 \001(\004\022\021\n\t"
    "user_name\030\003 \001(\t\022\r\n\005score\030\004 \001(\004\022\017\n\007face_i"
    "d\030\005 \001(\r\"Q\n\030Proto_CSGetCommonRankReq\022\021\n\tr"
    "ank_type\030\001 \001(\005\022\021\n\trank_from\030\002 \001(\005\022\017\n\007ran"
    "k_to\030\003 \001(\005\"\233\001\n\030Proto_SCGetCommonRankRsp\022"
    "\016\n\006result\030\001 \001(\005\022\021\n\trank_type\030\002 \001(\005\022\'\n\tra"
    "nk_list\030\003 \003(\0132\024.proto_rank.RankInfo\022\017\n\007m"
    "y_rank\030\004 \002(\005\022\020\n\010my_score\030\005 \002(\004\022\020\n\010rank_m"
    "ax\030\006 \002(\005*S\n\021Proto_RANK_CS_CMD\022\036\n\031NF_CS_G"
    "ET_COMMON_RANK_REQ\020\260\t\022\036\n\031NF_CS_GET_COMMO"
    "N_RANK_RSP\020\261\t", 453);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto_cs_rank.proto", &protobuf_RegisterTypes);
  RankInfo::default_instance_ = new RankInfo();
  Proto_CSGetCommonRankReq::default_instance_ = new Proto_CSGetCommonRankReq();
  Proto_SCGetCommonRankRsp::default_instance_ = new Proto_SCGetCommonRankRsp();
  RankInfo::default_instance_->InitAsDefaultInstance();
  Proto_CSGetCommonRankReq::default_instance_->InitAsDefaultInstance();
  Proto_SCGetCommonRankRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_5fcs_5frank_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_5fcs_5frank_2eproto {
  StaticDescriptorInitializer_proto_5fcs_5frank_2eproto() {
    protobuf_AddDesc_proto_5fcs_5frank_2eproto();
  }
} static_descriptor_initializer_proto_5fcs_5frank_2eproto_;
const ::google::protobuf::EnumDescriptor* Proto_RANK_CS_CMD_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_RANK_CS_CMD_descriptor_;
}
bool Proto_RANK_CS_CMD_IsValid(int value) {
  switch(value) {
    case 1200:
    case 1201:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int RankInfo::kRankFieldNumber;
const int RankInfo::kUserIdFieldNumber;
const int RankInfo::kUserNameFieldNumber;
const int RankInfo::kScoreFieldNumber;
const int RankInfo::kFaceIdFieldNumber;
#endif  // !_MSC_VER

RankInfo::RankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankInfo::InitAsDefaultInstance() {
}

RankInfo::RankInfo(const RankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankInfo::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = GOOGLE_ULONGLONG(0);
  face_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankInfo::~RankInfo() {
  SharedDtor();
}

void RankInfo::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void RankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankInfo_descriptor_;
}

const RankInfo& RankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5frank_2eproto();
  return *default_instance_;
}

RankInfo* RankInfo::default_instance_ = NULL;

RankInfo* RankInfo::New() const {
  return new RankInfo;
}

void RankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    score_ = GOOGLE_ULONGLONG(0);
    face_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_name;
        break;
      }

      // optional string user_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional uint64 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_face_id;
        break;
      }

      // optional uint32 face_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_face_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &face_id_)));
          set_has_face_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user_name(), output);
  }

  // optional uint64 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->score(), output);
  }

  // optional uint32 face_id = 5;
  if (has_face_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->face_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_name(), target);
  }

  // optional uint64 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->score(), target);
  }

  // optional uint32 face_id = 5;
  if (has_face_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->face_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional string user_name = 3;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional uint64 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->score());
    }

    // optional uint32 face_id = 5;
    if (has_face_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->face_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankInfo::MergeFrom(const RankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_face_id()) {
      set_face_id(from.face_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankInfo::CopyFrom(const RankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankInfo::IsInitialized() const {

  return true;
}

void RankInfo::Swap(RankInfo* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(user_id_, other->user_id_);
    std::swap(user_name_, other->user_name_);
    std::swap(score_, other->score_);
    std::swap(face_id_, other->face_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankInfo_descriptor_;
  metadata.reflection = RankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_CSGetCommonRankReq::kRankTypeFieldNumber;
const int Proto_CSGetCommonRankReq::kRankFromFieldNumber;
const int Proto_CSGetCommonRankReq::kRankToFieldNumber;
#endif  // !_MSC_VER

Proto_CSGetCommonRankReq::Proto_CSGetCommonRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_CSGetCommonRankReq::InitAsDefaultInstance() {
}

Proto_CSGetCommonRankReq::Proto_CSGetCommonRankReq(const Proto_CSGetCommonRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_CSGetCommonRankReq::SharedCtor() {
  _cached_size_ = 0;
  rank_type_ = 0;
  rank_from_ = 0;
  rank_to_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_CSGetCommonRankReq::~Proto_CSGetCommonRankReq() {
  SharedDtor();
}

void Proto_CSGetCommonRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_CSGetCommonRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_CSGetCommonRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_CSGetCommonRankReq_descriptor_;
}

const Proto_CSGetCommonRankReq& Proto_CSGetCommonRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5frank_2eproto();
  return *default_instance_;
}

Proto_CSGetCommonRankReq* Proto_CSGetCommonRankReq::default_instance_ = NULL;

Proto_CSGetCommonRankReq* Proto_CSGetCommonRankReq::New() const {
  return new Proto_CSGetCommonRankReq;
}

void Proto_CSGetCommonRankReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_type_ = 0;
    rank_from_ = 0;
    rank_to_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_CSGetCommonRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_type_)));
          set_has_rank_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank_from;
        break;
      }

      // optional int32 rank_from = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_from_)));
          set_has_rank_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank_to;
        break;
      }

      // optional int32 rank_to = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_to_)));
          set_has_rank_to();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_CSGetCommonRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rank_type = 1;
  if (has_rank_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank_type(), output);
  }

  // optional int32 rank_from = 2;
  if (has_rank_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank_from(), output);
  }

  // optional int32 rank_to = 3;
  if (has_rank_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank_to(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_CSGetCommonRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rank_type = 1;
  if (has_rank_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank_type(), target);
  }

  // optional int32 rank_from = 2;
  if (has_rank_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank_from(), target);
  }

  // optional int32 rank_to = 3;
  if (has_rank_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank_to(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_CSGetCommonRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank_type = 1;
    if (has_rank_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_type());
    }

    // optional int32 rank_from = 2;
    if (has_rank_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_from());
    }

    // optional int32 rank_to = 3;
    if (has_rank_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_to());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_CSGetCommonRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_CSGetCommonRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_CSGetCommonRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_CSGetCommonRankReq::MergeFrom(const Proto_CSGetCommonRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank_type()) {
      set_rank_type(from.rank_type());
    }
    if (from.has_rank_from()) {
      set_rank_from(from.rank_from());
    }
    if (from.has_rank_to()) {
      set_rank_to(from.rank_to());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_CSGetCommonRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_CSGetCommonRankReq::CopyFrom(const Proto_CSGetCommonRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_CSGetCommonRankReq::IsInitialized() const {

  return true;
}

void Proto_CSGetCommonRankReq::Swap(Proto_CSGetCommonRankReq* other) {
  if (other != this) {
    std::swap(rank_type_, other->rank_type_);
    std::swap(rank_from_, other->rank_from_);
    std::swap(rank_to_, other->rank_to_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_CSGetCommonRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_CSGetCommonRankReq_descriptor_;
  metadata.reflection = Proto_CSGetCommonRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_SCGetCommonRankRsp::kResultFieldNumber;
const int Proto_SCGetCommonRankRsp::kRankTypeFieldNumber;
const int Proto_SCGetCommonRankRsp::kRankListFieldNumber;
const int Proto_SCGetCommonRankRsp::kMyRankFieldNumber;
const int Proto_SCGetCommonRankRsp::kMyScoreFieldNumber;
const int Proto_SCGetCommonRankRsp::kRankMaxFieldNumber;
#endif  // !_MSC_VER

Proto_SCGetCommonRankRsp::Proto_SCGetCommonRankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_SCGetCommonRankRsp::InitAsDefaultInstance() {
}

Proto_SCGetCommonRankRsp::Proto_SCGetCommonRankRsp(const Proto_SCGetCommonRankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_SCGetCommonRankRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  rank_type_ = 0;
  my_rank_ = 0;
  my_score_ = GOOGLE_ULONGLONG(0);
  rank_max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_SCGetCommonRankRsp::~Proto_SCGetCommonRankRsp() {
  SharedDtor();
}

void Proto_SCGetCommonRankRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_SCGetCommonRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_SCGetCommonRankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_SCGetCommonRankRsp_descriptor_;
}

const Proto_SCGetCommonRankRsp& Proto_SCGetCommonRankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fcs_5frank_2eproto();
  return *default_instance_;
}

Proto_SCGetCommonRankRsp* Proto_SCGetCommonRankRsp::default_instance_ = NULL;

Proto_SCGetCommonRankRsp* Proto_SCGetCommonRankRsp::New() const {
  return new Proto_SCGetCommonRankRsp;
}

void Proto_SCGetCommonRankRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    rank_type_ = 0;
    my_rank_ = 0;
    my_score_ = GOOGLE_ULONGLONG(0);
    rank_max_ = 0;
  }
  rank_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_SCGetCommonRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank_type;
        break;
      }

      // optional int32 rank_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_type_)));
          set_has_rank_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rank_list;
        break;
      }

      // repeated .proto_rank.RankInfo rank_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rank_list;
        if (input->ExpectTag(32)) goto parse_my_rank;
        break;
      }

      // required int32 my_rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &my_rank_)));
          set_has_my_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_my_score;
        break;
      }

      // required uint64 my_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &my_score_)));
          set_has_my_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rank_max;
        break;
      }

      // required int32 rank_max = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_max_)));
          set_has_rank_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_SCGetCommonRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 rank_type = 2;
  if (has_rank_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank_type(), output);
  }

  // repeated .proto_rank.RankInfo rank_list = 3;
  for (int i = 0; i < this->rank_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rank_list(i), output);
  }

  // required int32 my_rank = 4;
  if (has_my_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->my_rank(), output);
  }

  // required uint64 my_score = 5;
  if (has_my_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->my_score(), output);
  }

  // required int32 rank_max = 6;
  if (has_rank_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rank_max(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_SCGetCommonRankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 rank_type = 2;
  if (has_rank_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank_type(), target);
  }

  // repeated .proto_rank.RankInfo rank_list = 3;
  for (int i = 0; i < this->rank_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rank_list(i), target);
  }

  // required int32 my_rank = 4;
  if (has_my_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->my_rank(), target);
  }

  // required uint64 my_score = 5;
  if (has_my_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->my_score(), target);
  }

  // required int32 rank_max = 6;
  if (has_rank_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rank_max(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_SCGetCommonRankRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 rank_type = 2;
    if (has_rank_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_type());
    }

    // required int32 my_rank = 4;
    if (has_my_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->my_rank());
    }

    // required uint64 my_score = 5;
    if (has_my_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->my_score());
    }

    // required int32 rank_max = 6;
    if (has_rank_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_max());
    }

  }
  // repeated .proto_rank.RankInfo rank_list = 3;
  total_size += 1 * this->rank_list_size();
  for (int i = 0; i < this->rank_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_SCGetCommonRankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_SCGetCommonRankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_SCGetCommonRankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_SCGetCommonRankRsp::MergeFrom(const Proto_SCGetCommonRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_list_.MergeFrom(from.rank_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_rank_type()) {
      set_rank_type(from.rank_type());
    }
    if (from.has_my_rank()) {
      set_my_rank(from.my_rank());
    }
    if (from.has_my_score()) {
      set_my_score(from.my_score());
    }
    if (from.has_rank_max()) {
      set_rank_max(from.rank_max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_SCGetCommonRankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_SCGetCommonRankRsp::CopyFrom(const Proto_SCGetCommonRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_SCGetCommonRankRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000038) != 0x00000038) return false;

  return true;
}

void Proto_SCGetCommonRankRsp::Swap(Proto_SCGetCommonRankRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(rank_type_, other->rank_type_);
    rank_list_.Swap(&other->rank_list_);
    std::swap(my_rank_, other->my_rank_);
    std::swap(my_score_, other->my_score_);
    std::swap(rank_max_, other->rank_max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_SCGetCommonRankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_SCGetCommonRankRsp_descriptor_;
  metadata.reflection = Proto_SCGetCommonRankRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_rank

// @@protoc_insertion_point(global_scope)
