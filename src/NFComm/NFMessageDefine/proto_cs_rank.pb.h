// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_cs_rank.proto

#ifndef PROTOBUF_proto_5fcs_5frank_2eproto__INCLUDED
#define PROTOBUF_proto_5fcs_5frank_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace proto_rank {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_5fcs_5frank_2eproto();
void protobuf_AssignDesc_proto_5fcs_5frank_2eproto();
void protobuf_ShutdownFile_proto_5fcs_5frank_2eproto();

class RankInfo;
class Proto_CSGetCommonRankReq;
class Proto_SCGetCommonRankRsp;

enum Proto_RANK_CS_CMD {
  NF_CS_GET_COMMON_RANK_REQ = 1200,
  NF_CS_GET_COMMON_RANK_RSP = 1201
};
bool Proto_RANK_CS_CMD_IsValid(int value);
const Proto_RANK_CS_CMD Proto_RANK_CS_CMD_MIN = NF_CS_GET_COMMON_RANK_REQ;
const Proto_RANK_CS_CMD Proto_RANK_CS_CMD_MAX = NF_CS_GET_COMMON_RANK_RSP;
const int Proto_RANK_CS_CMD_ARRAYSIZE = Proto_RANK_CS_CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* Proto_RANK_CS_CMD_descriptor();
inline const ::std::string& Proto_RANK_CS_CMD_Name(Proto_RANK_CS_CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    Proto_RANK_CS_CMD_descriptor(), value);
}
inline bool Proto_RANK_CS_CMD_Parse(
    const ::std::string& name, Proto_RANK_CS_CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Proto_RANK_CS_CMD>(
    Proto_RANK_CS_CMD_descriptor(), name, value);
}
// ===================================================================

class RankInfo : public ::google::protobuf::Message {
 public:
  RankInfo();
  virtual ~RankInfo();

  RankInfo(const RankInfo& from);

  inline RankInfo& operator=(const RankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankInfo& default_instance();

  void Swap(RankInfo* other);

  // implements Message ----------------------------------------------

  RankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankInfo& from);
  void MergeFrom(const RankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional uint64 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // optional string user_name = 3;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 3;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional uint64 score = 4;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline ::google::protobuf::uint64 score() const;
  inline void set_score(::google::protobuf::uint64 value);

  // optional uint32 face_id = 5;
  inline bool has_face_id() const;
  inline void clear_face_id();
  static const int kFaceIdFieldNumber = 5;
  inline ::google::protobuf::uint32 face_id() const;
  inline void set_face_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_rank.RankInfo)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_face_id();
  inline void clear_has_face_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 user_id_;
  ::std::string* user_name_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::uint32 face_id_;
  ::google::protobuf::uint64 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcs_5frank_2eproto();
  friend void protobuf_AssignDesc_proto_5fcs_5frank_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcs_5frank_2eproto();

  void InitAsDefaultInstance();
  static RankInfo* default_instance_;
};
// -------------------------------------------------------------------

class Proto_CSGetCommonRankReq : public ::google::protobuf::Message {
 public:
  Proto_CSGetCommonRankReq();
  virtual ~Proto_CSGetCommonRankReq();

  Proto_CSGetCommonRankReq(const Proto_CSGetCommonRankReq& from);

  inline Proto_CSGetCommonRankReq& operator=(const Proto_CSGetCommonRankReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_CSGetCommonRankReq& default_instance();

  void Swap(Proto_CSGetCommonRankReq* other);

  // implements Message ----------------------------------------------

  Proto_CSGetCommonRankReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Proto_CSGetCommonRankReq& from);
  void MergeFrom(const Proto_CSGetCommonRankReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rank_type = 1;
  inline bool has_rank_type() const;
  inline void clear_rank_type();
  static const int kRankTypeFieldNumber = 1;
  inline ::google::protobuf::int32 rank_type() const;
  inline void set_rank_type(::google::protobuf::int32 value);

  // optional int32 rank_from = 2;
  inline bool has_rank_from() const;
  inline void clear_rank_from();
  static const int kRankFromFieldNumber = 2;
  inline ::google::protobuf::int32 rank_from() const;
  inline void set_rank_from(::google::protobuf::int32 value);

  // optional int32 rank_to = 3;
  inline bool has_rank_to() const;
  inline void clear_rank_to();
  static const int kRankToFieldNumber = 3;
  inline ::google::protobuf::int32 rank_to() const;
  inline void set_rank_to(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_rank.Proto_CSGetCommonRankReq)
 private:
  inline void set_has_rank_type();
  inline void clear_has_rank_type();
  inline void set_has_rank_from();
  inline void clear_has_rank_from();
  inline void set_has_rank_to();
  inline void clear_has_rank_to();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 rank_type_;
  ::google::protobuf::int32 rank_from_;
  ::google::protobuf::int32 rank_to_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcs_5frank_2eproto();
  friend void protobuf_AssignDesc_proto_5fcs_5frank_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcs_5frank_2eproto();

  void InitAsDefaultInstance();
  static Proto_CSGetCommonRankReq* default_instance_;
};
// -------------------------------------------------------------------

class Proto_SCGetCommonRankRsp : public ::google::protobuf::Message {
 public:
  Proto_SCGetCommonRankRsp();
  virtual ~Proto_SCGetCommonRankRsp();

  Proto_SCGetCommonRankRsp(const Proto_SCGetCommonRankRsp& from);

  inline Proto_SCGetCommonRankRsp& operator=(const Proto_SCGetCommonRankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Proto_SCGetCommonRankRsp& default_instance();

  void Swap(Proto_SCGetCommonRankRsp* other);

  // implements Message ----------------------------------------------

  Proto_SCGetCommonRankRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Proto_SCGetCommonRankRsp& from);
  void MergeFrom(const Proto_SCGetCommonRankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 rank_type = 2;
  inline bool has_rank_type() const;
  inline void clear_rank_type();
  static const int kRankTypeFieldNumber = 2;
  inline ::google::protobuf::int32 rank_type() const;
  inline void set_rank_type(::google::protobuf::int32 value);

  // repeated .proto_rank.RankInfo rank_list = 3;
  inline int rank_list_size() const;
  inline void clear_rank_list();
  static const int kRankListFieldNumber = 3;
  inline const ::proto_rank::RankInfo& rank_list(int index) const;
  inline ::proto_rank::RankInfo* mutable_rank_list(int index);
  inline ::proto_rank::RankInfo* add_rank_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_rank::RankInfo >&
      rank_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_rank::RankInfo >*
      mutable_rank_list();

  // required int32 my_rank = 4;
  inline bool has_my_rank() const;
  inline void clear_my_rank();
  static const int kMyRankFieldNumber = 4;
  inline ::google::protobuf::int32 my_rank() const;
  inline void set_my_rank(::google::protobuf::int32 value);

  // required uint64 my_score = 5;
  inline bool has_my_score() const;
  inline void clear_my_score();
  static const int kMyScoreFieldNumber = 5;
  inline ::google::protobuf::uint64 my_score() const;
  inline void set_my_score(::google::protobuf::uint64 value);

  // required int32 rank_max = 6;
  inline bool has_rank_max() const;
  inline void clear_rank_max();
  static const int kRankMaxFieldNumber = 6;
  inline ::google::protobuf::int32 rank_max() const;
  inline void set_rank_max(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_rank.Proto_SCGetCommonRankRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_rank_type();
  inline void clear_has_rank_type();
  inline void set_has_my_rank();
  inline void clear_has_my_rank();
  inline void set_has_my_score();
  inline void clear_has_my_score();
  inline void set_has_rank_max();
  inline void clear_has_rank_max();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 rank_type_;
  ::google::protobuf::RepeatedPtrField< ::proto_rank::RankInfo > rank_list_;
  ::google::protobuf::uint64 my_score_;
  ::google::protobuf::int32 my_rank_;
  ::google::protobuf::int32 rank_max_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_proto_5fcs_5frank_2eproto();
  friend void protobuf_AssignDesc_proto_5fcs_5frank_2eproto();
  friend void protobuf_ShutdownFile_proto_5fcs_5frank_2eproto();

  void InitAsDefaultInstance();
  static Proto_SCGetCommonRankRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// RankInfo

// optional int32 rank = 1;
inline bool RankInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankInfo::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 RankInfo::rank() const {
  return rank_;
}
inline void RankInfo::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint64 user_id = 2;
inline bool RankInfo::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankInfo::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankInfo::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankInfo::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 RankInfo::user_id() const {
  return user_id_;
}
inline void RankInfo::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional string user_name = 3;
inline bool RankInfo::has_user_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RankInfo::set_has_user_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RankInfo::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RankInfo::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& RankInfo::user_name() const {
  return *user_name_;
}
inline void RankInfo::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void RankInfo::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void RankInfo::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RankInfo::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* RankInfo::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RankInfo::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 score = 4;
inline bool RankInfo::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RankInfo::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RankInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RankInfo::clear_score() {
  score_ = GOOGLE_ULONGLONG(0);
  clear_has_score();
}
inline ::google::protobuf::uint64 RankInfo::score() const {
  return score_;
}
inline void RankInfo::set_score(::google::protobuf::uint64 value) {
  set_has_score();
  score_ = value;
}

// optional uint32 face_id = 5;
inline bool RankInfo::has_face_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RankInfo::set_has_face_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RankInfo::clear_has_face_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RankInfo::clear_face_id() {
  face_id_ = 0u;
  clear_has_face_id();
}
inline ::google::protobuf::uint32 RankInfo::face_id() const {
  return face_id_;
}
inline void RankInfo::set_face_id(::google::protobuf::uint32 value) {
  set_has_face_id();
  face_id_ = value;
}

// -------------------------------------------------------------------

// Proto_CSGetCommonRankReq

// optional int32 rank_type = 1;
inline bool Proto_CSGetCommonRankReq::has_rank_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Proto_CSGetCommonRankReq::set_has_rank_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Proto_CSGetCommonRankReq::clear_has_rank_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Proto_CSGetCommonRankReq::clear_rank_type() {
  rank_type_ = 0;
  clear_has_rank_type();
}
inline ::google::protobuf::int32 Proto_CSGetCommonRankReq::rank_type() const {
  return rank_type_;
}
inline void Proto_CSGetCommonRankReq::set_rank_type(::google::protobuf::int32 value) {
  set_has_rank_type();
  rank_type_ = value;
}

// optional int32 rank_from = 2;
inline bool Proto_CSGetCommonRankReq::has_rank_from() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Proto_CSGetCommonRankReq::set_has_rank_from() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Proto_CSGetCommonRankReq::clear_has_rank_from() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Proto_CSGetCommonRankReq::clear_rank_from() {
  rank_from_ = 0;
  clear_has_rank_from();
}
inline ::google::protobuf::int32 Proto_CSGetCommonRankReq::rank_from() const {
  return rank_from_;
}
inline void Proto_CSGetCommonRankReq::set_rank_from(::google::protobuf::int32 value) {
  set_has_rank_from();
  rank_from_ = value;
}

// optional int32 rank_to = 3;
inline bool Proto_CSGetCommonRankReq::has_rank_to() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Proto_CSGetCommonRankReq::set_has_rank_to() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Proto_CSGetCommonRankReq::clear_has_rank_to() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Proto_CSGetCommonRankReq::clear_rank_to() {
  rank_to_ = 0;
  clear_has_rank_to();
}
inline ::google::protobuf::int32 Proto_CSGetCommonRankReq::rank_to() const {
  return rank_to_;
}
inline void Proto_CSGetCommonRankReq::set_rank_to(::google::protobuf::int32 value) {
  set_has_rank_to();
  rank_to_ = value;
}

// -------------------------------------------------------------------

// Proto_SCGetCommonRankRsp

// optional int32 result = 1;
inline bool Proto_SCGetCommonRankRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Proto_SCGetCommonRankRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Proto_SCGetCommonRankRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Proto_SCGetCommonRankRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Proto_SCGetCommonRankRsp::result() const {
  return result_;
}
inline void Proto_SCGetCommonRankRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 rank_type = 2;
inline bool Proto_SCGetCommonRankRsp::has_rank_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Proto_SCGetCommonRankRsp::set_has_rank_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Proto_SCGetCommonRankRsp::clear_has_rank_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Proto_SCGetCommonRankRsp::clear_rank_type() {
  rank_type_ = 0;
  clear_has_rank_type();
}
inline ::google::protobuf::int32 Proto_SCGetCommonRankRsp::rank_type() const {
  return rank_type_;
}
inline void Proto_SCGetCommonRankRsp::set_rank_type(::google::protobuf::int32 value) {
  set_has_rank_type();
  rank_type_ = value;
}

// repeated .proto_rank.RankInfo rank_list = 3;
inline int Proto_SCGetCommonRankRsp::rank_list_size() const {
  return rank_list_.size();
}
inline void Proto_SCGetCommonRankRsp::clear_rank_list() {
  rank_list_.Clear();
}
inline const ::proto_rank::RankInfo& Proto_SCGetCommonRankRsp::rank_list(int index) const {
  return rank_list_.Get(index);
}
inline ::proto_rank::RankInfo* Proto_SCGetCommonRankRsp::mutable_rank_list(int index) {
  return rank_list_.Mutable(index);
}
inline ::proto_rank::RankInfo* Proto_SCGetCommonRankRsp::add_rank_list() {
  return rank_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_rank::RankInfo >&
Proto_SCGetCommonRankRsp::rank_list() const {
  return rank_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_rank::RankInfo >*
Proto_SCGetCommonRankRsp::mutable_rank_list() {
  return &rank_list_;
}

// required int32 my_rank = 4;
inline bool Proto_SCGetCommonRankRsp::has_my_rank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Proto_SCGetCommonRankRsp::set_has_my_rank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Proto_SCGetCommonRankRsp::clear_has_my_rank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Proto_SCGetCommonRankRsp::clear_my_rank() {
  my_rank_ = 0;
  clear_has_my_rank();
}
inline ::google::protobuf::int32 Proto_SCGetCommonRankRsp::my_rank() const {
  return my_rank_;
}
inline void Proto_SCGetCommonRankRsp::set_my_rank(::google::protobuf::int32 value) {
  set_has_my_rank();
  my_rank_ = value;
}

// required uint64 my_score = 5;
inline bool Proto_SCGetCommonRankRsp::has_my_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Proto_SCGetCommonRankRsp::set_has_my_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Proto_SCGetCommonRankRsp::clear_has_my_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Proto_SCGetCommonRankRsp::clear_my_score() {
  my_score_ = GOOGLE_ULONGLONG(0);
  clear_has_my_score();
}
inline ::google::protobuf::uint64 Proto_SCGetCommonRankRsp::my_score() const {
  return my_score_;
}
inline void Proto_SCGetCommonRankRsp::set_my_score(::google::protobuf::uint64 value) {
  set_has_my_score();
  my_score_ = value;
}

// required int32 rank_max = 6;
inline bool Proto_SCGetCommonRankRsp::has_rank_max() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Proto_SCGetCommonRankRsp::set_has_rank_max() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Proto_SCGetCommonRankRsp::clear_has_rank_max() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Proto_SCGetCommonRankRsp::clear_rank_max() {
  rank_max_ = 0;
  clear_has_rank_max();
}
inline ::google::protobuf::int32 Proto_SCGetCommonRankRsp::rank_max() const {
  return rank_max_;
}
inline void Proto_SCGetCommonRankRsp::set_rank_max(::google::protobuf::int32 value) {
  set_has_rank_max();
  rank_max_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_rank

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_rank::Proto_RANK_CS_CMD>() {
  return ::proto_rank::Proto_RANK_CS_CMD_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_5fcs_5frank_2eproto__INCLUDED
