// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_svr_rank.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto_svr_rank.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* Proto_STSnsUpdateRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_STSnsUpdateRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_SnsTSUpdateRankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_SnsTSUpdateRankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_LTSGetCommonRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_LTSGetCommonRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_STLGetCommonRankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_STLGetCommonRankRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Proto_RankSvrMsgID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_5fsvr_5frank_2eproto() {
  protobuf_AddDesc_proto_5fsvr_5frank_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto_svr_rank.proto");
  GOOGLE_CHECK(file != NULL);
  Proto_STSnsUpdateRankReq_descriptor_ = file->message_type(0);
  static const int Proto_STSnsUpdateRankReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STSnsUpdateRankReq, rank_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STSnsUpdateRankReq, score_),
  };
  Proto_STSnsUpdateRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_STSnsUpdateRankReq_descriptor_,
      Proto_STSnsUpdateRankReq::default_instance_,
      Proto_STSnsUpdateRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STSnsUpdateRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STSnsUpdateRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_STSnsUpdateRankReq));
  Proto_SnsTSUpdateRankRsp_descriptor_ = file->message_type(1);
  static const int Proto_SnsTSUpdateRankRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SnsTSUpdateRankRsp, rank_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SnsTSUpdateRankRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SnsTSUpdateRankRsp, rank_old_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SnsTSUpdateRankRsp, rank_new_),
  };
  Proto_SnsTSUpdateRankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_SnsTSUpdateRankRsp_descriptor_,
      Proto_SnsTSUpdateRankRsp::default_instance_,
      Proto_SnsTSUpdateRankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SnsTSUpdateRankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SnsTSUpdateRankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_SnsTSUpdateRankRsp));
  Proto_LTSGetCommonRankReq_descriptor_ = file->message_type(2);
  static const int Proto_LTSGetCommonRankReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSGetCommonRankReq, rank_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSGetCommonRankReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSGetCommonRankReq, rank_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSGetCommonRankReq, rank_to_),
  };
  Proto_LTSGetCommonRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_LTSGetCommonRankReq_descriptor_,
      Proto_LTSGetCommonRankReq::default_instance_,
      Proto_LTSGetCommonRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSGetCommonRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSGetCommonRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_LTSGetCommonRankReq));
  Proto_STLGetCommonRankRsp_descriptor_ = file->message_type(3);
  static const int Proto_STLGetCommonRankRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLGetCommonRankRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLGetCommonRankRsp, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLGetCommonRankRsp, rank_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLGetCommonRankRsp, my_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLGetCommonRankRsp, my_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLGetCommonRankRsp, rank_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLGetCommonRankRsp, rank_list_),
  };
  Proto_STLGetCommonRankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_STLGetCommonRankRsp_descriptor_,
      Proto_STLGetCommonRankRsp::default_instance_,
      Proto_STLGetCommonRankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLGetCommonRankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLGetCommonRankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_STLGetCommonRankRsp));
  Proto_RankSvrMsgID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_5fsvr_5frank_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_STSnsUpdateRankReq_descriptor_, &Proto_STSnsUpdateRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_SnsTSUpdateRankRsp_descriptor_, &Proto_SnsTSUpdateRankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_LTSGetCommonRankReq_descriptor_, &Proto_LTSGetCommonRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_STLGetCommonRankRsp_descriptor_, &Proto_STLGetCommonRankRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_5fsvr_5frank_2eproto() {
  delete Proto_STSnsUpdateRankReq::default_instance_;
  delete Proto_STSnsUpdateRankReq_reflection_;
  delete Proto_SnsTSUpdateRankRsp::default_instance_;
  delete Proto_SnsTSUpdateRankRsp_reflection_;
  delete Proto_LTSGetCommonRankReq::default_instance_;
  delete Proto_LTSGetCommonRankReq_reflection_;
  delete Proto_STLGetCommonRankRsp::default_instance_;
  delete Proto_STLGetCommonRankRsp_reflection_;
}

void protobuf_AddDesc_proto_5fsvr_5frank_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_proto_5fcommon_2eproto();
  ::proto_rank::protobuf_AddDesc_proto_5fcs_5frank_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024proto_svr_rank.proto\022\010proto_ff\032\025yd_fie"
    "ldoptions.proto\032\022proto_common.proto\032\023pro"
    "to_cs_rank.proto\"m\n\030Proto_STSnsUpdateRan"
    "kReq\022\'\n\trank_type\030\001 \001(\0162\024.proto_ff.enRan"
    "kType\022(\n\005score\030\002 \001(\0132\031.proto_ff.RankComm"
    "onScore\"s\n\030Proto_SnsTSUpdateRankRsp\022\'\n\tr"
    "ank_type\030\001 \001(\0162\024.proto_ff.enRankType\022\n\n\002"
    "id\030\002 \001(\004\022\020\n\010rank_old\030\003 \001(\005\022\020\n\010rank_new\030\004"
    " \001(\005\"y\n\031Proto_LTSGetCommonRankReq\022\'\n\tran"
    "k_type\030\001 \001(\0162\024.proto_ff.enRankType\022\017\n\007us"
    "er_id\030\002 \001(\004\022\021\n\trank_from\030\n \001(\005\022\017\n\007rank_t"
    "o\030\013 \001(\005\"\303\001\n\031Proto_STLGetCommonRankRsp\022\016\n"
    "\006result\030\001 \001(\005\022\017\n\007user_id\030\002 \001(\004\022\'\n\trank_t"
    "ype\030\003 \001(\0162\024.proto_ff.enRankType\022\017\n\007my_ra"
    "nk\030\004 \001(\005\022\020\n\010my_score\030\005 \001(\004\022\020\n\010rank_max\030\006"
    " \001(\005\022\'\n\trank_list\030\007 \003(\0132\024.proto_rank.Ran"
    "kInfo*\224\001\n\022Proto_RankSvrMsgID\022\035\n\030NF_STSns"
    "_UPDATE_RANK_REQ\020\230\002\022\035\n\030NF_SnsTS_UPDATE_R"
    "ANK_RSP\020\231\002\022\037\n\032NF_LTS_GET_COMMON_RANK_REQ"
    "\020\234\002\022\037\n\032NF_STL_GET_COMMON_RANK_RSP\020\235\002", 796);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto_svr_rank.proto", &protobuf_RegisterTypes);
  Proto_STSnsUpdateRankReq::default_instance_ = new Proto_STSnsUpdateRankReq();
  Proto_SnsTSUpdateRankRsp::default_instance_ = new Proto_SnsTSUpdateRankRsp();
  Proto_LTSGetCommonRankReq::default_instance_ = new Proto_LTSGetCommonRankReq();
  Proto_STLGetCommonRankRsp::default_instance_ = new Proto_STLGetCommonRankRsp();
  Proto_STSnsUpdateRankReq::default_instance_->InitAsDefaultInstance();
  Proto_SnsTSUpdateRankRsp::default_instance_->InitAsDefaultInstance();
  Proto_LTSGetCommonRankReq::default_instance_->InitAsDefaultInstance();
  Proto_STLGetCommonRankRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_5fsvr_5frank_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_5fsvr_5frank_2eproto {
  StaticDescriptorInitializer_proto_5fsvr_5frank_2eproto() {
    protobuf_AddDesc_proto_5fsvr_5frank_2eproto();
  }
} static_descriptor_initializer_proto_5fsvr_5frank_2eproto_;
const ::google::protobuf::EnumDescriptor* Proto_RankSvrMsgID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_RankSvrMsgID_descriptor_;
}
bool Proto_RankSvrMsgID_IsValid(int value) {
  switch(value) {
    case 280:
    case 281:
    case 284:
    case 285:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_STSnsUpdateRankReq::kRankTypeFieldNumber;
const int Proto_STSnsUpdateRankReq::kScoreFieldNumber;
#endif  // !_MSC_VER

Proto_STSnsUpdateRankReq::Proto_STSnsUpdateRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_STSnsUpdateRankReq::InitAsDefaultInstance() {
  score_ = const_cast< ::proto_ff::RankCommonScore*>(&::proto_ff::RankCommonScore::default_instance());
}

Proto_STSnsUpdateRankReq::Proto_STSnsUpdateRankReq(const Proto_STSnsUpdateRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_STSnsUpdateRankReq::SharedCtor() {
  _cached_size_ = 0;
  rank_type_ = 0;
  score_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_STSnsUpdateRankReq::~Proto_STSnsUpdateRankReq() {
  SharedDtor();
}

void Proto_STSnsUpdateRankReq::SharedDtor() {
  if (this != default_instance_) {
    delete score_;
  }
}

void Proto_STSnsUpdateRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_STSnsUpdateRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_STSnsUpdateRankReq_descriptor_;
}

const Proto_STSnsUpdateRankReq& Proto_STSnsUpdateRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5frank_2eproto();
  return *default_instance_;
}

Proto_STSnsUpdateRankReq* Proto_STSnsUpdateRankReq::default_instance_ = NULL;

Proto_STSnsUpdateRankReq* Proto_STSnsUpdateRankReq::New() const {
  return new Proto_STSnsUpdateRankReq;
}

void Proto_STSnsUpdateRankReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_type_ = 0;
    if (has_score()) {
      if (score_ != NULL) score_->::proto_ff::RankCommonScore::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_STSnsUpdateRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.enRankType rank_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto_ff::enRankType_IsValid(value)) {
            set_rank_type(static_cast< ::proto_ff::enRankType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_score;
        break;
      }

      // optional .proto_ff.RankCommonScore score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_score()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_STSnsUpdateRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.enRankType rank_type = 1;
  if (has_rank_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rank_type(), output);
  }

  // optional .proto_ff.RankCommonScore score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_STSnsUpdateRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.enRankType rank_type = 1;
  if (has_rank_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rank_type(), target);
  }

  // optional .proto_ff.RankCommonScore score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_STSnsUpdateRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.enRankType rank_type = 1;
    if (has_rank_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rank_type());
    }

    // optional .proto_ff.RankCommonScore score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_STSnsUpdateRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_STSnsUpdateRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_STSnsUpdateRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_STSnsUpdateRankReq::MergeFrom(const Proto_STSnsUpdateRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank_type()) {
      set_rank_type(from.rank_type());
    }
    if (from.has_score()) {
      mutable_score()->::proto_ff::RankCommonScore::MergeFrom(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_STSnsUpdateRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_STSnsUpdateRankReq::CopyFrom(const Proto_STSnsUpdateRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_STSnsUpdateRankReq::IsInitialized() const {

  return true;
}

void Proto_STSnsUpdateRankReq::Swap(Proto_STSnsUpdateRankReq* other) {
  if (other != this) {
    std::swap(rank_type_, other->rank_type_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_STSnsUpdateRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_STSnsUpdateRankReq_descriptor_;
  metadata.reflection = Proto_STSnsUpdateRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_SnsTSUpdateRankRsp::kRankTypeFieldNumber;
const int Proto_SnsTSUpdateRankRsp::kIdFieldNumber;
const int Proto_SnsTSUpdateRankRsp::kRankOldFieldNumber;
const int Proto_SnsTSUpdateRankRsp::kRankNewFieldNumber;
#endif  // !_MSC_VER

Proto_SnsTSUpdateRankRsp::Proto_SnsTSUpdateRankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_SnsTSUpdateRankRsp::InitAsDefaultInstance() {
}

Proto_SnsTSUpdateRankRsp::Proto_SnsTSUpdateRankRsp(const Proto_SnsTSUpdateRankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_SnsTSUpdateRankRsp::SharedCtor() {
  _cached_size_ = 0;
  rank_type_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  rank_old_ = 0;
  rank_new_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_SnsTSUpdateRankRsp::~Proto_SnsTSUpdateRankRsp() {
  SharedDtor();
}

void Proto_SnsTSUpdateRankRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_SnsTSUpdateRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_SnsTSUpdateRankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_SnsTSUpdateRankRsp_descriptor_;
}

const Proto_SnsTSUpdateRankRsp& Proto_SnsTSUpdateRankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5frank_2eproto();
  return *default_instance_;
}

Proto_SnsTSUpdateRankRsp* Proto_SnsTSUpdateRankRsp::default_instance_ = NULL;

Proto_SnsTSUpdateRankRsp* Proto_SnsTSUpdateRankRsp::New() const {
  return new Proto_SnsTSUpdateRankRsp;
}

void Proto_SnsTSUpdateRankRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_type_ = 0;
    id_ = GOOGLE_ULONGLONG(0);
    rank_old_ = 0;
    rank_new_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_SnsTSUpdateRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.enRankType rank_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto_ff::enRankType_IsValid(value)) {
            set_rank_type(static_cast< ::proto_ff::enRankType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank_old;
        break;
      }

      // optional int32 rank_old = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_old:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_old_)));
          set_has_rank_old();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rank_new;
        break;
      }

      // optional int32 rank_new = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_new:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_new_)));
          set_has_rank_new();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_SnsTSUpdateRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.enRankType rank_type = 1;
  if (has_rank_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rank_type(), output);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // optional int32 rank_old = 3;
  if (has_rank_old()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rank_old(), output);
  }

  // optional int32 rank_new = 4;
  if (has_rank_new()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rank_new(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_SnsTSUpdateRankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.enRankType rank_type = 1;
  if (has_rank_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rank_type(), target);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // optional int32 rank_old = 3;
  if (has_rank_old()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rank_old(), target);
  }

  // optional int32 rank_new = 4;
  if (has_rank_new()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rank_new(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_SnsTSUpdateRankRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.enRankType rank_type = 1;
    if (has_rank_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rank_type());
    }

    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional int32 rank_old = 3;
    if (has_rank_old()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_old());
    }

    // optional int32 rank_new = 4;
    if (has_rank_new()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_new());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_SnsTSUpdateRankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_SnsTSUpdateRankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_SnsTSUpdateRankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_SnsTSUpdateRankRsp::MergeFrom(const Proto_SnsTSUpdateRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank_type()) {
      set_rank_type(from.rank_type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_rank_old()) {
      set_rank_old(from.rank_old());
    }
    if (from.has_rank_new()) {
      set_rank_new(from.rank_new());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_SnsTSUpdateRankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_SnsTSUpdateRankRsp::CopyFrom(const Proto_SnsTSUpdateRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_SnsTSUpdateRankRsp::IsInitialized() const {

  return true;
}

void Proto_SnsTSUpdateRankRsp::Swap(Proto_SnsTSUpdateRankRsp* other) {
  if (other != this) {
    std::swap(rank_type_, other->rank_type_);
    std::swap(id_, other->id_);
    std::swap(rank_old_, other->rank_old_);
    std::swap(rank_new_, other->rank_new_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_SnsTSUpdateRankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_SnsTSUpdateRankRsp_descriptor_;
  metadata.reflection = Proto_SnsTSUpdateRankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_LTSGetCommonRankReq::kRankTypeFieldNumber;
const int Proto_LTSGetCommonRankReq::kUserIdFieldNumber;
const int Proto_LTSGetCommonRankReq::kRankFromFieldNumber;
const int Proto_LTSGetCommonRankReq::kRankToFieldNumber;
#endif  // !_MSC_VER

Proto_LTSGetCommonRankReq::Proto_LTSGetCommonRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_LTSGetCommonRankReq::InitAsDefaultInstance() {
}

Proto_LTSGetCommonRankReq::Proto_LTSGetCommonRankReq(const Proto_LTSGetCommonRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_LTSGetCommonRankReq::SharedCtor() {
  _cached_size_ = 0;
  rank_type_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  rank_from_ = 0;
  rank_to_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_LTSGetCommonRankReq::~Proto_LTSGetCommonRankReq() {
  SharedDtor();
}

void Proto_LTSGetCommonRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_LTSGetCommonRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_LTSGetCommonRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_LTSGetCommonRankReq_descriptor_;
}

const Proto_LTSGetCommonRankReq& Proto_LTSGetCommonRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5frank_2eproto();
  return *default_instance_;
}

Proto_LTSGetCommonRankReq* Proto_LTSGetCommonRankReq::default_instance_ = NULL;

Proto_LTSGetCommonRankReq* Proto_LTSGetCommonRankReq::New() const {
  return new Proto_LTSGetCommonRankReq;
}

void Proto_LTSGetCommonRankReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_type_ = 0;
    user_id_ = GOOGLE_ULONGLONG(0);
    rank_from_ = 0;
    rank_to_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_LTSGetCommonRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.enRankType rank_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto_ff::enRankType_IsValid(value)) {
            set_rank_type(static_cast< ::proto_ff::enRankType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_rank_from;
        break;
      }

      // optional int32 rank_from = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_from_)));
          set_has_rank_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_rank_to;
        break;
      }

      // optional int32 rank_to = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_to_)));
          set_has_rank_to();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_LTSGetCommonRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.enRankType rank_type = 1;
  if (has_rank_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rank_type(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional int32 rank_from = 10;
  if (has_rank_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->rank_from(), output);
  }

  // optional int32 rank_to = 11;
  if (has_rank_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->rank_to(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_LTSGetCommonRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.enRankType rank_type = 1;
  if (has_rank_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rank_type(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional int32 rank_from = 10;
  if (has_rank_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->rank_from(), target);
  }

  // optional int32 rank_to = 11;
  if (has_rank_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->rank_to(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_LTSGetCommonRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.enRankType rank_type = 1;
    if (has_rank_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rank_type());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional int32 rank_from = 10;
    if (has_rank_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_from());
    }

    // optional int32 rank_to = 11;
    if (has_rank_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_to());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_LTSGetCommonRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_LTSGetCommonRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_LTSGetCommonRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_LTSGetCommonRankReq::MergeFrom(const Proto_LTSGetCommonRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank_type()) {
      set_rank_type(from.rank_type());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_rank_from()) {
      set_rank_from(from.rank_from());
    }
    if (from.has_rank_to()) {
      set_rank_to(from.rank_to());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_LTSGetCommonRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_LTSGetCommonRankReq::CopyFrom(const Proto_LTSGetCommonRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_LTSGetCommonRankReq::IsInitialized() const {

  return true;
}

void Proto_LTSGetCommonRankReq::Swap(Proto_LTSGetCommonRankReq* other) {
  if (other != this) {
    std::swap(rank_type_, other->rank_type_);
    std::swap(user_id_, other->user_id_);
    std::swap(rank_from_, other->rank_from_);
    std::swap(rank_to_, other->rank_to_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_LTSGetCommonRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_LTSGetCommonRankReq_descriptor_;
  metadata.reflection = Proto_LTSGetCommonRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_STLGetCommonRankRsp::kResultFieldNumber;
const int Proto_STLGetCommonRankRsp::kUserIdFieldNumber;
const int Proto_STLGetCommonRankRsp::kRankTypeFieldNumber;
const int Proto_STLGetCommonRankRsp::kMyRankFieldNumber;
const int Proto_STLGetCommonRankRsp::kMyScoreFieldNumber;
const int Proto_STLGetCommonRankRsp::kRankMaxFieldNumber;
const int Proto_STLGetCommonRankRsp::kRankListFieldNumber;
#endif  // !_MSC_VER

Proto_STLGetCommonRankRsp::Proto_STLGetCommonRankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_STLGetCommonRankRsp::InitAsDefaultInstance() {
}

Proto_STLGetCommonRankRsp::Proto_STLGetCommonRankRsp(const Proto_STLGetCommonRankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_STLGetCommonRankRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  rank_type_ = 0;
  my_rank_ = 0;
  my_score_ = GOOGLE_ULONGLONG(0);
  rank_max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_STLGetCommonRankRsp::~Proto_STLGetCommonRankRsp() {
  SharedDtor();
}

void Proto_STLGetCommonRankRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_STLGetCommonRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_STLGetCommonRankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_STLGetCommonRankRsp_descriptor_;
}

const Proto_STLGetCommonRankRsp& Proto_STLGetCommonRankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5frank_2eproto();
  return *default_instance_;
}

Proto_STLGetCommonRankRsp* Proto_STLGetCommonRankRsp::default_instance_ = NULL;

Proto_STLGetCommonRankRsp* Proto_STLGetCommonRankRsp::New() const {
  return new Proto_STLGetCommonRankRsp;
}

void Proto_STLGetCommonRankRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    user_id_ = GOOGLE_ULONGLONG(0);
    rank_type_ = 0;
    my_rank_ = 0;
    my_score_ = GOOGLE_ULONGLONG(0);
    rank_max_ = 0;
  }
  rank_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_STLGetCommonRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank_type;
        break;
      }

      // optional .proto_ff.enRankType rank_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto_ff::enRankType_IsValid(value)) {
            set_rank_type(static_cast< ::proto_ff::enRankType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_my_rank;
        break;
      }

      // optional int32 my_rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &my_rank_)));
          set_has_my_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_my_score;
        break;
      }

      // optional uint64 my_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &my_score_)));
          set_has_my_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rank_max;
        break;
      }

      // optional int32 rank_max = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_max_)));
          set_has_rank_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_rank_list;
        break;
      }

      // repeated .proto_rank.RankInfo rank_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_rank_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_STLGetCommonRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional .proto_ff.enRankType rank_type = 3;
  if (has_rank_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->rank_type(), output);
  }

  // optional int32 my_rank = 4;
  if (has_my_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->my_rank(), output);
  }

  // optional uint64 my_score = 5;
  if (has_my_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->my_score(), output);
  }

  // optional int32 rank_max = 6;
  if (has_rank_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rank_max(), output);
  }

  // repeated .proto_rank.RankInfo rank_list = 7;
  for (int i = 0; i < this->rank_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->rank_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_STLGetCommonRankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional .proto_ff.enRankType rank_type = 3;
  if (has_rank_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->rank_type(), target);
  }

  // optional int32 my_rank = 4;
  if (has_my_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->my_rank(), target);
  }

  // optional uint64 my_score = 5;
  if (has_my_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->my_score(), target);
  }

  // optional int32 rank_max = 6;
  if (has_rank_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rank_max(), target);
  }

  // repeated .proto_rank.RankInfo rank_list = 7;
  for (int i = 0; i < this->rank_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->rank_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_STLGetCommonRankRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional .proto_ff.enRankType rank_type = 3;
    if (has_rank_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rank_type());
    }

    // optional int32 my_rank = 4;
    if (has_my_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->my_rank());
    }

    // optional uint64 my_score = 5;
    if (has_my_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->my_score());
    }

    // optional int32 rank_max = 6;
    if (has_rank_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_max());
    }

  }
  // repeated .proto_rank.RankInfo rank_list = 7;
  total_size += 1 * this->rank_list_size();
  for (int i = 0; i < this->rank_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_STLGetCommonRankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_STLGetCommonRankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_STLGetCommonRankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_STLGetCommonRankRsp::MergeFrom(const Proto_STLGetCommonRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_list_.MergeFrom(from.rank_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_rank_type()) {
      set_rank_type(from.rank_type());
    }
    if (from.has_my_rank()) {
      set_my_rank(from.my_rank());
    }
    if (from.has_my_score()) {
      set_my_score(from.my_score());
    }
    if (from.has_rank_max()) {
      set_rank_max(from.rank_max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_STLGetCommonRankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_STLGetCommonRankRsp::CopyFrom(const Proto_STLGetCommonRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_STLGetCommonRankRsp::IsInitialized() const {

  return true;
}

void Proto_STLGetCommonRankRsp::Swap(Proto_STLGetCommonRankRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(user_id_, other->user_id_);
    std::swap(rank_type_, other->rank_type_);
    std::swap(my_rank_, other->my_rank_);
    std::swap(my_score_, other->my_score_);
    std::swap(rank_max_, other->rank_max_);
    rank_list_.Swap(&other->rank_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_STLGetCommonRankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_STLGetCommonRankRsp_descriptor_;
  metadata.reflection = Proto_STLGetCommonRankRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
