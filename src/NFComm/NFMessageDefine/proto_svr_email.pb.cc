// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_svr_email.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto_svr_email.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* Proto_GSMailCreateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_GSMailCreateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_SGMailCreateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_SGMailCreateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_LTSMailListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_LTSMailListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_STLMailListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_STLMailListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_LTSMailReadReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_LTSMailReadReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_STLMailReadRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_STLMailReadRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_STLMailAutoPushRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_STLMailAutoPushRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_LTSMailDelReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_LTSMailDelReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_STLMailDelRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_STLMailDelRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_OtherTSMailCreateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_OtherTSMailCreateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_STOtherMailCreateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_STOtherMailCreateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_LTSMailGetItemReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_LTSMailGetItemReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_STLMailGetItemRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_STLMailGetItemRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_STLMailReadItemReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_STLMailReadItemReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Proto_LTSMailReadItemRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Proto_LTSMailReadItemRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Proto_EmailSvrMsgID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_5fsvr_5femail_2eproto() {
  protobuf_AddDesc_proto_5fsvr_5femail_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto_svr_email.proto");
  GOOGLE_CHECK(file != NULL);
  Proto_GSMailCreateReq_descriptor_ = file->message_type(0);
  static const int Proto_GSMailCreateReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_GSMailCreateReq, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_GSMailCreateReq, role_mail_),
  };
  Proto_GSMailCreateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_GSMailCreateReq_descriptor_,
      Proto_GSMailCreateReq::default_instance_,
      Proto_GSMailCreateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_GSMailCreateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_GSMailCreateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_GSMailCreateReq));
  Proto_SGMailCreateRsp_descriptor_ = file->message_type(1);
  static const int Proto_SGMailCreateRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SGMailCreateRsp, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SGMailCreateRsp, role_mail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SGMailCreateRsp, result_),
  };
  Proto_SGMailCreateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_SGMailCreateRsp_descriptor_,
      Proto_SGMailCreateRsp::default_instance_,
      Proto_SGMailCreateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SGMailCreateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_SGMailCreateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_SGMailCreateRsp));
  Proto_LTSMailListReq_descriptor_ = file->message_type(2);
  static const int Proto_LTSMailListReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSMailListReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSMailListReq, cs_req_),
  };
  Proto_LTSMailListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_LTSMailListReq_descriptor_,
      Proto_LTSMailListReq::default_instance_,
      Proto_LTSMailListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSMailListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSMailListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_LTSMailListReq));
  Proto_STLMailListRsp_descriptor_ = file->message_type(3);
  static const int Proto_STLMailListRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLMailListRsp, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLMailListRsp, cs_rsp_),
  };
  Proto_STLMailListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_STLMailListRsp_descriptor_,
      Proto_STLMailListRsp::default_instance_,
      Proto_STLMailListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLMailListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLMailListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_STLMailListRsp));
  Proto_LTSMailReadReq_descriptor_ = file->message_type(4);
  static const int Proto_LTSMailReadReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSMailReadReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSMailReadReq, mail_id_),
  };
  Proto_LTSMailReadReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_LTSMailReadReq_descriptor_,
      Proto_LTSMailReadReq::default_instance_,
      Proto_LTSMailReadReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSMailReadReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSMailReadReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_LTSMailReadReq));
  Proto_STLMailReadRsp_descriptor_ = file->message_type(5);
  static const int Proto_STLMailReadRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLMailReadRsp, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLMailReadRsp, cs_rsp_),
  };
  Proto_STLMailReadRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_STLMailReadRsp_descriptor_,
      Proto_STLMailReadRsp::default_instance_,
      Proto_STLMailReadRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLMailReadRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLMailReadRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_STLMailReadRsp));
  Proto_STLMailAutoPushRsp_descriptor_ = file->message_type(6);
  static const int Proto_STLMailAutoPushRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLMailAutoPushRsp, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLMailAutoPushRsp, role_mail_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLMailAutoPushRsp, all_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLMailAutoPushRsp, no_read_count_),
  };
  Proto_STLMailAutoPushRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_STLMailAutoPushRsp_descriptor_,
      Proto_STLMailAutoPushRsp::default_instance_,
      Proto_STLMailAutoPushRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLMailAutoPushRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLMailAutoPushRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_STLMailAutoPushRsp));
  Proto_LTSMailDelReq_descriptor_ = file->message_type(7);
  static const int Proto_LTSMailDelReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSMailDelReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSMailDelReq, cs_req_),
  };
  Proto_LTSMailDelReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_LTSMailDelReq_descriptor_,
      Proto_LTSMailDelReq::default_instance_,
      Proto_LTSMailDelReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSMailDelReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSMailDelReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_LTSMailDelReq));
  Proto_STLMailDelRsp_descriptor_ = file->message_type(8);
  static const int Proto_STLMailDelRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLMailDelRsp, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLMailDelRsp, cs_rsp_),
  };
  Proto_STLMailDelRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_STLMailDelRsp_descriptor_,
      Proto_STLMailDelRsp::default_instance_,
      Proto_STLMailDelRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLMailDelRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLMailDelRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_STLMailDelRsp));
  Proto_OtherTSMailCreateReq_descriptor_ = file->message_type(9);
  static const int Proto_OtherTSMailCreateReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_OtherTSMailCreateReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_OtherTSMailCreateReq, role_mail_),
  };
  Proto_OtherTSMailCreateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_OtherTSMailCreateReq_descriptor_,
      Proto_OtherTSMailCreateReq::default_instance_,
      Proto_OtherTSMailCreateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_OtherTSMailCreateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_OtherTSMailCreateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_OtherTSMailCreateReq));
  Proto_STOtherMailCreateRsp_descriptor_ = file->message_type(10);
  static const int Proto_STOtherMailCreateRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STOtherMailCreateRsp, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STOtherMailCreateRsp, role_mail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STOtherMailCreateRsp, result_),
  };
  Proto_STOtherMailCreateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_STOtherMailCreateRsp_descriptor_,
      Proto_STOtherMailCreateRsp::default_instance_,
      Proto_STOtherMailCreateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STOtherMailCreateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STOtherMailCreateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_STOtherMailCreateRsp));
  Proto_LTSMailGetItemReq_descriptor_ = file->message_type(11);
  static const int Proto_LTSMailGetItemReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSMailGetItemReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSMailGetItemReq, mail_id_),
  };
  Proto_LTSMailGetItemReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_LTSMailGetItemReq_descriptor_,
      Proto_LTSMailGetItemReq::default_instance_,
      Proto_LTSMailGetItemReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSMailGetItemReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSMailGetItemReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_LTSMailGetItemReq));
  Proto_STLMailGetItemRsp_descriptor_ = file->message_type(12);
  static const int Proto_STLMailGetItemRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLMailGetItemRsp, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLMailGetItemRsp, cs_rsp_),
  };
  Proto_STLMailGetItemRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_STLMailGetItemRsp_descriptor_,
      Proto_STLMailGetItemRsp::default_instance_,
      Proto_STLMailGetItemRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLMailGetItemRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLMailGetItemRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_STLMailGetItemRsp));
  Proto_STLMailReadItemReq_descriptor_ = file->message_type(13);
  static const int Proto_STLMailReadItemReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLMailReadItemReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLMailReadItemReq, item_list_),
  };
  Proto_STLMailReadItemReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_STLMailReadItemReq_descriptor_,
      Proto_STLMailReadItemReq::default_instance_,
      Proto_STLMailReadItemReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLMailReadItemReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_STLMailReadItemReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_STLMailReadItemReq));
  Proto_LTSMailReadItemRsp_descriptor_ = file->message_type(14);
  static const int Proto_LTSMailReadItemRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSMailReadItemRsp, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSMailReadItemRsp, get_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSMailReadItemRsp, id_),
  };
  Proto_LTSMailReadItemRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Proto_LTSMailReadItemRsp_descriptor_,
      Proto_LTSMailReadItemRsp::default_instance_,
      Proto_LTSMailReadItemRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSMailReadItemRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proto_LTSMailReadItemRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Proto_LTSMailReadItemRsp));
  Proto_EmailSvrMsgID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_5fsvr_5femail_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_GSMailCreateReq_descriptor_, &Proto_GSMailCreateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_SGMailCreateRsp_descriptor_, &Proto_SGMailCreateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_LTSMailListReq_descriptor_, &Proto_LTSMailListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_STLMailListRsp_descriptor_, &Proto_STLMailListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_LTSMailReadReq_descriptor_, &Proto_LTSMailReadReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_STLMailReadRsp_descriptor_, &Proto_STLMailReadRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_STLMailAutoPushRsp_descriptor_, &Proto_STLMailAutoPushRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_LTSMailDelReq_descriptor_, &Proto_LTSMailDelReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_STLMailDelRsp_descriptor_, &Proto_STLMailDelRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_OtherTSMailCreateReq_descriptor_, &Proto_OtherTSMailCreateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_STOtherMailCreateRsp_descriptor_, &Proto_STOtherMailCreateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_LTSMailGetItemReq_descriptor_, &Proto_LTSMailGetItemReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_STLMailGetItemRsp_descriptor_, &Proto_STLMailGetItemRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_STLMailReadItemReq_descriptor_, &Proto_STLMailReadItemReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Proto_LTSMailReadItemRsp_descriptor_, &Proto_LTSMailReadItemRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_5fsvr_5femail_2eproto() {
  delete Proto_GSMailCreateReq::default_instance_;
  delete Proto_GSMailCreateReq_reflection_;
  delete Proto_SGMailCreateRsp::default_instance_;
  delete Proto_SGMailCreateRsp_reflection_;
  delete Proto_LTSMailListReq::default_instance_;
  delete Proto_LTSMailListReq_reflection_;
  delete Proto_STLMailListRsp::default_instance_;
  delete Proto_STLMailListRsp_reflection_;
  delete Proto_LTSMailReadReq::default_instance_;
  delete Proto_LTSMailReadReq_reflection_;
  delete Proto_STLMailReadRsp::default_instance_;
  delete Proto_STLMailReadRsp_reflection_;
  delete Proto_STLMailAutoPushRsp::default_instance_;
  delete Proto_STLMailAutoPushRsp_reflection_;
  delete Proto_LTSMailDelReq::default_instance_;
  delete Proto_LTSMailDelReq_reflection_;
  delete Proto_STLMailDelRsp::default_instance_;
  delete Proto_STLMailDelRsp_reflection_;
  delete Proto_OtherTSMailCreateReq::default_instance_;
  delete Proto_OtherTSMailCreateReq_reflection_;
  delete Proto_STOtherMailCreateRsp::default_instance_;
  delete Proto_STOtherMailCreateRsp_reflection_;
  delete Proto_LTSMailGetItemReq::default_instance_;
  delete Proto_LTSMailGetItemReq_reflection_;
  delete Proto_STLMailGetItemRsp::default_instance_;
  delete Proto_STLMailGetItemRsp_reflection_;
  delete Proto_STLMailReadItemReq::default_instance_;
  delete Proto_STLMailReadItemReq_reflection_;
  delete Proto_LTSMailReadItemRsp::default_instance_;
  delete Proto_LTSMailReadItemRsp_reflection_;
}

void protobuf_AddDesc_proto_5fsvr_5femail_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_proto_5fcommon_2eproto();
  ::proto_email::protobuf_AddDesc_proto_5fcs_5femail_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025proto_svr_email.proto\022\010proto_ff\032\025yd_fi"
    "eldoptions.proto\032\022proto_common.proto\032\024pr"
    "oto_cs_email.proto\"W\n\025Proto_GSMailCreate"
    "Req\022\017\n\007role_id\030\001 \001(\004\022-\n\trole_mail\030\002 \001(\0132"
    "\032.proto_ff.tbUserMailDetail\"g\n\025Proto_SGM"
    "ailCreateRsp\022\017\n\007role_id\030\001 \001(\004\022-\n\trole_ma"
    "il\030\002 \001(\0132\032.proto_ff.tbUserMailDetail\022\016\n\006"
    "result\030\003 \001(\005\"Y\n\024Proto_LTSMailListReq\022\017\n\007"
    "user_id\030\001 \001(\004\0220\n\006cs_req\030\002 \001(\0132 .proto_em"
    "ail.Proto_CSMailListReq\"Y\n\024Proto_STLMail"
    "ListRsp\022\017\n\007user_id\030\001 \001(\004\0220\n\006cs_rsp\030\002 \001(\013"
    "2 .proto_email.Proto_CSMailListRsp\"8\n\024Pr"
    "oto_LTSMailReadReq\022\017\n\007user_id\030\001 \001(\004\022\017\n\007m"
    "ail_id\030\002 \001(\004\"Y\n\024Proto_STLMailReadRsp\022\017\n\007"
    "user_id\030\001 \001(\004\0220\n\006cs_rsp\030\002 \001(\0132 .proto_em"
    "ail.Proto_CSMailReadRsp\"\210\001\n\030Proto_STLMai"
    "lAutoPushRsp\022\017\n\007user_id\030\001 \001(\004\0221\n\016role_ma"
    "il_list\030\002 \003(\0132\031.proto_email.UserMailData"
    "\022\021\n\tall_count\030\003 \001(\005\022\025\n\rno_read_count\030\004 \001"
    "(\005\"W\n\023Proto_LTSMailDelReq\022\017\n\007user_id\030\001 \001"
    "(\004\022/\n\006cs_req\030\002 \001(\0132\037.proto_email.Proto_C"
    "SMailDelReq\"W\n\023Proto_STLMailDelRsp\022\017\n\007us"
    "er_id\030\001 \001(\004\022/\n\006cs_rsp\030\002 \001(\0132\037.proto_emai"
    "l.Proto_CSMailDelRsp\"\\\n\032Proto_OtherTSMai"
    "lCreateReq\022\017\n\007user_id\030\001 \001(\004\022-\n\trole_mail"
    "\030\002 \001(\0132\032.proto_ff.tbUserMailDetail\"l\n\032Pr"
    "oto_STOtherMailCreateRsp\022\017\n\007user_id\030\001 \001("
    "\004\022-\n\trole_mail\030\002 \001(\0132\032.proto_ff.tbUserMa"
    "ilDetail\022\016\n\006result\030\003 \001(\005\";\n\027Proto_LTSMai"
    "lGetItemReq\022\017\n\007user_id\030\001 \001(\004\022\017\n\007mail_id\030"
    "\002 \001(\004\"_\n\027Proto_STLMailGetItemRsp\022\017\n\007user"
    "_id\030\001 \001(\004\0223\n\006cs_rsp\030\002 \001(\0132#.proto_email."
    "Proto_CSMailGetItemRsp\"U\n\030Proto_STLMailR"
    "eadItemReq\022\017\n\007user_id\030\001 \001(\004\022(\n\titem_list"
    "\030\002 \003(\0132\025.proto_email.MailItem\"u\n\030Proto_L"
    "TSMailReadItemRsp\022\017\n\007user_id\030\001 \001(\004\022%\n\006ge"
    "t_id\030\004 \003(\0132\025.proto_email.MailItem\022!\n\002id\030"
    "\005 \003(\0132\025.proto_email.MailItem*\232\003\n\023Proto_E"
    "mailSvrMsgID\022\031\n\024NF_LTS_MAIL_LIST_REQ\020\353\001\022"
    "\031\n\024NF_STL_MAIL_LIST_RSP\020\354\001\022\031\n\024NF_LTS_MAI"
    "L_READ_REQ\020\355\001\022\031\n\024NF_STL_MAIL_READ_RSP\020\356\001"
    "\022\030\n\023NF_LTS_MAIL_DEL_REQ\020\357\001\022\030\n\023NF_STL_MAI"
    "L_DEL_RSP\020\360\001\022\037\n\032NF_OtherTS_MAIL_CREATE_R"
    "EQ\020\361\001\022\037\n\032NF_STOther_MAIL_CREATE_RSP\020\362\001\022#"
    "\n\036NF_STL_MAIL_MAIL_AUTO_PUSH_RSP\020\363\001\022\035\n\030N"
    "F_LTS_MAIL_GET_ITEM_REQ\020\364\001\022\035\n\030NF_STL_MAI"
    "L_GET_ITEM_RSP\020\365\001\022\036\n\031NF_STL_MAIL_READ_IT"
    "EM_REQ\020\366\001\022\036\n\031NF_LTS_MAIL_READ_ITEM_RSP\020\367"
    "\001", 1921);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto_svr_email.proto", &protobuf_RegisterTypes);
  Proto_GSMailCreateReq::default_instance_ = new Proto_GSMailCreateReq();
  Proto_SGMailCreateRsp::default_instance_ = new Proto_SGMailCreateRsp();
  Proto_LTSMailListReq::default_instance_ = new Proto_LTSMailListReq();
  Proto_STLMailListRsp::default_instance_ = new Proto_STLMailListRsp();
  Proto_LTSMailReadReq::default_instance_ = new Proto_LTSMailReadReq();
  Proto_STLMailReadRsp::default_instance_ = new Proto_STLMailReadRsp();
  Proto_STLMailAutoPushRsp::default_instance_ = new Proto_STLMailAutoPushRsp();
  Proto_LTSMailDelReq::default_instance_ = new Proto_LTSMailDelReq();
  Proto_STLMailDelRsp::default_instance_ = new Proto_STLMailDelRsp();
  Proto_OtherTSMailCreateReq::default_instance_ = new Proto_OtherTSMailCreateReq();
  Proto_STOtherMailCreateRsp::default_instance_ = new Proto_STOtherMailCreateRsp();
  Proto_LTSMailGetItemReq::default_instance_ = new Proto_LTSMailGetItemReq();
  Proto_STLMailGetItemRsp::default_instance_ = new Proto_STLMailGetItemRsp();
  Proto_STLMailReadItemReq::default_instance_ = new Proto_STLMailReadItemReq();
  Proto_LTSMailReadItemRsp::default_instance_ = new Proto_LTSMailReadItemRsp();
  Proto_GSMailCreateReq::default_instance_->InitAsDefaultInstance();
  Proto_SGMailCreateRsp::default_instance_->InitAsDefaultInstance();
  Proto_LTSMailListReq::default_instance_->InitAsDefaultInstance();
  Proto_STLMailListRsp::default_instance_->InitAsDefaultInstance();
  Proto_LTSMailReadReq::default_instance_->InitAsDefaultInstance();
  Proto_STLMailReadRsp::default_instance_->InitAsDefaultInstance();
  Proto_STLMailAutoPushRsp::default_instance_->InitAsDefaultInstance();
  Proto_LTSMailDelReq::default_instance_->InitAsDefaultInstance();
  Proto_STLMailDelRsp::default_instance_->InitAsDefaultInstance();
  Proto_OtherTSMailCreateReq::default_instance_->InitAsDefaultInstance();
  Proto_STOtherMailCreateRsp::default_instance_->InitAsDefaultInstance();
  Proto_LTSMailGetItemReq::default_instance_->InitAsDefaultInstance();
  Proto_STLMailGetItemRsp::default_instance_->InitAsDefaultInstance();
  Proto_STLMailReadItemReq::default_instance_->InitAsDefaultInstance();
  Proto_LTSMailReadItemRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_5fsvr_5femail_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_5fsvr_5femail_2eproto {
  StaticDescriptorInitializer_proto_5fsvr_5femail_2eproto() {
    protobuf_AddDesc_proto_5fsvr_5femail_2eproto();
  }
} static_descriptor_initializer_proto_5fsvr_5femail_2eproto_;
const ::google::protobuf::EnumDescriptor* Proto_EmailSvrMsgID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_EmailSvrMsgID_descriptor_;
}
bool Proto_EmailSvrMsgID_IsValid(int value) {
  switch(value) {
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_GSMailCreateReq::kRoleIdFieldNumber;
const int Proto_GSMailCreateReq::kRoleMailFieldNumber;
#endif  // !_MSC_VER

Proto_GSMailCreateReq::Proto_GSMailCreateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_GSMailCreateReq::InitAsDefaultInstance() {
  role_mail_ = const_cast< ::proto_ff::tbUserMailDetail*>(&::proto_ff::tbUserMailDetail::default_instance());
}

Proto_GSMailCreateReq::Proto_GSMailCreateReq(const Proto_GSMailCreateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_GSMailCreateReq::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  role_mail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_GSMailCreateReq::~Proto_GSMailCreateReq() {
  SharedDtor();
}

void Proto_GSMailCreateReq::SharedDtor() {
  if (this != default_instance_) {
    delete role_mail_;
  }
}

void Proto_GSMailCreateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_GSMailCreateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_GSMailCreateReq_descriptor_;
}

const Proto_GSMailCreateReq& Proto_GSMailCreateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5femail_2eproto();
  return *default_instance_;
}

Proto_GSMailCreateReq* Proto_GSMailCreateReq::default_instance_ = NULL;

Proto_GSMailCreateReq* Proto_GSMailCreateReq::New() const {
  return new Proto_GSMailCreateReq;
}

void Proto_GSMailCreateReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_mail()) {
      if (role_mail_ != NULL) role_mail_->::proto_ff::tbUserMailDetail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_GSMailCreateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_mail;
        break;
      }

      // optional .proto_ff.tbUserMailDetail role_mail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_GSMailCreateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional .proto_ff.tbUserMailDetail role_mail = 2;
  if (has_role_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->role_mail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_GSMailCreateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional .proto_ff.tbUserMailDetail role_mail = 2;
  if (has_role_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->role_mail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_GSMailCreateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional .proto_ff.tbUserMailDetail role_mail = 2;
    if (has_role_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_mail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_GSMailCreateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_GSMailCreateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_GSMailCreateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_GSMailCreateReq::MergeFrom(const Proto_GSMailCreateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_mail()) {
      mutable_role_mail()->::proto_ff::tbUserMailDetail::MergeFrom(from.role_mail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_GSMailCreateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_GSMailCreateReq::CopyFrom(const Proto_GSMailCreateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_GSMailCreateReq::IsInitialized() const {

  return true;
}

void Proto_GSMailCreateReq::Swap(Proto_GSMailCreateReq* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_mail_, other->role_mail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_GSMailCreateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_GSMailCreateReq_descriptor_;
  metadata.reflection = Proto_GSMailCreateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_SGMailCreateRsp::kRoleIdFieldNumber;
const int Proto_SGMailCreateRsp::kRoleMailFieldNumber;
const int Proto_SGMailCreateRsp::kResultFieldNumber;
#endif  // !_MSC_VER

Proto_SGMailCreateRsp::Proto_SGMailCreateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_SGMailCreateRsp::InitAsDefaultInstance() {
  role_mail_ = const_cast< ::proto_ff::tbUserMailDetail*>(&::proto_ff::tbUserMailDetail::default_instance());
}

Proto_SGMailCreateRsp::Proto_SGMailCreateRsp(const Proto_SGMailCreateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_SGMailCreateRsp::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  role_mail_ = NULL;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_SGMailCreateRsp::~Proto_SGMailCreateRsp() {
  SharedDtor();
}

void Proto_SGMailCreateRsp::SharedDtor() {
  if (this != default_instance_) {
    delete role_mail_;
  }
}

void Proto_SGMailCreateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_SGMailCreateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_SGMailCreateRsp_descriptor_;
}

const Proto_SGMailCreateRsp& Proto_SGMailCreateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5femail_2eproto();
  return *default_instance_;
}

Proto_SGMailCreateRsp* Proto_SGMailCreateRsp::default_instance_ = NULL;

Proto_SGMailCreateRsp* Proto_SGMailCreateRsp::New() const {
  return new Proto_SGMailCreateRsp;
}

void Proto_SGMailCreateRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_mail()) {
      if (role_mail_ != NULL) role_mail_->::proto_ff::tbUserMailDetail::Clear();
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_SGMailCreateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_mail;
        break;
      }

      // optional .proto_ff.tbUserMailDetail role_mail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_SGMailCreateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional .proto_ff.tbUserMailDetail role_mail = 2;
  if (has_role_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->role_mail(), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_SGMailCreateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional .proto_ff.tbUserMailDetail role_mail = 2;
  if (has_role_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->role_mail(), target);
  }

  // optional int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_SGMailCreateRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional .proto_ff.tbUserMailDetail role_mail = 2;
    if (has_role_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_mail());
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_SGMailCreateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_SGMailCreateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_SGMailCreateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_SGMailCreateRsp::MergeFrom(const Proto_SGMailCreateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_mail()) {
      mutable_role_mail()->::proto_ff::tbUserMailDetail::MergeFrom(from.role_mail());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_SGMailCreateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_SGMailCreateRsp::CopyFrom(const Proto_SGMailCreateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_SGMailCreateRsp::IsInitialized() const {

  return true;
}

void Proto_SGMailCreateRsp::Swap(Proto_SGMailCreateRsp* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_mail_, other->role_mail_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_SGMailCreateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_SGMailCreateRsp_descriptor_;
  metadata.reflection = Proto_SGMailCreateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_LTSMailListReq::kUserIdFieldNumber;
const int Proto_LTSMailListReq::kCsReqFieldNumber;
#endif  // !_MSC_VER

Proto_LTSMailListReq::Proto_LTSMailListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_LTSMailListReq::InitAsDefaultInstance() {
  cs_req_ = const_cast< ::proto_email::Proto_CSMailListReq*>(&::proto_email::Proto_CSMailListReq::default_instance());
}

Proto_LTSMailListReq::Proto_LTSMailListReq(const Proto_LTSMailListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_LTSMailListReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  cs_req_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_LTSMailListReq::~Proto_LTSMailListReq() {
  SharedDtor();
}

void Proto_LTSMailListReq::SharedDtor() {
  if (this != default_instance_) {
    delete cs_req_;
  }
}

void Proto_LTSMailListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_LTSMailListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_LTSMailListReq_descriptor_;
}

const Proto_LTSMailListReq& Proto_LTSMailListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5femail_2eproto();
  return *default_instance_;
}

Proto_LTSMailListReq* Proto_LTSMailListReq::default_instance_ = NULL;

Proto_LTSMailListReq* Proto_LTSMailListReq::New() const {
  return new Proto_LTSMailListReq;
}

void Proto_LTSMailListReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_cs_req()) {
      if (cs_req_ != NULL) cs_req_->::proto_email::Proto_CSMailListReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_LTSMailListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cs_req;
        break;
      }

      // optional .proto_email.Proto_CSMailListReq cs_req = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cs_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cs_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_LTSMailListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional .proto_email.Proto_CSMailListReq cs_req = 2;
  if (has_cs_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cs_req(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_LTSMailListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional .proto_email.Proto_CSMailListReq cs_req = 2;
  if (has_cs_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cs_req(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_LTSMailListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional .proto_email.Proto_CSMailListReq cs_req = 2;
    if (has_cs_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cs_req());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_LTSMailListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_LTSMailListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_LTSMailListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_LTSMailListReq::MergeFrom(const Proto_LTSMailListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_cs_req()) {
      mutable_cs_req()->::proto_email::Proto_CSMailListReq::MergeFrom(from.cs_req());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_LTSMailListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_LTSMailListReq::CopyFrom(const Proto_LTSMailListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_LTSMailListReq::IsInitialized() const {

  return true;
}

void Proto_LTSMailListReq::Swap(Proto_LTSMailListReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(cs_req_, other->cs_req_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_LTSMailListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_LTSMailListReq_descriptor_;
  metadata.reflection = Proto_LTSMailListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_STLMailListRsp::kUserIdFieldNumber;
const int Proto_STLMailListRsp::kCsRspFieldNumber;
#endif  // !_MSC_VER

Proto_STLMailListRsp::Proto_STLMailListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_STLMailListRsp::InitAsDefaultInstance() {
  cs_rsp_ = const_cast< ::proto_email::Proto_CSMailListRsp*>(&::proto_email::Proto_CSMailListRsp::default_instance());
}

Proto_STLMailListRsp::Proto_STLMailListRsp(const Proto_STLMailListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_STLMailListRsp::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  cs_rsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_STLMailListRsp::~Proto_STLMailListRsp() {
  SharedDtor();
}

void Proto_STLMailListRsp::SharedDtor() {
  if (this != default_instance_) {
    delete cs_rsp_;
  }
}

void Proto_STLMailListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_STLMailListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_STLMailListRsp_descriptor_;
}

const Proto_STLMailListRsp& Proto_STLMailListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5femail_2eproto();
  return *default_instance_;
}

Proto_STLMailListRsp* Proto_STLMailListRsp::default_instance_ = NULL;

Proto_STLMailListRsp* Proto_STLMailListRsp::New() const {
  return new Proto_STLMailListRsp;
}

void Proto_STLMailListRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_cs_rsp()) {
      if (cs_rsp_ != NULL) cs_rsp_->::proto_email::Proto_CSMailListRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_STLMailListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cs_rsp;
        break;
      }

      // optional .proto_email.Proto_CSMailListRsp cs_rsp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cs_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cs_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_STLMailListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional .proto_email.Proto_CSMailListRsp cs_rsp = 2;
  if (has_cs_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cs_rsp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_STLMailListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional .proto_email.Proto_CSMailListRsp cs_rsp = 2;
  if (has_cs_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cs_rsp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_STLMailListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional .proto_email.Proto_CSMailListRsp cs_rsp = 2;
    if (has_cs_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cs_rsp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_STLMailListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_STLMailListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_STLMailListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_STLMailListRsp::MergeFrom(const Proto_STLMailListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_cs_rsp()) {
      mutable_cs_rsp()->::proto_email::Proto_CSMailListRsp::MergeFrom(from.cs_rsp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_STLMailListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_STLMailListRsp::CopyFrom(const Proto_STLMailListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_STLMailListRsp::IsInitialized() const {

  return true;
}

void Proto_STLMailListRsp::Swap(Proto_STLMailListRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(cs_rsp_, other->cs_rsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_STLMailListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_STLMailListRsp_descriptor_;
  metadata.reflection = Proto_STLMailListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_LTSMailReadReq::kUserIdFieldNumber;
const int Proto_LTSMailReadReq::kMailIdFieldNumber;
#endif  // !_MSC_VER

Proto_LTSMailReadReq::Proto_LTSMailReadReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_LTSMailReadReq::InitAsDefaultInstance() {
}

Proto_LTSMailReadReq::Proto_LTSMailReadReq(const Proto_LTSMailReadReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_LTSMailReadReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  mail_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_LTSMailReadReq::~Proto_LTSMailReadReq() {
  SharedDtor();
}

void Proto_LTSMailReadReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_LTSMailReadReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_LTSMailReadReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_LTSMailReadReq_descriptor_;
}

const Proto_LTSMailReadReq& Proto_LTSMailReadReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5femail_2eproto();
  return *default_instance_;
}

Proto_LTSMailReadReq* Proto_LTSMailReadReq::default_instance_ = NULL;

Proto_LTSMailReadReq* Proto_LTSMailReadReq::New() const {
  return new Proto_LTSMailReadReq;
}

void Proto_LTSMailReadReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    mail_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_LTSMailReadReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_id;
        break;
      }

      // optional uint64 mail_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_LTSMailReadReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint64 mail_id = 2;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mail_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_LTSMailReadReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint64 mail_id = 2;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mail_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_LTSMailReadReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 mail_id = 2;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mail_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_LTSMailReadReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_LTSMailReadReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_LTSMailReadReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_LTSMailReadReq::MergeFrom(const Proto_LTSMailReadReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_LTSMailReadReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_LTSMailReadReq::CopyFrom(const Proto_LTSMailReadReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_LTSMailReadReq::IsInitialized() const {

  return true;
}

void Proto_LTSMailReadReq::Swap(Proto_LTSMailReadReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(mail_id_, other->mail_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_LTSMailReadReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_LTSMailReadReq_descriptor_;
  metadata.reflection = Proto_LTSMailReadReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_STLMailReadRsp::kUserIdFieldNumber;
const int Proto_STLMailReadRsp::kCsRspFieldNumber;
#endif  // !_MSC_VER

Proto_STLMailReadRsp::Proto_STLMailReadRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_STLMailReadRsp::InitAsDefaultInstance() {
  cs_rsp_ = const_cast< ::proto_email::Proto_CSMailReadRsp*>(&::proto_email::Proto_CSMailReadRsp::default_instance());
}

Proto_STLMailReadRsp::Proto_STLMailReadRsp(const Proto_STLMailReadRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_STLMailReadRsp::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  cs_rsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_STLMailReadRsp::~Proto_STLMailReadRsp() {
  SharedDtor();
}

void Proto_STLMailReadRsp::SharedDtor() {
  if (this != default_instance_) {
    delete cs_rsp_;
  }
}

void Proto_STLMailReadRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_STLMailReadRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_STLMailReadRsp_descriptor_;
}

const Proto_STLMailReadRsp& Proto_STLMailReadRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5femail_2eproto();
  return *default_instance_;
}

Proto_STLMailReadRsp* Proto_STLMailReadRsp::default_instance_ = NULL;

Proto_STLMailReadRsp* Proto_STLMailReadRsp::New() const {
  return new Proto_STLMailReadRsp;
}

void Proto_STLMailReadRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_cs_rsp()) {
      if (cs_rsp_ != NULL) cs_rsp_->::proto_email::Proto_CSMailReadRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_STLMailReadRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cs_rsp;
        break;
      }

      // optional .proto_email.Proto_CSMailReadRsp cs_rsp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cs_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cs_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_STLMailReadRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional .proto_email.Proto_CSMailReadRsp cs_rsp = 2;
  if (has_cs_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cs_rsp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_STLMailReadRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional .proto_email.Proto_CSMailReadRsp cs_rsp = 2;
  if (has_cs_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cs_rsp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_STLMailReadRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional .proto_email.Proto_CSMailReadRsp cs_rsp = 2;
    if (has_cs_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cs_rsp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_STLMailReadRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_STLMailReadRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_STLMailReadRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_STLMailReadRsp::MergeFrom(const Proto_STLMailReadRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_cs_rsp()) {
      mutable_cs_rsp()->::proto_email::Proto_CSMailReadRsp::MergeFrom(from.cs_rsp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_STLMailReadRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_STLMailReadRsp::CopyFrom(const Proto_STLMailReadRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_STLMailReadRsp::IsInitialized() const {

  return true;
}

void Proto_STLMailReadRsp::Swap(Proto_STLMailReadRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(cs_rsp_, other->cs_rsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_STLMailReadRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_STLMailReadRsp_descriptor_;
  metadata.reflection = Proto_STLMailReadRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_STLMailAutoPushRsp::kUserIdFieldNumber;
const int Proto_STLMailAutoPushRsp::kRoleMailListFieldNumber;
const int Proto_STLMailAutoPushRsp::kAllCountFieldNumber;
const int Proto_STLMailAutoPushRsp::kNoReadCountFieldNumber;
#endif  // !_MSC_VER

Proto_STLMailAutoPushRsp::Proto_STLMailAutoPushRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_STLMailAutoPushRsp::InitAsDefaultInstance() {
}

Proto_STLMailAutoPushRsp::Proto_STLMailAutoPushRsp(const Proto_STLMailAutoPushRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_STLMailAutoPushRsp::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  all_count_ = 0;
  no_read_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_STLMailAutoPushRsp::~Proto_STLMailAutoPushRsp() {
  SharedDtor();
}

void Proto_STLMailAutoPushRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_STLMailAutoPushRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_STLMailAutoPushRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_STLMailAutoPushRsp_descriptor_;
}

const Proto_STLMailAutoPushRsp& Proto_STLMailAutoPushRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5femail_2eproto();
  return *default_instance_;
}

Proto_STLMailAutoPushRsp* Proto_STLMailAutoPushRsp::default_instance_ = NULL;

Proto_STLMailAutoPushRsp* Proto_STLMailAutoPushRsp::New() const {
  return new Proto_STLMailAutoPushRsp;
}

void Proto_STLMailAutoPushRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    all_count_ = 0;
    no_read_count_ = 0;
  }
  role_mail_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_STLMailAutoPushRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_mail_list;
        break;
      }

      // repeated .proto_email.UserMailData role_mail_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_mail_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role_mail_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_mail_list;
        if (input->ExpectTag(24)) goto parse_all_count;
        break;
      }

      // optional int32 all_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_count_)));
          set_has_all_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_no_read_count;
        break;
      }

      // optional int32 no_read_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_no_read_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &no_read_count_)));
          set_has_no_read_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_STLMailAutoPushRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // repeated .proto_email.UserMailData role_mail_list = 2;
  for (int i = 0; i < this->role_mail_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->role_mail_list(i), output);
  }

  // optional int32 all_count = 3;
  if (has_all_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->all_count(), output);
  }

  // optional int32 no_read_count = 4;
  if (has_no_read_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->no_read_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_STLMailAutoPushRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // repeated .proto_email.UserMailData role_mail_list = 2;
  for (int i = 0; i < this->role_mail_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->role_mail_list(i), target);
  }

  // optional int32 all_count = 3;
  if (has_all_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->all_count(), target);
  }

  // optional int32 no_read_count = 4;
  if (has_no_read_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->no_read_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_STLMailAutoPushRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional int32 all_count = 3;
    if (has_all_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_count());
    }

    // optional int32 no_read_count = 4;
    if (has_no_read_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->no_read_count());
    }

  }
  // repeated .proto_email.UserMailData role_mail_list = 2;
  total_size += 1 * this->role_mail_list_size();
  for (int i = 0; i < this->role_mail_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role_mail_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_STLMailAutoPushRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_STLMailAutoPushRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_STLMailAutoPushRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_STLMailAutoPushRsp::MergeFrom(const Proto_STLMailAutoPushRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_mail_list_.MergeFrom(from.role_mail_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_all_count()) {
      set_all_count(from.all_count());
    }
    if (from.has_no_read_count()) {
      set_no_read_count(from.no_read_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_STLMailAutoPushRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_STLMailAutoPushRsp::CopyFrom(const Proto_STLMailAutoPushRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_STLMailAutoPushRsp::IsInitialized() const {

  return true;
}

void Proto_STLMailAutoPushRsp::Swap(Proto_STLMailAutoPushRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    role_mail_list_.Swap(&other->role_mail_list_);
    std::swap(all_count_, other->all_count_);
    std::swap(no_read_count_, other->no_read_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_STLMailAutoPushRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_STLMailAutoPushRsp_descriptor_;
  metadata.reflection = Proto_STLMailAutoPushRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_LTSMailDelReq::kUserIdFieldNumber;
const int Proto_LTSMailDelReq::kCsReqFieldNumber;
#endif  // !_MSC_VER

Proto_LTSMailDelReq::Proto_LTSMailDelReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_LTSMailDelReq::InitAsDefaultInstance() {
  cs_req_ = const_cast< ::proto_email::Proto_CSMailDelReq*>(&::proto_email::Proto_CSMailDelReq::default_instance());
}

Proto_LTSMailDelReq::Proto_LTSMailDelReq(const Proto_LTSMailDelReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_LTSMailDelReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  cs_req_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_LTSMailDelReq::~Proto_LTSMailDelReq() {
  SharedDtor();
}

void Proto_LTSMailDelReq::SharedDtor() {
  if (this != default_instance_) {
    delete cs_req_;
  }
}

void Proto_LTSMailDelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_LTSMailDelReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_LTSMailDelReq_descriptor_;
}

const Proto_LTSMailDelReq& Proto_LTSMailDelReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5femail_2eproto();
  return *default_instance_;
}

Proto_LTSMailDelReq* Proto_LTSMailDelReq::default_instance_ = NULL;

Proto_LTSMailDelReq* Proto_LTSMailDelReq::New() const {
  return new Proto_LTSMailDelReq;
}

void Proto_LTSMailDelReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_cs_req()) {
      if (cs_req_ != NULL) cs_req_->::proto_email::Proto_CSMailDelReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_LTSMailDelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cs_req;
        break;
      }

      // optional .proto_email.Proto_CSMailDelReq cs_req = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cs_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cs_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_LTSMailDelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional .proto_email.Proto_CSMailDelReq cs_req = 2;
  if (has_cs_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cs_req(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_LTSMailDelReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional .proto_email.Proto_CSMailDelReq cs_req = 2;
  if (has_cs_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cs_req(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_LTSMailDelReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional .proto_email.Proto_CSMailDelReq cs_req = 2;
    if (has_cs_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cs_req());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_LTSMailDelReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_LTSMailDelReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_LTSMailDelReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_LTSMailDelReq::MergeFrom(const Proto_LTSMailDelReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_cs_req()) {
      mutable_cs_req()->::proto_email::Proto_CSMailDelReq::MergeFrom(from.cs_req());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_LTSMailDelReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_LTSMailDelReq::CopyFrom(const Proto_LTSMailDelReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_LTSMailDelReq::IsInitialized() const {

  return true;
}

void Proto_LTSMailDelReq::Swap(Proto_LTSMailDelReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(cs_req_, other->cs_req_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_LTSMailDelReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_LTSMailDelReq_descriptor_;
  metadata.reflection = Proto_LTSMailDelReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_STLMailDelRsp::kUserIdFieldNumber;
const int Proto_STLMailDelRsp::kCsRspFieldNumber;
#endif  // !_MSC_VER

Proto_STLMailDelRsp::Proto_STLMailDelRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_STLMailDelRsp::InitAsDefaultInstance() {
  cs_rsp_ = const_cast< ::proto_email::Proto_CSMailDelRsp*>(&::proto_email::Proto_CSMailDelRsp::default_instance());
}

Proto_STLMailDelRsp::Proto_STLMailDelRsp(const Proto_STLMailDelRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_STLMailDelRsp::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  cs_rsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_STLMailDelRsp::~Proto_STLMailDelRsp() {
  SharedDtor();
}

void Proto_STLMailDelRsp::SharedDtor() {
  if (this != default_instance_) {
    delete cs_rsp_;
  }
}

void Proto_STLMailDelRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_STLMailDelRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_STLMailDelRsp_descriptor_;
}

const Proto_STLMailDelRsp& Proto_STLMailDelRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5femail_2eproto();
  return *default_instance_;
}

Proto_STLMailDelRsp* Proto_STLMailDelRsp::default_instance_ = NULL;

Proto_STLMailDelRsp* Proto_STLMailDelRsp::New() const {
  return new Proto_STLMailDelRsp;
}

void Proto_STLMailDelRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_cs_rsp()) {
      if (cs_rsp_ != NULL) cs_rsp_->::proto_email::Proto_CSMailDelRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_STLMailDelRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cs_rsp;
        break;
      }

      // optional .proto_email.Proto_CSMailDelRsp cs_rsp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cs_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cs_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_STLMailDelRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional .proto_email.Proto_CSMailDelRsp cs_rsp = 2;
  if (has_cs_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cs_rsp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_STLMailDelRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional .proto_email.Proto_CSMailDelRsp cs_rsp = 2;
  if (has_cs_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cs_rsp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_STLMailDelRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional .proto_email.Proto_CSMailDelRsp cs_rsp = 2;
    if (has_cs_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cs_rsp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_STLMailDelRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_STLMailDelRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_STLMailDelRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_STLMailDelRsp::MergeFrom(const Proto_STLMailDelRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_cs_rsp()) {
      mutable_cs_rsp()->::proto_email::Proto_CSMailDelRsp::MergeFrom(from.cs_rsp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_STLMailDelRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_STLMailDelRsp::CopyFrom(const Proto_STLMailDelRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_STLMailDelRsp::IsInitialized() const {

  return true;
}

void Proto_STLMailDelRsp::Swap(Proto_STLMailDelRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(cs_rsp_, other->cs_rsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_STLMailDelRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_STLMailDelRsp_descriptor_;
  metadata.reflection = Proto_STLMailDelRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_OtherTSMailCreateReq::kUserIdFieldNumber;
const int Proto_OtherTSMailCreateReq::kRoleMailFieldNumber;
#endif  // !_MSC_VER

Proto_OtherTSMailCreateReq::Proto_OtherTSMailCreateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_OtherTSMailCreateReq::InitAsDefaultInstance() {
  role_mail_ = const_cast< ::proto_ff::tbUserMailDetail*>(&::proto_ff::tbUserMailDetail::default_instance());
}

Proto_OtherTSMailCreateReq::Proto_OtherTSMailCreateReq(const Proto_OtherTSMailCreateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_OtherTSMailCreateReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  role_mail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_OtherTSMailCreateReq::~Proto_OtherTSMailCreateReq() {
  SharedDtor();
}

void Proto_OtherTSMailCreateReq::SharedDtor() {
  if (this != default_instance_) {
    delete role_mail_;
  }
}

void Proto_OtherTSMailCreateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_OtherTSMailCreateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_OtherTSMailCreateReq_descriptor_;
}

const Proto_OtherTSMailCreateReq& Proto_OtherTSMailCreateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5femail_2eproto();
  return *default_instance_;
}

Proto_OtherTSMailCreateReq* Proto_OtherTSMailCreateReq::default_instance_ = NULL;

Proto_OtherTSMailCreateReq* Proto_OtherTSMailCreateReq::New() const {
  return new Proto_OtherTSMailCreateReq;
}

void Proto_OtherTSMailCreateReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_mail()) {
      if (role_mail_ != NULL) role_mail_->::proto_ff::tbUserMailDetail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_OtherTSMailCreateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_mail;
        break;
      }

      // optional .proto_ff.tbUserMailDetail role_mail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_OtherTSMailCreateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional .proto_ff.tbUserMailDetail role_mail = 2;
  if (has_role_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->role_mail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_OtherTSMailCreateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional .proto_ff.tbUserMailDetail role_mail = 2;
  if (has_role_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->role_mail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_OtherTSMailCreateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional .proto_ff.tbUserMailDetail role_mail = 2;
    if (has_role_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_mail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_OtherTSMailCreateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_OtherTSMailCreateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_OtherTSMailCreateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_OtherTSMailCreateReq::MergeFrom(const Proto_OtherTSMailCreateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_role_mail()) {
      mutable_role_mail()->::proto_ff::tbUserMailDetail::MergeFrom(from.role_mail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_OtherTSMailCreateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_OtherTSMailCreateReq::CopyFrom(const Proto_OtherTSMailCreateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_OtherTSMailCreateReq::IsInitialized() const {

  return true;
}

void Proto_OtherTSMailCreateReq::Swap(Proto_OtherTSMailCreateReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(role_mail_, other->role_mail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_OtherTSMailCreateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_OtherTSMailCreateReq_descriptor_;
  metadata.reflection = Proto_OtherTSMailCreateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_STOtherMailCreateRsp::kUserIdFieldNumber;
const int Proto_STOtherMailCreateRsp::kRoleMailFieldNumber;
const int Proto_STOtherMailCreateRsp::kResultFieldNumber;
#endif  // !_MSC_VER

Proto_STOtherMailCreateRsp::Proto_STOtherMailCreateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_STOtherMailCreateRsp::InitAsDefaultInstance() {
  role_mail_ = const_cast< ::proto_ff::tbUserMailDetail*>(&::proto_ff::tbUserMailDetail::default_instance());
}

Proto_STOtherMailCreateRsp::Proto_STOtherMailCreateRsp(const Proto_STOtherMailCreateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_STOtherMailCreateRsp::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  role_mail_ = NULL;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_STOtherMailCreateRsp::~Proto_STOtherMailCreateRsp() {
  SharedDtor();
}

void Proto_STOtherMailCreateRsp::SharedDtor() {
  if (this != default_instance_) {
    delete role_mail_;
  }
}

void Proto_STOtherMailCreateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_STOtherMailCreateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_STOtherMailCreateRsp_descriptor_;
}

const Proto_STOtherMailCreateRsp& Proto_STOtherMailCreateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5femail_2eproto();
  return *default_instance_;
}

Proto_STOtherMailCreateRsp* Proto_STOtherMailCreateRsp::default_instance_ = NULL;

Proto_STOtherMailCreateRsp* Proto_STOtherMailCreateRsp::New() const {
  return new Proto_STOtherMailCreateRsp;
}

void Proto_STOtherMailCreateRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_mail()) {
      if (role_mail_ != NULL) role_mail_->::proto_ff::tbUserMailDetail::Clear();
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_STOtherMailCreateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_mail;
        break;
      }

      // optional .proto_ff.tbUserMailDetail role_mail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_STOtherMailCreateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional .proto_ff.tbUserMailDetail role_mail = 2;
  if (has_role_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->role_mail(), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_STOtherMailCreateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional .proto_ff.tbUserMailDetail role_mail = 2;
  if (has_role_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->role_mail(), target);
  }

  // optional int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_STOtherMailCreateRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional .proto_ff.tbUserMailDetail role_mail = 2;
    if (has_role_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_mail());
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_STOtherMailCreateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_STOtherMailCreateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_STOtherMailCreateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_STOtherMailCreateRsp::MergeFrom(const Proto_STOtherMailCreateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_role_mail()) {
      mutable_role_mail()->::proto_ff::tbUserMailDetail::MergeFrom(from.role_mail());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_STOtherMailCreateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_STOtherMailCreateRsp::CopyFrom(const Proto_STOtherMailCreateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_STOtherMailCreateRsp::IsInitialized() const {

  return true;
}

void Proto_STOtherMailCreateRsp::Swap(Proto_STOtherMailCreateRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(role_mail_, other->role_mail_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_STOtherMailCreateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_STOtherMailCreateRsp_descriptor_;
  metadata.reflection = Proto_STOtherMailCreateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_LTSMailGetItemReq::kUserIdFieldNumber;
const int Proto_LTSMailGetItemReq::kMailIdFieldNumber;
#endif  // !_MSC_VER

Proto_LTSMailGetItemReq::Proto_LTSMailGetItemReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_LTSMailGetItemReq::InitAsDefaultInstance() {
}

Proto_LTSMailGetItemReq::Proto_LTSMailGetItemReq(const Proto_LTSMailGetItemReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_LTSMailGetItemReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  mail_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_LTSMailGetItemReq::~Proto_LTSMailGetItemReq() {
  SharedDtor();
}

void Proto_LTSMailGetItemReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_LTSMailGetItemReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_LTSMailGetItemReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_LTSMailGetItemReq_descriptor_;
}

const Proto_LTSMailGetItemReq& Proto_LTSMailGetItemReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5femail_2eproto();
  return *default_instance_;
}

Proto_LTSMailGetItemReq* Proto_LTSMailGetItemReq::default_instance_ = NULL;

Proto_LTSMailGetItemReq* Proto_LTSMailGetItemReq::New() const {
  return new Proto_LTSMailGetItemReq;
}

void Proto_LTSMailGetItemReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    mail_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_LTSMailGetItemReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_id;
        break;
      }

      // optional uint64 mail_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_LTSMailGetItemReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint64 mail_id = 2;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mail_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_LTSMailGetItemReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint64 mail_id = 2;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mail_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_LTSMailGetItemReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional uint64 mail_id = 2;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mail_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_LTSMailGetItemReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_LTSMailGetItemReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_LTSMailGetItemReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_LTSMailGetItemReq::MergeFrom(const Proto_LTSMailGetItemReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_LTSMailGetItemReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_LTSMailGetItemReq::CopyFrom(const Proto_LTSMailGetItemReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_LTSMailGetItemReq::IsInitialized() const {

  return true;
}

void Proto_LTSMailGetItemReq::Swap(Proto_LTSMailGetItemReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(mail_id_, other->mail_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_LTSMailGetItemReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_LTSMailGetItemReq_descriptor_;
  metadata.reflection = Proto_LTSMailGetItemReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_STLMailGetItemRsp::kUserIdFieldNumber;
const int Proto_STLMailGetItemRsp::kCsRspFieldNumber;
#endif  // !_MSC_VER

Proto_STLMailGetItemRsp::Proto_STLMailGetItemRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_STLMailGetItemRsp::InitAsDefaultInstance() {
  cs_rsp_ = const_cast< ::proto_email::Proto_CSMailGetItemRsp*>(&::proto_email::Proto_CSMailGetItemRsp::default_instance());
}

Proto_STLMailGetItemRsp::Proto_STLMailGetItemRsp(const Proto_STLMailGetItemRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_STLMailGetItemRsp::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  cs_rsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_STLMailGetItemRsp::~Proto_STLMailGetItemRsp() {
  SharedDtor();
}

void Proto_STLMailGetItemRsp::SharedDtor() {
  if (this != default_instance_) {
    delete cs_rsp_;
  }
}

void Proto_STLMailGetItemRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_STLMailGetItemRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_STLMailGetItemRsp_descriptor_;
}

const Proto_STLMailGetItemRsp& Proto_STLMailGetItemRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5femail_2eproto();
  return *default_instance_;
}

Proto_STLMailGetItemRsp* Proto_STLMailGetItemRsp::default_instance_ = NULL;

Proto_STLMailGetItemRsp* Proto_STLMailGetItemRsp::New() const {
  return new Proto_STLMailGetItemRsp;
}

void Proto_STLMailGetItemRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_cs_rsp()) {
      if (cs_rsp_ != NULL) cs_rsp_->::proto_email::Proto_CSMailGetItemRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_STLMailGetItemRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cs_rsp;
        break;
      }

      // optional .proto_email.Proto_CSMailGetItemRsp cs_rsp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cs_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cs_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_STLMailGetItemRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional .proto_email.Proto_CSMailGetItemRsp cs_rsp = 2;
  if (has_cs_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cs_rsp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_STLMailGetItemRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional .proto_email.Proto_CSMailGetItemRsp cs_rsp = 2;
  if (has_cs_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cs_rsp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_STLMailGetItemRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // optional .proto_email.Proto_CSMailGetItemRsp cs_rsp = 2;
    if (has_cs_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cs_rsp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_STLMailGetItemRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_STLMailGetItemRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_STLMailGetItemRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_STLMailGetItemRsp::MergeFrom(const Proto_STLMailGetItemRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_cs_rsp()) {
      mutable_cs_rsp()->::proto_email::Proto_CSMailGetItemRsp::MergeFrom(from.cs_rsp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_STLMailGetItemRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_STLMailGetItemRsp::CopyFrom(const Proto_STLMailGetItemRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_STLMailGetItemRsp::IsInitialized() const {

  return true;
}

void Proto_STLMailGetItemRsp::Swap(Proto_STLMailGetItemRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(cs_rsp_, other->cs_rsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_STLMailGetItemRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_STLMailGetItemRsp_descriptor_;
  metadata.reflection = Proto_STLMailGetItemRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_STLMailReadItemReq::kUserIdFieldNumber;
const int Proto_STLMailReadItemReq::kItemListFieldNumber;
#endif  // !_MSC_VER

Proto_STLMailReadItemReq::Proto_STLMailReadItemReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_STLMailReadItemReq::InitAsDefaultInstance() {
}

Proto_STLMailReadItemReq::Proto_STLMailReadItemReq(const Proto_STLMailReadItemReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_STLMailReadItemReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_STLMailReadItemReq::~Proto_STLMailReadItemReq() {
  SharedDtor();
}

void Proto_STLMailReadItemReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_STLMailReadItemReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_STLMailReadItemReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_STLMailReadItemReq_descriptor_;
}

const Proto_STLMailReadItemReq& Proto_STLMailReadItemReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5femail_2eproto();
  return *default_instance_;
}

Proto_STLMailReadItemReq* Proto_STLMailReadItemReq::default_instance_ = NULL;

Proto_STLMailReadItemReq* Proto_STLMailReadItemReq::New() const {
  return new Proto_STLMailReadItemReq;
}

void Proto_STLMailReadItemReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
  }
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_STLMailReadItemReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        break;
      }

      // repeated .proto_email.MailItem item_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_STLMailReadItemReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // repeated .proto_email.MailItem item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_STLMailReadItemReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // repeated .proto_email.MailItem item_list = 2;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_STLMailReadItemReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

  }
  // repeated .proto_email.MailItem item_list = 2;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_STLMailReadItemReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_STLMailReadItemReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_STLMailReadItemReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_STLMailReadItemReq::MergeFrom(const Proto_STLMailReadItemReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_STLMailReadItemReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_STLMailReadItemReq::CopyFrom(const Proto_STLMailReadItemReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_STLMailReadItemReq::IsInitialized() const {

  return true;
}

void Proto_STLMailReadItemReq::Swap(Proto_STLMailReadItemReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_STLMailReadItemReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_STLMailReadItemReq_descriptor_;
  metadata.reflection = Proto_STLMailReadItemReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Proto_LTSMailReadItemRsp::kUserIdFieldNumber;
const int Proto_LTSMailReadItemRsp::kGetIdFieldNumber;
const int Proto_LTSMailReadItemRsp::kIdFieldNumber;
#endif  // !_MSC_VER

Proto_LTSMailReadItemRsp::Proto_LTSMailReadItemRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Proto_LTSMailReadItemRsp::InitAsDefaultInstance() {
}

Proto_LTSMailReadItemRsp::Proto_LTSMailReadItemRsp(const Proto_LTSMailReadItemRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Proto_LTSMailReadItemRsp::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Proto_LTSMailReadItemRsp::~Proto_LTSMailReadItemRsp() {
  SharedDtor();
}

void Proto_LTSMailReadItemRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Proto_LTSMailReadItemRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proto_LTSMailReadItemRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Proto_LTSMailReadItemRsp_descriptor_;
}

const Proto_LTSMailReadItemRsp& Proto_LTSMailReadItemRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fsvr_5femail_2eproto();
  return *default_instance_;
}

Proto_LTSMailReadItemRsp* Proto_LTSMailReadItemRsp::default_instance_ = NULL;

Proto_LTSMailReadItemRsp* Proto_LTSMailReadItemRsp::New() const {
  return new Proto_LTSMailReadItemRsp;
}

void Proto_LTSMailReadItemRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
  }
  get_id_.Clear();
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Proto_LTSMailReadItemRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_get_id;
        break;
      }

      // repeated .proto_email.MailItem get_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_get_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_get_id;
        if (input->ExpectTag(42)) goto parse_id;
        break;
      }

      // repeated .proto_email.MailItem id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Proto_LTSMailReadItemRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // repeated .proto_email.MailItem get_id = 4;
  for (int i = 0; i < this->get_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->get_id(i), output);
  }

  // repeated .proto_email.MailItem id = 5;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Proto_LTSMailReadItemRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // repeated .proto_email.MailItem get_id = 4;
  for (int i = 0; i < this->get_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->get_id(i), target);
  }

  // repeated .proto_email.MailItem id = 5;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Proto_LTSMailReadItemRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

  }
  // repeated .proto_email.MailItem get_id = 4;
  total_size += 1 * this->get_id_size();
  for (int i = 0; i < this->get_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->get_id(i));
  }

  // repeated .proto_email.MailItem id = 5;
  total_size += 1 * this->id_size();
  for (int i = 0; i < this->id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proto_LTSMailReadItemRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Proto_LTSMailReadItemRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Proto_LTSMailReadItemRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Proto_LTSMailReadItemRsp::MergeFrom(const Proto_LTSMailReadItemRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  get_id_.MergeFrom(from.get_id_);
  id_.MergeFrom(from.id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Proto_LTSMailReadItemRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto_LTSMailReadItemRsp::CopyFrom(const Proto_LTSMailReadItemRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto_LTSMailReadItemRsp::IsInitialized() const {

  return true;
}

void Proto_LTSMailReadItemRsp::Swap(Proto_LTSMailReadItemRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    get_id_.Swap(&other->get_id_);
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Proto_LTSMailReadItemRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Proto_LTSMailReadItemRsp_descriptor_;
  metadata.reflection = Proto_LTSMailReadItemRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
